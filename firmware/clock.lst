
AVRASM ver. 2.1.42  F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm Thu Sep 11 22:52:27 2014

F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(6): Including file 'C:\Program Files\Atmel\AVR Tools\AvrAssembler2\Appnotes\m48PAdef.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(9): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\definitions.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\definitions.inc(81): warning: Register r26 already defined by the .DEF directive
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(9): 'F:\Work\Hardware\HAND_CLOCK\firmware\definitions.inc' included form here
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(44): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\init.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(1170): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\Sie_c60.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(1174): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\CP866.inc'
                 
                 
                 ; TODO
                 ; 1. Запилить секундомер
                 
                 .list
                 
                 .include "definitions.inc"
                 
                 
                 ; Регистры GPIORx
                 ; GPIOR0.0 - флаг переноса BCD
                 ; GPIOR0.1 - используется как вспомогательный флаг при опросе клавиатуры
                 ; GPIOR0.2 - устанавливается в 1 каждую десятую долю секунды
                 ; GPIOR0.3 - ...каждую секунду
                 ; GPIOR0.4 - ...минуту
                 ; GPIOR0.5 - ...час
                 ; GPIOR0.6 - ...день
                 ; GPIOR0.7 - ...месяц
                 
                 ;------- Константы
                 .equ num_mode = 0x02
                 .equ sec_part = 8
                 .equ OCR2A_val = 127
                 .equ TimCntVal = 32
                 
                 .equ cRed = 0b11100000 	; стандартные цвета
                 .equ cGreen = 0b00011100
                 .equ cBlue = 0b00000011
                 .equ cYellow = 0b11111100
                 .equ cMagenta = 0b11100011
                 .equ cCyan = 0b00011111
                 .equ cWhite = 0b11111111
                 .equ cBlack = 0x00
                 .equ cGray = 0b10110110
                 .equ cDarkGray = 0b01101101
                 ;-------
                 
                 ;------- Определения
                 ; r0,r1 - используются при аппаратном mul
                 .def lcd_X = r2	; Текущие координаты
                 .def lcd_Y = r3
                 .def bkg_color = r4 ; Цвета фона и текста
                 .def frg_color = r5
                 .def lcd_mx = r6	; множители масштабирования
                 .def lcd_my = r7
                 
                 .def kbd = r8	; Битовая маска нажатых кнопок
                 .def led_timer=r9	; Таймер подсветки (1/8 секундные интерваллы)
                 .def sec_part_cnt = r10 ; счетчик долей секунды
                 
                 ; r11 - свободен
                 
                 .def kbd_prev = r12	; Битовая маска нажатых кнопок предыдущего такта
                 .def kbd_press = r13 ; Нажатые кнопки (из 1 в 0)
                 .def kbd_release = r14 ; Отпущенные кнопки (из 0 в 1)
                 
                 ; r15 - свободен
                 
                 .def tmp=r16	; Temp
                 .def tmp1=r17
                 .def tmp2=r18	; Используется таймером для отсчета интервалов задержек
                 
                 .def mode=r19	; Режим работы: 0 - часы (отображение даты-времени), 1 - настройка даты, времени,
                 				; 2 - таймер, 3 - секундомер 
                 
                 ; r20 - используется в подпрограммах для дисплея
                 ; r21 - один раз используется в подпрограмме для дисплея
                 
                 .def snd_flag = r22 ; регистр флагов для звука. Содержит индекс на текущий сэмпл, если равен 0 - то звук не играется, если больше нуля - то значение-1 - номер сэмпла
                 
                 .def refresh = r23	; Регистр с флагами обновления
                 ; Биты:
                 ; 0 - надо обновить минуты
                 ; 1 - часы
                 ; 2 - число/день недели
                 ; 3 - месяц
                 ; 4 - год
                 ; 5 - обновление таймера
                 ; 6 - таймер запущен(1)/остановлен(0)
                 ; 7 - флаг отработки ЦНХ
                 ; т.к. рисование идет не быстрее чем раз в секунду, то секунды обновляются каждый такт и так
                 .def mode_tmp=r24 ; Для режима 1 - здесь хранится текущий редактируемый параметр (час, минута, секунда и т.д.)
                 				  ; 0 - час, 1 - минута, 2 - секунда, 3 - число, 4 - день недели, 5 - месяц, 6 - год (пока так)
                 				  ; этот же параметр и указывает какая часть рисуемой даты-времени будет подсвечена
                 
                 .def snd = r25 ; регистр длительности звука/паузы
                 
                 .def style = r26 ; стиль отображения времени: 0 - цифры, 1 - цифры в стиле 7-ми сегментного индикатора, 2 - бианрные
                 
                 ; r26, r27 - X (не задействован)
                 ; r28, r29 - Y (используется в ЦНХ)
                 ; r30, r31 - Z (используется везде)
                 ;-------
                 
                 ;------- Макросы
                 .macro CS_LOW
                 	cbi PORTB, 1
                 	nop
                 .endm
                 .macro CS_HIGH
                 	sbi PORTB, 1
                 	nop
                 .endm
                 .macro LED_ON
                 	sbi PORTC, 1
                 	nop
                 .endm
                 .macro LED_OFF
                 	cbi PORTC, 1
                 	nop
                 .endm
                 .macro CMD_SET
                 	cbi PORTB, 0
                 	nop
                 .endm
                 .macro DATA_SET
                 	sbi PORTB, 0
                 	nop
                 .endm
                 .macro LCD_RESET_LOW
                 	cbi PORTC, 0
                 	nop
                 .endm
                 .macro LCD_RESET_HIGH
                 	sbi PORTC, 0
                 	nop
                 .endm
                 .macro LAPZ
                 	ldi ZH, high(@0 << 1)
                 	ldi ZL, low(@0 << 1)
                 .endm
                 .macro LASZ
                 	ldi ZH, high(@0)
                 	ldi ZL, low(@0)
                 .endm
                 .macro BEEP_ON
                 	sbi PORTC, 2
                 	nop
                 .endm
                 .macro BEEP_OFF
                 	cbi PORTC, 2
                 	nop
                 .endm
                 ;-------
                 
                 .cseg ; Сегмент кода
                 .org 0
                 
000000 c019      rjmp Start
                 ; Прерывания
000001 c1da      rjmp INT0r
000002 c1d9      rjmp INT1r
000003 c1d8      rjmp PCINT0r
000004 c1d7      rjmp PCINT1r
000005 c1d6      rjmp PCINT2r
000006 c1d5      rjmp WDT
000007 c1de      rjmp T2_COMPA
000008 c1d3      rjmp T2_COMPB
000009 c1d2      rjmp T2_OVF
00000a c1d1      rjmp T1_CAPT
00000b c1d0      rjmp T1_COMPA
00000c c1cf      rjmp T1_COMPB
00000d c1ce      rjmp T1_OVF
00000e c1cd      rjmp T0_COMPA
00000f c1cc      rjmp T0_COMPB
000010 c1cb      rjmp T0_OVF
000011 c1ca      rjmp SPI_STC
000012 c1c9      rjmp USART_RX
000013 c1c8      rjmp USART_UDRE
000014 c1c7      rjmp USART_TX
000015 c1c6      rjmp AnalogDC
000016 c1c5      rjmp EE_RDY
000017 c1c4      rjmp AnalogCMP
000018 c1c3      rjmp TWI
000019 c1c2      rjmp SPM_RDY
                 
                 Start:
                 
                 .include "init.inc"
                 
00001a 94f8      	cli
                 ;-------- Инициализация стека
00001b e002          ldi tmp, high(RAMEND)
00001c bf0e          out SPH,tmp
00001d ef0f          ldi tmp, low(RAMEND)
00001e bf0d          out SPL,tmp
                 ;-------- Отключение Watchdog
00001f 95a8      	wdr
000020 2700      	clr tmp
000021 9300 0060 	sts WDTCSR, tmp
                 ;-------- Настраиваем асинхронный таймер
000023 e200      	ldi tmp,0b00100000	; Устанавливаем 32кГц источник для TCount2
000024 9300 00b6 	sts ASSR, tmp
                 	
000026 e002      	ldi tmp,0b00000010		; TCount2 вызывает прерывание при сравнении с OCR2A
000027 9300 0070 	sts TIMSK2, tmp
                 
000029 e70f      	ldi tmp, OCR2A_val
00002a 9300 00b3 	sts OCR2A, tmp		; Каждые 4.9 мс (примерно)
                 wl2:
00002c 9100 00b6 	lds tmp, ASSR
00002e fd03      	sbrc tmp, OCR2AUB
00002f cffc      	rjmp wl2
                 
000030 e001      	ldi tmp, 0x01		; TCount2 работает на частоте 32768 Гц
000031 9300 00b1 	sts TCCR2B, tmp
                 wl0:
000033 9100 00b6 	lds tmp, ASSR		; Ждем, пока будет обновлен TCCR2B
000035 fd00      	sbrc tmp, TCR2BUB
000036 cffc      	rjmp wl0
                 
000037 e002      	ldi tmp, 0b00000010	; Режим CTC
000038 9300 00b0 	sts TCCR2A, tmp
                 wl1:
00003a 9100 00b6 	lds tmp, ASSR
00003c fd01      	sbrc tmp, TCR2AUB			; Ждем, пока будет обновлен TCCR2A
00003d cffc      	rjmp wl1
                 ;-------- Отключаем не используемые модули (TWI, Timer0, Timer1, USART)
00003e ea0a      	ldi tmp, 0b10101010
00003f 9300 0064 	sts PRR, tmp
                 ;-------- Настраиваем АЦП для измерения опоры относительно напряжения питания
000041 e000      	ldi tmp, 0x00
000042 9300 007b 	sts ADCSRB, tmp
000044 e60e      	ldi tmp, 0b01101110	; В качестве опоры - питание на AVCC, в качестве источника для измерения - внутренняя опора 1.1В
                 						; Данные выравнены влево (ADLAR=1)
000045 9300 007c 	sts ADMUX, tmp
000047 e801      	ldi tmp, 0b10000001	; АЦП включен и работает на частоте 4МГц
000048 9300 007a 	sts ADCSRA, tmp
00004a e000      	ldi tmp, 0x00
00004b 9300 007e 	sts DIDR0, tmp
                 ;-------- Настраиваем sleep режим (Power-save mode)
00004d e007      	ldi tmp, 0b00000111
00004e bf03      	out SMCR, tmp
                 ;-------- Настраиваем порты
00004f e007      	ldi tmp, 0b00000111	; PORTC - подтяжки включены, PC0, PC1, PC2 - на выход
000050 b907      	out DDRC, tmp
000051 e709      	ldi tmp, 0b01111001	; PC2 - on/off для звука
000052 b908      	out PORTC, tmp
                 
000053 e20b      	ldi tmp, 0b00101011
000054 b904      	out DDRB, tmp
000055 ed07      	ldi tmp, 0b11010111
000056 b905      	out PORTB, tmp
                 
000057 e00c      	ldi tmp, 0b00001100
000058 b90a      	out DDRD, tmp
000059 ef07      	ldi tmp, 0b11110111
00005a b90b      	out PORTD, tmp
                 ;-------- Настраиваем SPI
00005b e500      	ldi tmp, 0b01010000	; Скорость fsck/2, режим 00, мастер
00005c bd0c      	out SPCR, tmp
00005d e001      	ldi tmp, 0x01
00005e bd0d      	out SPSR, tmp
00005f b50d      	in tmp, SPSR
000060 b50e      	in tmp, SPDR
                 ;-------- Настраиваем MCUCR
000061 e000      	ldi tmp, 0x00
000062 bf05      	out MCUCR, tmp
                 ;-------- Настраиваем EEPROM
000063 e000      	ldi tmp, 0x00
000064 bb0f      	out EECR, tmp
                 ;-------- Инициализируем регистры
000065 2733      	clr mode
000066 2788      	clr mode_tmp
000067 24aa      	clr sec_part_cnt
000068 2700      	clr r16
000069 2711      	clr r17
00006a 2722      	clr r18
00006b 2733      	clr r19
00006c 2744      	clr r20
00006d 2755      	clr r21
00006e 2766      	clr r22
00006f 2788      	clr r24
000070 2799      	clr r25
000071 27aa      	clr r26
000072 27bb      	clr r27
000073 27cc      	clr r28
000074 27dd      	clr r29
000075 27ee      	clr r30
000076 27ff      	clr r31
000077 e30f      	ldi tmp, 0b00111111
000078 2e80      	mov kbd, tmp
000079 2ec0      	mov kbd_prev, tmp
00007a 2ed0      	mov kbd_press, tmp
00007b 2ee0      	mov kbd_release, tmp
00007c e000      	ldi tmp, 0x00
00007d bb0e      	out GPIOR0, tmp
00007e e17f      	ldi refresh, 0b00011111
                 ;-------- Инициализируем значения в памяти
00007f e000      	ldi tmp, 0x00
000080 e0f1
000081 e0e0      	LASZ dsecond
000082 9301      	st Z+, tmp
000083 9301      	st Z+, tmp
000084 e308      	ldi tmp, 0x38
000085 9301      	st Z+, tmp
000086 e106      	ldi tmp, 0x16
000087 9301      	st Z+, tmp
000088 e205      	ldi tmp, 0x25
000089 9301      	st Z+, tmp
00008a e007      	ldi tmp, 0x07
00008b 9301      	st Z+, tmp
00008c e104      	ldi tmp, 0x14
00008d 9301      	st Z+, tmp
00008e e200      	ldi tmp, 0x20
00008f 9301      	st Z+, tmp
000090 e002      	ldi tmp, 0x02
000091 8300      	st Z, tmp
000092 e0f1
000093 e0e9      	LASZ timer_sec
000094 e000      	ldi tmp, 0x00
000095 9301      	st Z+, tmp
000096 8300      	st Z, tmp
                 
000097 e015      	ldi tmp1, 0x05
000098 2e21      	mov lcd_x, tmp1
000099 2e31      	mov lcd_y, tmp1
00009a ef1f      	ldi tmp1, cWhite
00009b 2e51      	mov frg_color, tmp1
00009c e010      	ldi tmp1, cBlack
00009d 2e41      	mov bkg_color, tmp1
00009e e011      	ldi tmp1, 0x01
00009f 2e61      	mov lcd_mx, tmp1
0000a0 2e71      	mov lcd_my, tmp1
                 
0000a1 9478      	sei
                 
0000a2 d486      	rcall LCD_C60_Init
0000a3 d520      	rcall LCD_Clear
0000a4 9841
0000a5 0000      	LED_OFF
                 	
0000a6 d389      	rcall LCD_IdleOn
                 
                 main:
                 
0000a7 9588      	sleep
                 
                 ; Ждем обновления TC2 как в апп-нотах по RTC
0000a8 e000      	ldi tmp, 0x00
0000a9 9300 00b4 	sts OCR2B, tmp
                 wtr:
0000ab 9100 00b6 	lds tmp, ASSR
0000ad fd02      	sbrc tmp, OCR2BUB
0000ae cffc      	rjmp wtr
                 
                 ; обработка звука
0000af 2366      	tst snd_flag	; если звук выключен - не обрабатываем
0000b0 f0e9      	breq m_tdr
                 	
0000b1 2322      	tst tmp2		; время вышло
0000b2 f429      	brne m_snd_cont
0000b3 e060      	ldi snd_flag, 0	; выключаем звук
0000b4 e090      	ldi snd, 0
0000b5 9842
0000b6 0000      	BEEP_OFF
0000b7 c016      	rjmp m_tdr
                 
                 m_snd_cont:
0000b8 2399      	tst snd				; если счетчик не равен нулю, то
0000b9 f7f1      	brne m_snd_cont
0000ba e0ff
0000bb e2e4      	LAPZ sound_pattern	; загружаем следующий паттерн (или первый)
0000bc 936f      	push snd_flag
0000bd 956a      	dec snd_flag
0000be 0fe6      	add ZL, snd_flag
0000bf e000      	ldi tmp, 0x00
0000c0 1ff0      	adc ZH, tmp
0000c1 9194      	lpm snd, Z
0000c2 916f      	pop snd_flag
0000c3 ff60      	sbrs snd_flag, 0	; проверяем на не-четность (так как флаг считается от 1-цы)
0000c4 c003      	rjmp m_snd_silent	; если четный - то выключаем бипер
0000c5 9a42
0000c6 0000      	BEEP_ON				; если не четный - то включаем
0000c7 c002      	rjmp m_snd_cont3
                 m_snd_silent:
0000c8 9842
0000c9 0000      	BEEP_OFF
                 m_snd_cont3:
0000ca 9563      	inc snd_flag
0000cb 3066      	cpi snd_flag, 6
0000cc f409      	brne m_tdr
0000cd e061      	ldi snd_flag, 1
                 
                 ; обработка таймера
                 m_tdr:
0000ce ff76      	sbrs refresh, 6 ; таймер запущен
0000cf c01e      	rjmp m_cont
0000d0 9bf3      	sbis GPIOR0, 3
0000d1 c01c      	rjmp m_cont
0000d2 e0f1
0000d3 e0e9      	LASZ timer_sec
0000d4 9101      	ld tmp, Z+
0000d5 3000      	cpi tmp, 0x00
0000d6 f419      	brne m_tdr1
0000d7 8100      	ld tmp, Z
0000d8 3000      	cpi tmp, 0x00
0000d9 f069      	breq m_tdr_stop
                 m_tdr1:
0000da 9731      	sbiw ZL, 0x01
0000db e909      	ldi tmp, 0x99
0000dc d296      	rcall BCD_Add	; BCD_Dec
0000dd 8100      	ld tmp, Z
0000de 3600      	cpi tmp, 0x60
0000df f028      	brlo m_tdr_ref
0000e0 e509      	ldi tmp, 0x59
0000e1 9301      	st Z+, tmp
0000e2 e909      	ldi tmp, 0x99
0000e3 d28f      	rcall BCD_Add	; BCD_Dec
0000e4 8100      	ld tmp, Z
                 m_tdr_ref:
0000e5 6270      	ori refresh, 0b00100000
0000e6 c007      	rjmp m_cont
                 m_tdr_stop:
0000e7 e000      	ldi tmp, 0x00
0000e8 8300      	st Z, tmp
0000e9 7b7f      	andi refresh, 0b10111111
0000ea 6270      	ori refresh, 0b00100000
0000eb e061      	ldi snd_flag, 1	; звуковой сигнал
0000ec e090      	ldi snd, 0
0000ed ef2f      	ldi tmp2, 255
                 
                 
                 m_cont:					; обработка режимов
0000ee 3030      	cpi mode, 0x00
0000ef f471      	brne m_mode1
                 
                 ; Режим 0 - рисуем часы, подсветка 5 секунд по нажатию, режим Idle
0000f0 9bf3      	sbis GPIOR0, 3	; Выполняем рисование каждую секунду
0000f1 c015      	rjmp kbd_hand
                 
                 m_draw_dt:
0000f2 e003      	ldi tmp, 3
0000f3 2e20      	mov lcd_x, tmp
0000f4 e104      	ldi tmp, 20
0000f5 2e30      	mov lcd_y, tmp
0000f6 d1b4      	rcall LCD_DrawTime
0000f7 d2bf      	rcall LCD_DrawDate
0000f8 d190      	rcall LCD_DrawBattery
0000f9 e003      	ldi tmp, 3
0000fa 2e20      	mov lcd_x, tmp
0000fb e104      	ldi tmp, 20
0000fc 2e30      	mov lcd_y, tmp
                 
0000fd c009      	rjmp kbd_hand
                 
                 ; Режим 1 - рисуем дату-время, подсветка включена, режим Normal, рисуем с интервалом 0.1 сек
                 m_mode1:
0000fe 3031      	cpi mode, 0x01
0000ff f419      	brne m_mode2
000100 9bf2      	sbis GPIOR0, 2
000101 c005      	rjmp kbd_hand
000102 cfef      	rjmp m_draw_dt
                 
                 m_mode2:				
                 ; Режим 2 - здесь обрабатывается таймер
000103 ff75      	sbrs refresh, 5	; бит 5 указывает на необходимость обновления таймера
000104 c002      	rjmp kbd_hand
000105 7d7f      	andi refresh, 0b11011111
000106 d162      	rcall LCD_DrawTimer
                 
                 kbd_hand:
                 ; звук при нажатии на кнопки
000107 2d0d      	mov tmp, kbd_press
000108 6c00      	ori tmp, 0b11000000
000109 3f0f      	cpi tmp, 0xFF
00010a f019      	breq kbd_hcont
00010b e061      	ldi snd_flag, 1 ; устанавливаем номер сэмпла (0) и включаем звук
00010c e090      	ldi snd, 0
00010d e124      	ldi tmp2, 20	; длительность задается так же как и для функций Delay (проиграется только бип)
                 
                 kbd_hcont:
00010e 3030      	cpi mode, 0x00
00010f f579      	brne m_kbd_mode1
                 ; Обработчик кнопок режима 0
000110 fcd3      	sbrc kbd_press, 3
000111 c005      	rjmp nx_b
000112 9a41
000113 0000      	LED_ON
000114 d326      	rcall LCD_IdleOff
000115 e208      	ldi tmp, 40
000116 2e90      	mov led_timer, tmp
                 nx_b:
000117 fcd5      	sbrc kbd_press, 5
000118 c006      	rjmp nx_b1
000119 9533      	inc mode
00011a d4a9      	rcall LCD_Clear
00011b d31f      	rcall LCD_IdleOff
00011c 617f      	ori refresh, 0b00011111
00011d 9a41
00011e 0000      	LED_ON
                 nx_b1:
00011f fcd1      	sbrc kbd_press, 1	; включаем режим таймера
000120 c00d      	rjmp nx_b2
000121 e032      	ldi mode, 0x02
000122 d4a1      	rcall LCD_Clear
000123 e10a      	ldi tmp, 26
000124 2e20      	mov lcd_x, tmp
000125 e005      	ldi tmp, 5
000126 2e30      	mov lcd_y, tmp
000127 e001      	ldi tmp, 1
000128 2e60      	mov lcd_mx, tmp
000129 2e70      	mov lcd_my, tmp
00012a e0fe
00012b ede2      	LAPZ tim_str
00012c d365      	rcall LCD_DrawStringPM
00012d 6270      	ori refresh, 0b00100000
                 nx_b2:
00012e fcd0      	sbrc kbd_press, 0	; изменяем режим отображения
00012f c00e      	rjmp nx_b3
000130 95a3      	inc style
000131 30a3      	cpi style, 3
000132 f409      	brne nx_b2_c
000133 e0a0      	ldi style, 0
                 nx_b2_c:
000134 6073      	ori refresh, 0b00000011
                 	
000135 e202      	ldi tmp, 20+14	; Очищаем область рисования секунд
000136 2e30      	mov lcd_y, tmp
000137 e503      	ldi tmp, 3+(5*16)
000138 2e20      	mov lcd_x, tmp
000139 e002      	ldi tmp, 2
00013a 2e60      	mov lcd_mx, tmp
00013b 2e70      	mov lcd_my, tmp
00013c e200      	ldi tmp, 0x20
00013d d392      	rcall LCD_DrawChar
                 
                 nx_b3:
00013e cf68      	rjmp main
                 m_kbd_mode1:
                 ; Обработчик кнопок режима 1
00013f 3031      	cpi mode, 0x01
000140 f009      	breq m_kbd_mode1_cont
000141 c063      	rjmp m_kbd_mode2
                 m_kbd_mode1_cont:
000142 fcd5      	sbrc kbd_press, 5
000143 c006      	rjmp nx_b_m1
000144 2733      	clr mode
000145 d47e      	rcall LCD_Clear
000146 d2e9      	rcall LCD_IdleOn
000147 617f      	ori refresh, 0b00011111
000148 9841
000149 0000      	LED_OFF
                 nx_b_m1:	; Кнопки 4, 1 (средние слева и справа соответственно) - выбор редактируемой величины
00014a fcd4      	sbrc kbd_press, 4
00014b c006      	rjmp nx_b1_m1
00014c 617f      	ori refresh, 0b00011111
00014d 2388      	tst mode_tmp
00014e f011      	breq m_mdtmp_max_set
00014f 958a      	dec mode_tmp
000150 c001      	rjmp nx_b1_m1
                 m_mdtmp_max_set:
000151 e086      	ldi mode_tmp, 0x06
                 nx_b1_m1:
000152 fcd1      	sbrc kbd_press, 1
000153 c005      	rjmp nx_b2_m1
000154 617f      	ori refresh, 0b00011111
000155 9583      	inc mode_tmp
000156 3087      	cpi mode_tmp, 0x07
000157 f409      	brne nx_b2_m1
000158 2788      	clr mode_tmp
                 nx_b2_m1: ; Кнопки 0, 2 (справа верхняя и нижняя соответственно) - изменение выбранной величины
000159 fed0      	sbrs kbd_press, 0
00015a c003      	rjmp nx_b2_cont
00015b fed2      	sbrs kbd_press, 2
00015c c001      	rjmp nx_b2_cont
00015d c046      	rjmp nx_b3_m1
                 
                 nx_b2_cont:
00015e 617f      	ori refresh, 0b00011111
00015f e0fe
000160 edea      	LAPZ corr_table	; Таблица адресов корректируемых величин (для удобства)
000161 d073      	rcall mt_offset
                 
000162 9105      	lpm tmp, Z+
000163 9114      	lpm tmp1, Z	; tmp1:tmp - адрес редактируемой величины
000164 2ff1      	mov ZH, tmp1
000165 2fe0      	mov ZL, tmp
                 
000166 94f8      	cli	; Отключаем прерывания, т.к. меняем время
000167 fcd0      	sbrc kbd_press, 0	; кнопка 1 - инкремент
000168 c002      	rjmp val_dec
000169 d233      	rcall BCD_Inc	; Увеличиваем значение в памяти 
00016a c002      	rjmp val_check
                 val_dec:
00016b e909      	ldi tmp, 0x99
00016c d206      	rcall BCD_Add	; аналогично BCD_Dec
                 val_check:
00016d 8100      	ld tmp, Z	; в tmp число после модификации
00016e 930f      	push tmp
00016f 3082      	cpi mode_tmp, 0x02
000170 f091      	breq sec_corr
000171 3083      	cpi mode_tmp, 0x03
000172 f0b9      	breq day_corr
000173 3086      	cpi mode_tmp, 0x06
000174 f171      	breq no_corr
                 hr_mn_mo:
                 ; для часов, минут и месяца
000175 910f      	pop tmp
000176 93ff      	push ZH
000177 93ef      	push ZL
000178 e0fe
000179 eee8      	LAPZ corr_max_value
00017a d05a      	rcall mt_offset
00017b 9114      	lpm tmp1, Z	; следующее после максимального значение редактируемого параметра
00017c 91ef      	pop ZL
00017d 91ff      	pop ZH
00017e 1701      	cp tmp, tmp1
00017f f118      	brlo no_corr	; коррекция не нужна
000180 2700      	clr tmp
000181 8300      	st Z, tmp
000182 c020      	rjmp no_corr
                 sec_corr:
                 ; для секунд (тупо в лоб обнуляем)
000183 2700      	clr tmp
000184 8300      	st Z, tmp	; обнуляем число секунд
000185 9731      	sbiw ZL, 0x01
000186 8300      	st Z, tmp	; обнуляем чило десятых долей секунд
000187 d055      	rcall Tmp_to_TCNT2	; сброс счетчика таймера
000188 24aa      	clr sec_part_cnt ; обнуляем счетчик интервала 0.1 сек
000189 c019      	rjmp no_corr
                 day_corr:
                 ; в стеке лежит скорректированное текущее число	
00018a 93ff      	push ZH	; а ZH:ZL указывает на него в оперативной памяти
00018b 93ef      	push ZL
00018c e0f1
00018d e0e5      	LASZ month
00018e 8100      	ld tmp, Z	; месяц
00018f fd04      	sbrc tmp, 4
000190 5006      	subi tmp, 6	; в tmp номер месяца в binary
000191 e0fe
000192 e4e2      	LAPZ month_len
000193 0fe0      	add ZL, tmp
000194 2700      	clr tmp
000195 1ff0      	adc ZH, tmp
000196 9114      	lpm tmp1, Z	; теперь тут число дней в месяце
000197 91ef      	pop ZL
000198 91ff      	pop ZH
000199 910f      	pop tmp	; tmp - текущее число
00019a 3000      	cpi tmp, 0x00
00019b f021      	breq day_cr1
00019c 1701      	cp tmp, tmp1
00019d f028      	brlo no_corr
00019e e001      	ldi tmp, 0x01
00019f c002      	rjmp day_cr2
                 day_cr1:
0001a0 2f01      	mov tmp, tmp1
0001a1 950a      	dec tmp ; Здесь можно и без BCD_Inc, т.к. переполнения не будет
                 day_cr2:
0001a2 8300      	st Z, tmp
                 no_corr:
0001a3 9478      	sei	; Включаем прерывания обратно
                 nx_b3_m1:
0001a4 cf02      	rjmp main
                 
                 m_kbd_mode2:
                 ; Обработчик кнопок режима 2 (таймер)
0001a5 fcd1      	sbrc kbd_press, 1
0001a6 c004      	rjmp nx_b_m2
0001a7 2733      	clr mode
0001a8 d41b      	rcall LCD_Clear
0001a9 d286      	rcall LCD_IdleOn
0001aa 617f      	ori refresh, 0b00011111
                 nx_b_m2:
0001ab fcd3      	sbrc kbd_press, 3
0001ac c005      	rjmp nx_b1_m2
0001ad 9a41
0001ae 0000      	LED_ON
0001af d28b      	rcall LCD_IdleOff
0001b0 e208      	ldi tmp, 40
0001b1 2e90      	mov led_timer, tmp
                 nx_b1_m2:
0001b2 fcd0      	sbrc kbd_press, 0 ; старт/стоп таймера
0001b3 c002      	rjmp nx_b2_m2
0001b4 e400      	ldi tmp, 0b01000000
0001b5 2770      	eor refresh, tmp
                 nx_b2_m2:
0001b6 fcd4      	sbrc kbd_press, 4 ; инкремент минут (только если таймер остановлен)
0001b7 c006      	rjmp nx_b3_m2
0001b8 fd76      	sbrc refresh, 6
0001b9 ceed      	rjmp main
0001ba e0f1
0001bb e0ea      	LASZ timer_min
0001bc d1e0      	rcall BCD_Inc
0001bd 6270      	ori refresh, 0b00100000
                 nx_b3_m2:
0001be fcd5      	sbrc kbd_press, 5 ; декремент минут (тоже только если таймер остановлен)
0001bf c007      	rjmp nx_b4_m2
0001c0 fd76      	sbrc refresh, 6
0001c1 cee5      	rjmp main
0001c2 e0f1
0001c3 e0ea      	LASZ timer_min
0001c4 e909      	ldi tmp, 0x99
0001c5 d1ad      	rcall BCD_Add
0001c6 6270      	ori refresh, 0b00100000
                 nx_b4_m2:
0001c7 fcd2      	sbrc kbd_press, 2 ; инкремент секунд (так же если таймер остановлен)
0001c8 cede      	rjmp main
0001c9 fd76      	sbrc refresh, 6
0001ca cedc      	rjmp main
0001cb e0f1
0001cc e0e9      	LASZ timer_sec
0001cd d1cf      	rcall BCD_Inc
0001ce 8100      	ld tmp, Z
0001cf 3600      	cpi tmp, 0x60
0001d0 f411      	brne b4_m2_end
0001d1 e000      	ldi tmp, 0x00
0001d2 8300      	st Z, tmp
                 b4_m2_end:
0001d3 6270      	ori refresh, 0b00100000
0001d4 ced2      	rjmp main
                 
                 ; для экономии flash расчет смещения для mode_tmp вынесен в отдельную подпрограмму
                 mt_offset:
0001d5 938f      	push mode_tmp
0001d6 0f88      	lsl mode_tmp
0001d7 0fe8      	add ZL, mode_tmp
0001d8 2788      	clr mode_tmp
0001d9 1ff8      	adc ZH, mode_tmp
0001da 918f      	pop mode_tmp
0001db 9508      	ret
                 ;-------- Конец основного цикла
                 
                 INT0r:
                 INT1r:
                 PCINT0r:
                 PCINT1r:
                 PCINT2r:
                 WDT:
                 T2_OVF:
                 T2_COMPB:
                 T1_CAPT:
                 T1_COMPA:
                 T1_COMPB:
                 T1_OVF:
                 T0_COMPA:
                 T0_COMPB:
                 T0_OVF:
                 SPI_STC:
                 USART_RX:
                 USART_UDRE:
                 USART_TX:
                 AnalogDC:
                 EE_RDY:
                 AnalogCMP:
                 TWI:
                 SPM_RDY:
0001dc 9518      	reti
                 
                 Tmp_to_TCNT2:
0001dd 930f      	push tmp
0001de 9300 00b2 	sts TCNT2, tmp
                 wl_tcnt_z:
0001e0 9100 00b6 	lds tmp, ASSR
0001e2 fd04      	sbrc tmp, 4
0001e3 cffc      	rjmp wl_tcnt_z	
0001e4 910f      	pop tmp
0001e5 9508      	ret
                 
                 T2_COMPA:		; обработчик прерывания от таймера
0001e6 930f      	push tmp
0001e7 b70f      	in tmp, SREG
0001e8 930f      	push tmp
0001e9 931f      	push tmp1
                 
0001ea 93ff      	push ZH
0001eb 93ef      	push ZL
0001ec 93df      	push YH
0001ed 93cf      	push YL
                 
0001ee b30e      	in tmp, GPIOR0
0001ef 7003      	andi tmp, 0b00000011
0001f0 bb0e      	out GPIOR0, tmp			; сбрасываем флаги временных событий
                 
0001f1 d048      	rcall KBD_Check ; Скан кнопок
                 	
0001f2 e200      	ldi tmp, TimCntVal
0001f3 94a3      	inc sec_part_cnt
0001f4 16a0      	cp sec_part_cnt, tmp
0001f5 f5c1      	brne t2_end
                 
                 ; Прошла 1/8 секунды
0001f6 9af2      	sbi GPIOR0, 2	; Установили флаг
                 	
0001f7 d111      	rcall Time_Date_Inc	; Инкремент даты-времени
                 t2_snd:
0001f8 2399      	tst snd
0001f9 f009      	breq t2_snd1
0001fa 959a      	dec snd
                 t2_snd1:
0001fb 24aa      	clr sec_part_cnt	; Очистили счетчик
                 ; Корректировка времени (ЦНХ)
                 ; Сравниваем текущее время с данными ЦНХ
0001fc e0ff
0001fd e2e0      	LAPZ w_time_corr
0001fe e0d1      	ldi YH, high(dsecond)
0001ff e0c0      	ldi YL, low(dsecond)
000200 9105      	lpm tmp, Z+
000201 9119      	ld tmp1, Y+
000202 1701      	cp tmp, tmp1	; сравниваем доли секунд
000203 f4b9      	brne t2_no_tcor
000204 9105      	lpm tmp, Z+
000205 9119      	ld tmp1, Y+
000206 1701      	cp tmp, tmp1	; сравниваем секунды	
000207 f499      	brne t2_no_tcor
000208 9105      	lpm tmp, Z+
000209 9119      	ld tmp1, Y+
00020a 1701      	cp tmp, tmp1	; сравниваем минуты
00020b f479      	brne t2_no_tcor
00020c 9104      	lpm tmp, Z
00020d 8118      	ld tmp1, Y
00020e 1701      	cp tmp, tmp1	; сравниваем часы
00020f f459      	brne t2_no_tcor
                 ; Сюда попадаем только если все сравнения дали результат "равно", и коррекция еще не делалась (бит 7 регистра refresh = 0) - это значит надо делать коррекцию
000210 fd77      	sbrc refresh, 7
000211 c008      	rjmp t2_no_tcor_r
000212 9723      	sbiw YL, 3
000213 e000      	ldi tmp, 0x00	; Устанавливаем время 00:00:00.0
000214 9309      	st Y+, tmp
000215 9309      	st Y+, tmp
000216 9309      	st Y+, tmp
000217 8308      	st Y, tmp
000218 6870      	ori refresh, 0b10000000
000219 c001      	rjmp t2_no_tcor
                 t2_no_tcor_r:
00021a 777f      	andi refresh, 0b01111111
                 ; Определяем, в каком режиме работают часы
                 t2_no_tcor:
00021b 3030      	cpi mode, 0x00
00021c f441      	brne tc2_mode1
                 ; Режим 0 - управление подсветкой
00021d 2099      	tst led_timer		; Работа с подсветкой
00021e f079      	breq t2_end
00021f 949a      	dec led_timer
000220 f469      	brne t2_end
000221 9841
000222 0000      	LED_OFF
000223 d20c      	rcall LCD_IdleOn
000224 c009      	rjmp t2_end
                 
                 tc2_mode1:
                 ; Режим 1 - настройка даты, времени, корректировок
000225 3031      	cpi mode, 0x01
000226 f409      	brne tc2_mode2
                 
000227 c006      	rjmp t2_end
                 
                 tc2_mode2:
                 ; Режим 2 - таймер
000228 2099      	tst led_timer	; подсветка
000229 f021      	breq t2_end
00022a 949a      	dec led_timer
00022b f411      	brne t2_end
00022c 9841
00022d 0000      	LED_OFF
                 
                 t2_end:
00022e 2322      	tst tmp2
00022f f009      	breq t2_out1
000230 952a      	dec tmp2
                 t2_out1:
000231 91cf      	pop YL
000232 91df      	pop YH
000233 91ef      	pop ZL
000234 91ff      	pop ZH
                 
000235 911f      	pop tmp1
000236 910f      	pop tmp
000237 bf0f      	out SREG, tmp
000238 910f      	pop tmp
000239 9518      	reti
                 
                 ;-------- Подпрограммы
                 KBD_Check:
00023a 930f      	push tmp
00023b 9bf1      	sbis GPIOR0, 1
00023c c00c      	rjmp row0_active
                 ; row1 active
00023d b109      	in tmp, PIND
00023e 7700      	andi tmp, 0b01110000
00023f 9506      	lsr tmp
000240 2a80      	or kbd, tmp
000241 6c07      	ori tmp, 0b11000111
000242 2280      	and kbd, tmp
000243 9a5a      	sbi PORTD, 2
000244 0000      	nop
000245 985b      	cbi PORTD, 3
000246 0000      	nop
000247 98f1      	cbi GPIOR0, 1
000248 c00e      	rjmp kbd_end
                 row0_active:
000249 b109      	in tmp, PIND
00024a 7700      	andi tmp, 0b01110000
00024b 9506      	lsr tmp
00024c 9506      	lsr tmp
00024d 9506      	lsr tmp
00024e 9506      	lsr tmp
00024f 2a80      	or kbd, tmp
000250 6f08      	ori tmp, 0b11111000
000251 2280      	and kbd, tmp
000252 9a5b      	sbi PORTD, 3
000253 0000      	nop
000254 985a      	cbi PORTD, 2
000255 0000      	nop
000256 9af1      	sbi GPIOR0, 1
                 kbd_end:
000257 e30f      	ldi tmp, 0b00111111
000258 2280      	and kbd, tmp
000259 1680      	cp kbd, tmp
00025a f411      	brne kbd_ret
00025b e800      	ldi tmp, 0x80
00025c 2a80      	or kbd,tmp	; установлен флаг нажатия (для удобства)
                 kbd_ret:
                 ; Здесь формируем kbd_press и kbd_release
00025d 2d08      	mov tmp, kbd
00025e 250c      	eor tmp, kbd_prev	; tmp - содержит 1-цы если кнопка поменяла свое состояние
00025f 6c00      	ori tmp, 0b11000000	; лишнее отсекаем
000260 2cdc      	mov kbd_press, kbd_prev	; здесь 0 если кнопка нажата в прошлом такте
000261 2ce8      	mov kbd_release, kbd	; здесь 0 если кнопка нажата в этом такте
000262 22d0      	and kbd_press, tmp ; если кнопка поменяла свое значение и она нажата в этом такте, то в нужном бите будет 1 (кнопка нажата)
000263 22e0      	and kbd_release, tmp ; если кнопка была нажата в прошлом такте, но поменяла свое значение, то в нужном бите будет 1 (кнопка отпущена)
000264 94d0      	com kbd_press
000265 94e0      	com kbd_release
000266 2cc8      	mov kbd_prev, kbd	; настоящее значение теперь предыдущее
                 
000267 910f      	pop tmp
000268 9508      	ret
                 ;----------------------
                 LCD_DrawTimer:
000269 93ff      	push ZH
00026a 93ef      	push ZL
00026b 930f      	push tmp
00026c 931f      	push tmp1
                 
00026d e002      	ldi tmp, 0x02
00026e 2e60      	mov lcd_mx, tmp
00026f e002      	ldi tmp, 0x02
000270 2e70      	mov lcd_my, tmp
000271 e00a      	ldi tmp, 10
000272 2e20      	mov lcd_x, tmp
000273 e104      	ldi tmp, 20
000274 2e30      	mov lcd_y, tmp
000275 e110      	ldi tmp1, 16
                 	
000276 e0f1
000277 e0ea      	LASZ timer_min
000278 8100      	ld tmp, Z
000279 d1e7      	rcall LCD_DrawBCD7
00027a 927f      	push lcd_my
00027b e004      	ldi tmp, 0x04
00027c 2e70      	mov lcd_my, tmp
00027d e30a      	ldi tmp, ':'
00027e d251      	rcall LCD_DrawChar
00027f 907f      	pop lcd_my
000280 0e21      	add lcd_x, tmp1
000281 9731      	sbiw ZL, 0x01
000282 8100      	ld tmp, Z
000283 d1dd      	rcall LCD_DrawBCD7
                 
000284 911f      	pop tmp1
000285 910f      	pop tmp
000286 91ef      	pop ZL
000287 91ff      	pop ZH
000288 9508      	ret
                 ;----------------------
                 LCD_DrawBattery:
000289 e504      	ldi tmp, 84
00028a 2e20      	mov lcd_x, tmp
00028b e404      	ldi tmp, 68
00028c 2e30      	mov lcd_y, tmp
00028d e001      	ldi tmp, 0x01
00028e 2e60      	mov lcd_mx, tmp
00028f 2e70      	mov lcd_my, tmp
000290 ec01      	ldi tmp, 0b11000001
000291 9300 007a 	sts ADCSRA, tmp
                 vbat_mw:
000293 9100 007a 	lds tmp, ADCSRA
000295 ff04      	sbrs tmp, ADIF
000296 cffc      	rjmp vbat_mw
000297 e904      	ldi tmp, 0b10010100
000298 9300 007a 	sts ADCSRA, tmp
00029a 9100 0079 	lds tmp, ADCH
                 	
00029c 340b      	cpi tmp, 0x4B
00029d f410      	brsh vbat_nx1
00029e e20e      	ldi tmp, 0x2E	; Full
00029f c009      	rjmp vbat_ex
                 vbat_nx1:
0002a0 3500      	cpi tmp, 0x50
0002a1 f410      	brsh vbat_nx2
0002a2 e20d      	ldi tmp, 0x2D	; 60%
0002a3 c005      	rjmp vbat_ex
                 vbat_nx2:
0002a4 350a      	cpi tmp, 0x5A
0002a5 f410      	brsh vbat_nx3
0002a6 e20c      	ldi tmp, 0x2C	; 30%
0002a7 c001      	rjmp vbat_ex
                 vbat_nx3:
0002a8 e20b      	ldi tmp, 0x2B
                 vbat_ex:
0002a9 d226      	rcall LCD_DrawChar
0002aa 9508      	ret
                 ;----------------------
                 LCD_DrawTime:
0002ab 93ff      	push ZH
0002ac 93ef      	push ZL
0002ad 930f      	push tmp
0002ae 931f      	push tmp1
                 
0002af e002      	ldi tmp, 2
0002b0 2e60      	mov lcd_mx, tmp
0002b1 30a1      	cpi style, 1
0002b2 f411      	brne drt1
0002b3 e002      	ldi tmp, 2
0002b4 c001      	rjmp drt2
                 drt1:
0002b5 e004      	ldi tmp, 4
                 drt2:
0002b6 2e70      	mov lcd_my, tmp
0002b7 ef1f      	ldi tmp1, 0xFF
                 
0002b8 ff71      	sbrs refresh, 1
0002b9 c019      	rjmp drw_clk_minute_skip
0002ba 7f7d      	andi refresh, 0b11111101
0002bb e0f1
0002bc e0e3      	LASZ hour	; рисуем часы
0002bd 8100      	ld tmp, Z
                 	
0002be 924f      	push bkg_color
0002bf 925f      	push frg_color
0002c0 3031      	cpi mode, 0x01
0002c1 f419      	brne drw_clk_hrd
0002c2 3080      	cpi mode_tmp, 0x00
0002c3 f409      	brne drw_clk_hrd
0002c4 d166      	rcall Exch_bkg_frg
                 drw_clk_hrd:
0002c5 30a1      	cpi style, 1
0002c6 f411      	brne drt3
0002c7 d199      	rcall LCD_DrawBCD7
0002c8 c001      	rjmp drt4
                 drt3:
0002c9 d17c      	rcall LCD_DrawBCD
                 drt4:
0002ca 905f      	pop frg_color
0002cb 904f      	pop bkg_color
0002cc fda0      	sbrc style, 0
0002cd 0c77      	lsl lcd_my
0002ce e30a      	ldi tmp,':'
0002cf d200      	rcall LCD_DrawChar
0002d0 fda0      	sbrc style, 0
0002d1 9476      	lsr lcd_my
0002d2 c002      	rjmp drw_clk_minute
                 drw_clk_minute_skip:
0002d3 e200      	ldi tmp, 32
0002d4 0e20      	add lcd_x, tmp
                 drw_clk_minute:
0002d5 ff70      	sbrs refresh, 0
0002d6 c015      	rjmp drw_clk_sec_skip
0002d7 7f7e      	andi refresh, 0b11111110
0002d8 e100      	ldi tmp, 16
0002d9 0e20      	add lcd_x, tmp
0002da e0f1
0002db e0e2      	LASZ minute
0002dc 8100      	ld tmp, Z
0002dd 924f      	push bkg_color
0002de 925f      	push frg_color
0002df 3031      	cpi mode, 0x01
0002e0 f419      	brne drw_clk_mnd
0002e1 3081      	cpi mode_tmp, 0x01
0002e2 f409      	brne drw_clk_mnd
0002e3 d147      	rcall Exch_bkg_frg
                 drw_clk_mnd:
0002e4 30a1      	cpi style, 1
0002e5 f411      	brne drt5
0002e6 d17a      	rcall LCD_DrawBCD7
0002e7 c001      	rjmp drt6
                 drt5:
0002e8 d15d      	rcall LCD_DrawBCD
                 drt6:
0002e9 905f      	pop frg_color
0002ea 904f      	pop bkg_color
0002eb c002      	rjmp drw_clk_sec
                 drw_clk_sec_skip:
0002ec e300      	ldi tmp, 32+16
0002ed 0e20      	add lcd_x, tmp
                 drw_clk_sec:	; рисуем секунды
0002ee e001      	ldi tmp, 1
0002ef 2e60      	mov lcd_mx, tmp
0002f0 2e70      	mov lcd_my, tmp
0002f1 e00e      	ldi tmp, 14
0002f2 0e30      	add lcd_y, tmp
                 
0002f3 e0f1
0002f4 e0e1      	LASZ second
0002f5 8100      	ld tmp, Z
0002f6 924f      	push bkg_color
0002f7 925f      	push frg_color
0002f8 3031      	cpi mode, 0x01
0002f9 f419      	brne drw_clk_sed
0002fa 3082      	cpi mode_tmp, 0x02
0002fb f409      	brne drw_clk_sed
0002fc d12e      	rcall Exch_bkg_frg
                 drw_clk_sed:
0002fd 30a1      	cpi style, 1
0002fe f411      	brne drt7
0002ff d161      	rcall LCD_DrawBCD7
000300 c001      	rjmp drt8
                 drt7:
000301 d144      	rcall LCD_DrawBCD
                 drt8:
000302 905f      	pop frg_color
000303 904f      	pop bkg_color
                 
000304 911f      	pop tmp1
000305 910f      	pop tmp
000306 91ef      	pop ZL
000307 91ff      	pop ZH
000308 9508      	ret
                 ;---------------------
                 Time_Date_Inc:
000309 93ff      	push ZH
00030a 93ef      	push ZL
00030b 930f      	push tmp
                 
00030c e0f1      	ldi ZH, high(dsecond)
00030d e0e0      	ldi ZL, low(dsecond)
00030e d08e      	rcall BCD_Inc	; доли секунды (задаются константой sec_part)
00030f 8100      	ld tmp, Z
000310 3008      	cpi tmp, sec_part
000311 f009      	breq tdi_cnt1
000312 c05c      	rjmp tdi_end
                 tdi_cnt1:
                 
                 ; делаем задержку на 1 такт таймера TC2 (поправка, т.к. по всем "прикидкам" система считает 32767 тактов в секунду вместо 32768)
                 ; Не энергоэффективно, т.к. в этом куске кода процессор "тупо" ждет пока таймер отсчитает 3 такта
                 ; можно ускорить процесс исключив ожидание вначале появления в регистре счетчика 0х01, и записывая при этом в регистр таймера уже значение 0х01 вместо
                 ; 0х02
                 
                 tdi_fix_w:
000313 9100 00b2 	lds tmp, TCNT2
000315 3001      	cpi tmp, 0x01
000316 f3e0      	brlo tdi_fix_w
000317 e002      	ldi tmp, 0x02	; записываем в счетчик 0х02, (выполнение кода-поправки займет 3 такта таймера, мы же записали сюда 2, таким образом сделав задержку на такт)
000318 9300 00b2 	sts TCNT2, tmp
                 tdi_fix_w1:
00031a 9100 00b6 	lds tmp, ASSR
00031c fd04      	sbrc tmp, TCN2UB
00031d cffc      	rjmp tdi_fix_w1
                 ; ---
                 
00031e 2700      	clr tmp
00031f 9af3      	sbi GPIOR0, 3
000320 9301      	st Z+, tmp		
000321 d07b      	rcall BCD_Inc	; секунды
000322 8100      	ld tmp, Z
000323 3600      	cpi tmp, 0x60
000324 f009      	breq tdi_cnt2
000325 c049      	rjmp tdi_end
                 tdi_cnt2:
000326 2700      	clr tmp
000327 9af4      	sbi GPIOR0, 4
000328 6071      	ori refresh, 0b00000001
000329 9301      	st Z+, tmp
00032a d072      	rcall BCD_Inc ; минуты
00032b 8100      	ld tmp, Z
00032c 3600      	cpi tmp, 0x60
00032d f009      	breq tdi_cnt3
00032e c040      	rjmp tdi_end
                 tdi_cnt3:
00032f 2700      	clr tmp
000330 9af5      	sbi GPIOR0, 5
000331 6072      	ori refresh, 0b00000010
000332 9301      	st Z+, tmp
000333 d069      	rcall BCD_Inc ; часы
000334 8100      	ld tmp, Z
000335 3204      	cpi tmp, 0x24
000336 f5c1      	brne tdi_end
000337 2700      	clr tmp
000338 9af6      	sbi GPIOR0, 6
000339 6074      	ori refresh, 0b00000100
00033a 9301      	st Z+, tmp
                 	
00033b 93ff      	push ZH	; дни недели
00033c 93ef      	push ZL
00033d e0f1      	ldi ZH, high(day_of_week)
00033e e0e8      	ldi ZL, low(day_of_week)
00033f 8100      	ld tmp, Z
000340 9503      	inc tmp
000341 3007      	cpi tmp, 0x07
000342 f409      	brne tdi_cnt
000343 2700      	clr tmp
                 tdi_cnt:
000344 8300      	st Z, tmp
000345 91ef      	pop ZL
000346 91ff      	pop ZH
                 
000347 d055      	rcall BCD_Inc ; дни
000348 8100      	ld tmp, Z
                 ; получаем число дней в месяце в регистр tmp1
000349 931f      	push tmp1
00034a 93ff      	push ZH
00034b 93ef      	push ZL
00034c 930f      	push tmp
00034d e0f1      	ldi ZH, high(month)
00034e e0e5      	ldi ZL, low(month)
00034f 8100      	ld tmp, Z	; в tmp - номер месяца в формате BCD
000350 fd04      	sbrc tmp, 4
000351 5006      	subi tmp, 6	; в tmp номер месяца в binary
000352 950a      	dec tmp
000353 e0fe      	ldi ZH, high(month_len<<1)
000354 e4e2      	ldi ZL, low(month_len<<1)
000355 0fe0      	add ZL, tmp
000356 e000      	ldi tmp, 0x00
000357 1ff0      	adc ZH, tmp
000358 9114      	lpm tmp1, Z
000359 910f      	pop tmp
00035a 91ef      	pop ZL
00035b 91ff      	pop ZH
00035c 1701      	cp tmp, tmp1
00035d 911f      	pop tmp1
00035e f481      	brne tdi_end
00035f e001      	ldi tmp, 0x01
000360 9af7      	sbi GPIOR0, 7
000361 6078      	ori refresh, 0b00001000
000362 9301      	st Z+, tmp
000363 d039      	rcall BCD_Inc ; месяцы
000364 8100      	ld tmp, Z
000365 3103      	cpi tmp, 0x13
000366 f441      	brne tdi_end
000367 6170      	ori refresh, 0b00010000
000368 e001      	ldi tmp, 0x01
000369 9301      	st Z+, tmp
00036a d032      	rcall BCD_Inc ; годы
00036b 9bf0      	sbis GPIOR0, 0
00036c c002      	rjmp tdi_end
00036d 9631      	adiw ZL, 0x01
00036e d02e      	rcall BCD_Inc
                 tdi_end:
00036f 910f      	pop tmp
000370 91ef      	pop ZL
000371 91ff      	pop ZH
000372 9508      	ret
                 ;----------------------
                 BCD_Add:
                 ; in: Z - указывает на BCD число в памяти
                 ;     tmp - второе слагаемое (BCD)
                 ; out: число по адресу Z
                 ; GPIOR0(bit0) - BCD carry
                 	
000373 931f      	push tmp1
000374 930f      	push tmp
000375 934f      	push r20
                 
000376 98f0      	cbi GPIOR0, 0
000377 8110      	ld tmp1, Z
000378 0f10      	add tmp1, tmp
000379 b74f      	in r20, SREG
00037a f02d      	brhs lsd_correct
00037b 931f      	push tmp1
00037c 701f      	andi tmp1, 0x0F
00037d 301a      	cpi tmp1, 0x0A
00037e 911f      	pop tmp1
00037f f040      	brlo msd
                 lsd_correct:
000380 931f      	push tmp1
000381 7f10      	andi tmp1, 0xF0
000382 3a10      	cpi tmp1, 0xA0
000383 911f      	pop tmp1
000384 f008      	brlo only_lsd_correct
000385 c00e      	rjmp correct_both
                 only_lsd_correct:
000386 e006      	ldi tmp, 0x06
000387 0f10      	add tmp1, tmp
                 msd:
000388 fd40      	sbrc r20, 0
000389 c005      	rjmp msd_correct
00038a 931f      	push tmp1
00038b 7f10      	andi tmp1, 0xF0
00038c 3a10      	cpi tmp1, 0xA0
00038d 911f      	pop tmp1
00038e f048      	brlo bcd_end
                 msd_correct:
00038f e600      	ldi tmp, 0x60
000390 0f10      	add tmp1, tmp
000391 f430      	brcc bcd_end
000392 9af0      	sbi GPIOR0, 0 
000393 c004      	rjmp bcd_end
                 correct_both:
000394 e606      	ldi tmp, 0x66	; correct both
000395 0f10      	add tmp1, tmp
000396 f408      	brcc bcd_end
000397 9af0      	sbi GPIOR0, 0 
                 bcd_end:
000398 8310      	st Z, tmp1
                 
000399 914f      	pop r20
00039a 910f      	pop tmp
00039b 911f      	pop tmp1	
00039c 9508      	ret
                 ;-------------------
                 BCD_Inc:
                 ; in: Z - указывает на BCD число в памяти
                 ; out: число по адресу Z
00039d 930f      	push tmp
00039e e001      	ldi tmp, 0x01
00039f dfd3      	rcall BCD_Add
0003a0 910f      	pop tmp
0003a1 9508      	ret
                 ;-------------------
                 Send_SPI:
                 SPI_Send:
0003a2 930f      	push tmp
0003a3 bd0e      	out SPDR, tmp
                 spi_wait:
0003a4 b50d      	in tmp, SPSR
0003a5 ff07      	sbrs tmp, SPIF
0003a6 cffd      	rjmp spi_wait
0003a7 910f      	pop tmp
0003a8 9508      	ret	
                 ;--------------------
                 delay_10us:
0003a9 930f      	push tmp
0003aa e108      	ldi tmp, 24
                 delay_loop:
0003ab 950a      	dec tmp
0003ac f7f1      	brne delay_loop
0003ad 910f      	pop tmp
0003ae 9508      	ret
                 ;--------------------
                 delay_100ms:
0003af e120      	ldi tmp2, 16
                 d100_w:
0003b0 3020      	cpi tmp2, 0x00
0003b1 f7f1      	brne d100_w
0003b2 9508      	ret
                 ;--------------------
                 delay_10ms:
0003b3 e022      	ldi tmp2, 2
                 d10_w:
0003b4 3020      	cpi tmp2, 0x00
0003b5 f7f1      	brne d10_w
0003b6 9508      	ret
                 ;--------------------
                 LCD_DrawDate:
0003b7 93ff      	push ZH
0003b8 93ef      	push ZL
0003b9 930f      	push tmp
0003ba 931f      	push tmp1
0003bb 93af      	push style
0003bc e0a0      	ldi style, 0
                 
0003bd ef1f      	ldi tmp1, 0xFF
                 
0003be e001      	ldi tmp, 1
0003bf 2e60      	mov lcd_mx, tmp
0003c0 2e70      	mov lcd_my, tmp
                 
0003c1 e005      	ldi tmp, 0x05
0003c2 2e30      	mov lcd_y, tmp
                 
0003c3 e0f1
0003c4 e0e4      	LASZ day
                 
0003c5 ff72      	sbrs refresh, 2
0003c6 c04d      	rjmp drw_dat_end	; если не надо обновить день, то и "автоматом" не надо обновить год, месяц и день недели
                 
0003c7 7f7b      	andi refresh, 0b11111011
0003c8 2e20      	mov lcd_x, tmp ; риусем число
0003c9 8100      	ld tmp, Z
                 
0003ca 924f      	push bkg_color
0003cb 925f      	push frg_color
0003cc 3031      	cpi mode, 0x01
0003cd f419      	brne drw_dat_day
0003ce 3083      	cpi mode_tmp, 0x03
0003cf f409      	brne drw_dat_day
0003d0 d05a      	rcall Exch_bkg_frg
                 drw_dat_day:
0003d1 d074      	rcall LCD_DrawBCD
0003d2 905f      	pop frg_color
0003d3 904f      	pop bkg_color
                 
0003d4 924f      	push bkg_color
0003d5 925f      	push frg_color
0003d6 3031      	cpi mode, 0x01
0003d7 f419      	brne drw_dat_dayw
0003d8 3084      	cpi mode_tmp, 0x04
0003d9 f409      	brne drw_dat_dayw
0003da d050      	rcall Exch_bkg_frg
                 drw_dat_dayw:
0003db d03e      	rcall LCD_DrawDayOfWeek
0003dc 905f      	pop frg_color
0003dd 904f      	pop bkg_color
                 
0003de e005      	ldi tmp, 0x05
0003df 2e30      	mov lcd_y, tmp
0003e0 e0f1
0003e1 e0e4      	LASZ day
                 
0003e2 ff73      	sbrs refresh, 3
0003e3 c030      	rjmp drw_dat_end
                 
0003e4 7f77      	andi refresh, 0b11110111
0003e5 e10d      	ldi tmp, 0x05+(0x08*3)
0003e6 2e20      	mov lcd_x, tmp
                 
0003e7 9631      	adiw ZL, 0x01
0003e8 9101      	ld tmp, Z+
0003e9 fd04      	sbrc tmp, 4
0003ea 5006      	subi tmp, 6	; в tmp номер месяца в binary
0003eb 0f00      	lsl tmp
0003ec 0f00      	lsl tmp
0003ed 93ff      	push ZH
0003ee 93ef      	push ZL
0003ef e0fe
0003f0 e4ee      	LAPZ month_names
0003f1 0fe0      	add ZL, tmp
0003f2 e000      	ldi tmp, 0x00
0003f3 1ff0      	adc ZH, tmp	; Z указывает на название месяца
                 
0003f4 924f      	push bkg_color
0003f5 925f      	push frg_color
0003f6 3031      	cpi mode, 0x01
0003f7 f419      	brne drw_dat_mon
0003f8 3085      	cpi mode_tmp, 0x05
0003f9 f409      	brne drw_dat_mon
0003fa d030      	rcall Exch_bkg_frg
                 drw_dat_mon:
0003fb d096      	rcall LCD_DrawStringPM
0003fc 905f      	pop frg_color
0003fd 904f      	pop bkg_color
0003fe 91ef      	pop ZL
0003ff 91ff      	pop ZH
                 
000400 ff74      	sbrs refresh, 4
000401 c012      	rjmp drw_dat_end
                 
000402 7e7f      	andi refresh, 0b11101111
000403 e30d      	ldi tmp, 0x05+(0x08*7)
000404 2e20      	mov lcd_x, tmp
000405 9631      	adiw ZL, 0x01
000406 8100      	ld tmp, Z
000407 924f      	push bkg_color
000408 925f      	push frg_color
000409 3031      	cpi mode, 0x01
00040a f419      	brne drw_dat_year
00040b 3086      	cpi mode_tmp, 0x06
00040c f409      	brne drw_dat_year
00040d d01d      	rcall Exch_bkg_frg
                 drw_dat_year:
00040e d037      	rcall LCD_DrawBCD
00040f 9731      	sbiw ZL, 0x01
000410 8100      	ld tmp, Z
000411 d034      	rcall LCD_DrawBCD
000412 905f      	pop frg_color
000413 904f      	pop bkg_color
                 drw_dat_end:
000414 91af      	pop style
000415 911f      	pop tmp1
000416 910f      	pop tmp
000417 91ef      	pop ZL
000418 91ff      	pop ZH
000419 9508      	ret
                 ;--------------------
                 LCD_DrawDayOfWeek:
00041a 931f      	push tmp1
00041b e0f1
00041c e0e8      	LASZ day_of_week 	; Рисуем день недели
00041d 8100      	ld tmp, Z
                 
00041e e016      	ldi tmp1, 6
00041f 2e21      	mov lcd_x, tmp1
000420 e31c      	ldi tmp1, 60
000421 2e31      	mov lcd_y, tmp1
                 
000422 e0fe
000423 e7ee      	LAPZ week_day_names
000424 e01c      	ldi tmp1, 12
000425 9f01      	mul tmp, tmp1
000426 0de0      	add ZL, r0
000427 1df1      	adc ZH, r1
000428 d069      	rcall LCD_DrawStringPM
000429 911f      	pop tmp1
00042a 9508      	ret
                 ;--------------------
                 .include "Sie_c60.inc"	; Siemens C60 routines
                 
                 
                 ;--------------------
                 Exch_bkg_frg:
00042b 924f      	push bkg_color
00042c 925f      	push frg_color
00042d 904f      	pop bkg_color
00042e 905f      	pop frg_color
00042f 9508      	ret	
                 ;--------------------
                 LCD_IdleOn:
000430 930f      	push tmp
000431 9829
000432 0000      	CS_LOW
000433 9828
000434 0000      	CMD_SET
000435 e309      	ldi tmp, 0x39
000436 df6b      	rcall Send_SPI
000437 9a29
000438 0000      	CS_HIGH
000439 910f      	pop tmp
00043a 9508      	ret
                 ;--------------------
                 LCD_IdleOff:
00043b 930f      	push tmp
00043c 9829
00043d 0000      	CS_LOW
00043e 9828
00043f 0000      	CMD_SET
000440 e308      	ldi tmp, 0x38
000441 df60      	rcall Send_SPI
000442 9a29
000443 0000      	CS_HIGH
000444 910f      	pop tmp
000445 9508      	ret
                 ;--------------------
                 LCD_DrawBCD:
                 ;in: tmp - число
000446 930f      	push tmp
000447 934f      	push r20
000448 931f      	push tmp1
                 
000449 30a0      	cpi style, 0
00044a f411      	brne dr_bcd1
00044b e310      	ldi tmp1, 0x30
00044c c001      	rjmp dr_bcd2
                 dr_bcd1:
00044d e611      	ldi tmp1, 0x61
                 dr_bcd2:
00044e 2d46      	mov r20, lcd_mx
00044f 0f44      	lsl r20
000450 0f44      	lsl r20
000451 0f44      	lsl r20
                 
000452 930f      	push tmp
000453 9502      	swap tmp
000454 700f      	andi tmp, 0x0F
000455 0f01      	add tmp, tmp1 ; +0x30
000456 d079      	rcall LCD_DrawChar
000457 0e24      	add lcd_x, r20
000458 910f      	pop tmp
000459 700f      	andi tmp, 0x0F
00045a 0f01      	add tmp, tmp1
00045b d074      	rcall LCD_DrawChar
00045c 0e24      	add lcd_x, r20
                 
00045d 911f      	pop tmp1
00045e 914f      	pop r20
00045f 910f      	pop tmp
000460 9508      	ret
                 ;--------------------
                 LCD_DrawBCD7:	; рисует BCD число в стиле 7-ми сегментного индикатора
                 ; tmp - число
000461 930f      	push tmp
000462 934f      	push r20
000463 931f      	push tmp1
000464 93ef      	push ZL
000465 93ff      	push ZH
                 
000466 2d46      	mov r20, lcd_mx
000467 0f44      	lsl r20
000468 0f44      	lsl r20
000469 0f44      	lsl r20
                 
00046a e017      	ldi tmp1, 7
00046b 9d17      	mul tmp1, lcd_my
00046c 2d10      	mov tmp1, r0
                 
00046d e0fb
00046e ecea      	LAPZ seg7_dig
                 
00046f 930f      	push tmp
000470 9502      	swap tmp
000471 700f      	andi tmp, 0x0F
000472 0f00      	lsl tmp
000473 0fe0      	add ZL, tmp
000474 2700      	clr tmp
000475 1ff0      	adc ZH, tmp
000476 9105      	lpm tmp, Z+
000477 d058      	rcall LCD_DrawChar
000478 0e31      	add lcd_y, tmp1
000479 9104      	lpm tmp, Z
00047a d055      	rcall LCD_DrawChar
00047b 910f      	pop tmp
00047c 0e24      	add lcd_x, r20
00047d 1a31      	sub lcd_y, tmp1
00047e 700f      	andi tmp, 0x0F
00047f 0f00      	lsl tmp
000480 e0fb
000481 ecea      	LAPZ seg7_dig
000482 0fe0      	add ZL, tmp
000483 2700      	clr tmp
000484 1ff0      	adc ZH, tmp
000485 9105      	lpm tmp, Z+
000486 d049      	rcall LCD_DrawChar
000487 0e31      	add lcd_y, tmp1
000488 9104      	lpm tmp, Z
000489 d046      	rcall LCD_DrawChar
00048a 0e24      	add lcd_x, r20
00048b 1a31      	sub lcd_y, tmp1
                 		
00048c 91ff      	pop ZH
00048d 91ef      	pop ZL
00048e 911f      	pop tmp1
00048f 914f      	pop r20
000490 910f      	pop tmp
000491 9508      	ret
                 ;--------------------
                 LCD_DrawStringPM:
                 ; in: Z - строка во flash ASCIIZ
000492 930f      	push tmp
000493 93ff      	push ZH
000494 93ef      	push ZL
000495 934f      	push r20
                 
000496 2d46      	mov r20, lcd_mx ; инкремент по X
000497 0f44      	lsl r20
000498 0f44      	lsl r20
000499 0f44      	lsl r20
                 drst:
00049a 9105      	lpm tmp, Z+
00049b 2300      	tst tmp
00049c f051      	breq drst_end
00049d 330a      	cpi tmp, 0x3A
00049e f028      	brlo dr_ansi
00049f 3c00      	cpi tmp, 'А'
0004a0 f010      	brlo dr_a_f
0004a1 570f      	subi tmp, ('А'-0x41)	; Перевод из Win-1251 в CP866 для заглавных букв (а других русских и нет тут :-)
0004a2 c001      	rjmp dr_ansi
                 dr_a_f:
0004a3 5006      	subi tmp, ('A'-0x3B)
                 dr_ansi:
0004a4 d02b      	rcall LCD_DrawChar
0004a5 0e24      	add lcd_x, r20
0004a6 cff3      	rjmp drst
                 drst_end:
0004a7 914f      	pop r20
0004a8 91ef      	pop ZL
0004a9 91ff      	pop ZH
0004aa 910f      	pop tmp
0004ab 9508      	ret
                 ;--------------------
                 LCD_DrawByte:
                 ; in: tmp - байт
0004ac 930f      	push tmp
0004ad 934f      	push r20
                 
0004ae 2d46      	mov r20, lcd_mx
0004af 0f44      	lsl r20
0004b0 0f44      	lsl r20
0004b1 0f44      	lsl r20
                 
0004b2 930f      	push tmp
0004b3 9502      	swap tmp
0004b4 700f      	andi tmp, 0x0F
0004b5 300a      	cpi tmp, 0x0A
0004b6 f018      	brlo dr_b09
0004b7 5c0f      	subi tmp, (0x100 - 0x3B + 0x0A)
0004b8 d017      	rcall LCD_DrawChar
0004b9 c002      	rjmp dr_b_lnibble
                 dr_b09:
0004ba 5d00      	subi tmp, 0xD0
0004bb d014      	rcall LCD_DrawChar
                 dr_b_lnibble:
0004bc 0e24      	add lcd_x, r20
0004bd 910f      	pop tmp
0004be 700f      	andi tmp, 0x0F
0004bf 300a      	cpi tmp, 0x0A
0004c0 f018      	brlo dr_b09_1
0004c1 5c0f      	subi tmp, (0x100 - 0x3B + 0x0A)
0004c2 d00d      	rcall LCD_DrawChar
0004c3 c002      	rjmp dr_b_end
                 dr_b09_1:
0004c4 5d00      	subi tmp, 0xD0
0004c5 d00a      	rcall LCD_DrawChar
                 dr_b_end:
0004c6 0e24      	add lcd_x, r20
0004c7 914f      	pop r20
0004c8 910f      	pop tmp
0004c9 9508      	ret
                 ;--------------------
                 LCD_DrawWord:
                 ; tmp:tmp1 - слово
0004ca 930f      	push tmp
                 
0004cb dfe0      	rcall LCD_DrawByte
0004cc 2f01      	mov tmp, tmp1
0004cd dfde      	rcall LCD_DrawByte
                 
0004ce 910f      	pop tmp
0004cf 9508      	ret
                 ;--------------------
                 LCD_DrawChar:
                 ; in: tmp - ASCII код символа
                 ;	lcd_x, lcd_y - координаты
                 ; lcd_mx - масштаб по x
                 ; lcd_my - масштаб по y
                 
                 ;	cpi tmp, 0x20
                 ;	brlo drw_chr_end
                 	
0004d0 930f      	push tmp
0004d1 931f      	push tmp1
0004d2 93ff      	push ZH
0004d3 93ef      	push ZL
0004d4 922f      	push lcd_x
0004d5 923f      	push lcd_y
0004d6 934f      	push r20	; индекс по y
0004d7 935f      	push r21	; индекс по x
                 	
0004d8 e0fb
0004d9 eeea      	LAPZ font8x8
0004da 5200      	subi tmp, 0x20
0004db 2711      	clr tmp1 ; tmp1:tmp * 8
0004dc 1f00      	rol tmp
0004dd 1f11      	rol tmp1
0004de 1f00      	rol tmp
0004df 1f11      	rol tmp1
0004e0 1f00      	rol tmp
0004e1 1f11      	rol tmp1 ; tmp1:tmp - смещение
0004e2 0fe0      	add ZL, tmp
0004e3 1ff1      	adc ZH, tmp1
                 
0004e4 e048      	ldi r20, 0x08
0004e5 9829
0004e6 0000      	CS_LOW
                 cdrw:
0004e7 9115      	lpm tmp1, Z+
0004e8 927f      	push lcd_my
                 mydrw:
0004e9 d027      	rcall LCD_GotoXY
0004ea 9828
0004eb 0000      	CMD_SET
0004ec e20c      	ldi tmp, 0x2C
0004ed deb4      	rcall Send_SPI
0004ee 9a28
0004ef 0000      	DATA_SET
0004f0 e058      	ldi r21, 0x08
0004f1 931f      	push tmp1
                 ldrw:
0004f2 ff17      	sbrs tmp1, 7
0004f3 c002      	rjmp drw_bkg
0004f4 2d05      	mov tmp, frg_color
0004f5 c001      	rjmp drw
                 drw_bkg:
0004f6 2d04      	mov tmp, bkg_color
                 drw:
0004f7 926f      	push lcd_mx
                 mxdrw:
0004f8 dea9      	rcall Send_SPI
0004f9 946a      	dec lcd_mx
0004fa f7e9      	brne mxdrw
0004fb 906f      	pop lcd_mx
                 
0004fc 0f11      	lsl tmp1
0004fd 955a      	dec r21
0004fe f799      	brne ldrw
0004ff 911f      	pop tmp1
000500 9433      	inc lcd_y
000501 947a      	dec lcd_my
000502 f731      	brne mydrw
000503 907f      	pop lcd_my
000504 954a      	dec r20
000505 f709      	brne cdrw	
                 
000506 9a29
000507 0000      	CS_HIGH	
                 
000508 915f      	pop r21
000509 914f      	pop r20
00050a 903f      	pop lcd_y
00050b 902f      	pop lcd_x
00050c 91ef      	pop ZL
00050d 91ff      	pop ZH
00050e 911f      	pop tmp1
00050f 910f      	pop tmp	
                 drw_chr_end:
000510 9508      	ret
                 ;--------------------
                 LCD_GotoXY:
                 ; вход lcd_x, lcd_y
000511 930f      	push tmp
000512 9828
000513 0000      	CMD_SET
000514 e20a      	ldi tmp, 0x2A
000515 de8c      	rcall Send_SPI
000516 9a28
000517 0000      	DATA_SET
000518 2d02      	mov tmp, lcd_x
000519 de88      	rcall Send_SPI
00051a e604      	ldi tmp, 100
00051b de86      	rcall Send_SPI
00051c 9828
00051d 0000      	CMD_SET
00051e e20b      	ldi tmp, 0x2B
00051f de82      	rcall Send_SPI
000520 9a28
000521 0000      	DATA_SET
000522 2d03      	mov tmp, lcd_y
000523 9503      	inc tmp
000524 de7d      	rcall Send_SPI
000525 e500      	ldi tmp, 80
000526 de7b      	rcall Send_SPI
000527 910f      	pop tmp
000528 9508      	ret
                 ;--------------------
                 LCD_C60_Init:
                 ;; LCD RESET
000529 e0fe
00052a efe6      	LAPZ sie_c60_init
                 		
00052b 9840
00052c 0000      	LCD_RESET_LOW
00052d de81      	rcall delay_100ms
00052e 9a40
00052f 0000      	LCD_RESET_HIGH
000530 e005      	ldi tmp, 0x05
                 c60i_c1:
000531 de7d      	rcall delay_100ms
000532 950a      	dec tmp
000533 f7e9      	brne c60i_c1
000534 9a29
000535 0000      	CS_HIGH
000536 de72      	rcall delay_10us
000537 9829
000538 0000      	CS_LOW
                 
                 ;   Send_to_lcd(CMD,0x01); //reset sw
                 ;   DelayMs(50);
                 ;   Send_to_lcd(CMD,0xc6); //initial escape
                 ;   DelayMs(40);
                 ;   Send_to_lcd(CMD,0xb9); //Refresh set
                 ;   Send_to_lcd(DAT,0x00);
000539 9828
00053a 0000      	CMD_SET
00053b e001      	ldi tmp, 0x01
00053c de65      	rcall Send_SPI
00053d e005      	ldi tmp, 0x05
                 c60i_c2:
00053e de74      	rcall delay_10ms
00053f 950a      	dec tmp
000540 f7e9      	brne c60i_c2
000541 ec06      	ldi tmp, 0xC6
000542 de5f      	rcall Send_SPI
000543 de6f      	rcall delay_10ms
000544 de6e      	rcall delay_10ms
000545 de6d      	rcall delay_10ms
000546 de6c      	rcall delay_10ms
000547 eb09      	ldi tmp, 0xB9
000548 de59      	rcall Send_SPI
000549 9a28
00054a 0000      	DATA_SET
00054b e000      	ldi tmp, 0x00
00054c de55      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb6); //Display control
                 ;   Send_to_lcd(DAT,0x80); //
                 ;   Send_to_lcd(DAT,0x04); //
                 ;   Send_to_lcd(DAT,0x8a); //
                 ;   Send_to_lcd(DAT,0x54); //
                 ;   Send_to_lcd(DAT,0x45); //
                 ;   Send_to_lcd(DAT,0x52); //
                 ;   Send_to_lcd(DAT,0x43); //
00054d 9828
00054e 0000      	CMD_SET
00054f eb06      	ldi tmp, 0xB6
000550 de51      	rcall Send_SPI
000551 9a28
000552 0000      	DATA_SET
000553 e017      	ldi tmp1, 7
                 c60i_c3:
000554 9105      	lpm tmp, Z+
000555 de4c      	rcall Send_SPI
000556 951a      	dec tmp1
000557 f7e1      	brne c60i_c3
                 ;   Send_to_lcd(CMD,0xb3); //Gray scale position set 0
                 ;   Send_to_lcd(DAT,0x02); //
                 ;   Send_to_lcd(DAT,0x0a); //
                 ;   Send_to_lcd(DAT,0x15); //
                 ;   Send_to_lcd(DAT,0x1f); //
                 ;   Send_to_lcd(DAT,0x28); //
                 ;   Send_to_lcd(DAT,0x30); //
                 ;   Send_to_lcd(DAT,0x37); //
                 ;   Send_to_lcd(DAT,0x3f); //
                 ;   Send_to_lcd(DAT,0x47); //
                 ;   Send_to_lcd(DAT,0x4c); //
                 ;   Send_to_lcd(DAT,0x54); //
                 ;   Send_to_lcd(DAT,0x65); //
                 ;   Send_to_lcd(DAT,0x75); //
                 ;   Send_to_lcd(DAT,0x80); //
                 ;   Send_to_lcd(DAT,0x85); //
000558 9828
000559 0000      	CMD_SET
00055a eb03      	ldi tmp, 0xb3
00055b de46      	rcall Send_SPI
00055c 9a28
00055d 0000      	DATA_SET
00055e e01f      	ldi tmp1, 15
                 c60i_c4:
00055f 9105      	lpm tmp, Z+
000560 de41      	rcall Send_SPI
000561 951a      	dec tmp1
000562 f7e1      	brne c60i_c4
                 ;   Send_to_lcd(CMD,0xb5); //Gamma curve
                 ;   Send_to_lcd(DAT,0x01); //
000563 9828
000564 0000      	CMD_SET
000565 eb05      	ldi tmp, 0xB5
000566 de3b      	rcall Send_SPI
000567 9a28
000568 0000      	DATA_SET
000569 e001      	ldi tmp, 0x01
00056a de37      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb7); //Temperature gradient
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
00056b 9828
00056c 0000      	CMD_SET
00056d eb07      	ldi tmp, 0xB7
00056e de33      	rcall Send_SPI
00056f 9a28
000570 0000      	DATA_SET
000571 e000      	ldi tmp, 0x00
000572 e01f      	ldi tmp1, 15
                 c60i_c5:
000573 de2e      	rcall Send_SPI
000574 951a      	dec tmp1
000575 f7e9      	brne c60i_c5
                 ;   Send_to_lcd(CMD,0xbd); //Common driver output select
                 ;   Send_to_lcd(DAT,0x00); //
000576 9828
000577 0000      	CMD_SET
000578 eb0d      	ldi tmp, 0xBD
000579 de28      	rcall Send_SPI
00057a 9a28
00057b 0000      	DATA_SET
00057c e000      	ldi tmp, 0x00
00057d de24      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x36); //Memory access control
                 ;   Send_to_lcd(DAT,0x48); //
00057e 9828
00057f 0000      	CMD_SET
000580 e306      	ldi tmp, 0x36
000581 de20      	rcall Send_SPI
000582 9a28
000583 0000      	DATA_SET
000584 e408      	ldi tmp, 0b01001000
000585 de1c      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x2d); //Палитра
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x03); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x07); //
                 ;   Send_to_lcd(DAT,0x09); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0d); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x03); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x07); //
                 ;   Send_to_lcd(DAT,0x09); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0d); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0f); //
000586 9828
000587 0000      	CMD_SET
000588 e20d      	ldi tmp, 0x2D
000589 de18      	rcall Send_SPI
00058a 9a28
00058b 0000      	DATA_SET
00058c e114      	ldi tmp1, 8+8+4
                 c60i_c6:
00058d 9105      	lpm tmp, Z+
00058e de13      	rcall Send_SPI
00058f 951a      	dec tmp1
000590 f7e1      	brne c60i_c6
                 ;   Send_to_lcd(CMD,0xba); //Voltage control
                 ;   Send_to_lcd(DAT,0x2f); //
                 ;   Send_to_lcd(DAT,0x03); //
000591 9828
000592 0000      	CMD_SET
000593 eb0a      	ldi tmp, 0xBA
000594 de0d      	rcall Send_SPI
000595 9a28
000596 0000      	DATA_SET
000597 e20f      	ldi tmp, 0x2F
000598 de09      	rcall Send_SPI
000599 e003      	ldi tmp, 0x03
00059a de07      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x25); //Send_to_lcd contrast
                 ;   Send_to_lcd(DAT,0x64); // Стоит поиграться со значением контраста, у меня в примере контраст 100, если больше то на дисплее ничего нет
                 ;   Send_to_lcd(DAT,0x61); //me контраст одинаковый для 0x6e и 0xee
00059b 9828
00059c 0000      	CMD_SET
00059d e205      	ldi tmp, 0x25
00059e de03      	rcall Send_SPI
00059f 9a28
0005a0 0000      	DATA_SET
0005a1 e601      	ldi tmp, 0x61
0005a2 ddff      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xbe); //Power control
                 ;   Send_to_lcd(DAT,0x59); // me
                 ;   Send_to_lcd(DAT,0x58); // У меня пишется в этот регистр значение 0х58
0005a3 9828
0005a4 0000      	CMD_SET
0005a5 eb0e      	ldi tmp, 0xBE
0005a6 ddfb      	rcall Send_SPI
0005a7 9a28
0005a8 0000      	DATA_SET
0005a9 e508      	ldi tmp, 0x58
0005aa ddf7      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x3a); //interface pixel format
                 ;   Send_to_lcd(DAT,0x02); //me 8-и битный цвет
                 ;   Send_to_lcd(DAT,0x03); //12-и битный цвет
0005ab 9828
0005ac 0000      	CMD_SET
0005ad e30a      	ldi tmp, 0x3A
0005ae ddf3      	rcall Send_SPI
0005af 9a28
0005b0 0000      	DATA_SET
0005b1 e002      	ldi tmp, 0x02
0005b2 ddef      	rcall Send_SPI
0005b3 9828
0005b4 0000      	CMD_SET
                 ;	ldi tmp, 0x21	// Inverse colors
                 ;	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x03); //Booster voltage ON
                 ;   DelayMs(40);
0005b5 e003      	ldi tmp, 0x03
0005b6 ddeb      	rcall Send_SPI
0005b7 ddfb      	rcall delay_10ms
0005b8 ddfa      	rcall delay_10ms
0005b9 ddf9      	rcall delay_10ms
0005ba ddf8      	rcall delay_10ms
                 ;   Send_to_lcd(CMD,0x11); //sleep out
                 ;   DelayMs(20); //Перед включением ждем 20 миллисекунд 
0005bb e101      	ldi tmp, 0x11
0005bc dde5      	rcall Send_SPI
0005bd ddf5      	rcall delay_10ms
0005be ddf4      	rcall delay_10ms
                 ;   Send_to_lcd(CMD,0x29); //Display ON
0005bf e209      	ldi tmp, 0x29
0005c0 dde1      	rcall Send_SPI
                 
0005c1 9a29
0005c2 0000      	CS_HIGH
0005c3 9508      	ret
                 
                 ;--------------------
                 LCD_Clear:
0005c4 930f      	push tmp
0005c5 931f      	push tmp1	
0005c6 922f      	push lcd_x
0005c7 923f      	push lcd_y
                 
0005c8 9829
0005c9 0000      	CS_LOW
0005ca 2700      	clr tmp
0005cb 2e20      	mov lcd_x, tmp
0005cc 2e30      	mov lcd_y, tmp
0005cd df43      	rcall LCD_GotoXY
                 
0005ce 9828
0005cf 0000      	CMD_SET
0005d0 e20c      	ldi tmp, 0x2C
0005d1 ddd0      	rcall Send_SPI
0005d2 9a28
0005d3 0000      	DATA_SET
0005d4 2d04      	mov tmp, bkg_color
                 		
0005d5 e510      	ldi tmp1, 80
                 cclr:
0005d6 931f      	push tmp1
0005d7 e615      	ldi tmp1, 101
                 lclr:
0005d8 ddc9      	rcall Send_SPI
0005d9 951a      	dec tmp1
0005da f7e9      	brne lclr
0005db 911f      	pop tmp1
0005dc 951a      	dec tmp1
0005dd f7c1      	brne cclr
                 
0005de 9a29
0005df 0000      	CS_HIGH
                 
0005e0 903f      	pop lcd_y
0005e1 902f      	pop lcd_x
0005e2 911f      	pop tmp1
0005e3 910f      	pop tmp
0005e4 9508      	ret
                 
                 
                 
                 ;-------- Данные
                 
                 .include "CP866.inc"	; 8x8 font
                 
                 seg7_dig:
0005e5 282a      d0:	.db 0x2A, 0x28
0005e6 2222      d1: .db 0x22, 0x22
0005e7 2624      d2: .db 0x24, 0x26
0005e8 2424      d3: .db 0x24, 0x24
0005e9 2328      d4: .db 0x28, 0x23
0005ea 2426      d5: .db 0x26, 0x24
0005eb 2126      d6: .db 0x26, 0x21
0005ec 2223      d7: .db 0x23, 0x22
0005ed 2121      d8: .db 0x21, 0x21
0005ee 2421      d9: .db 0x21, 0x24
0005ef 2a21      dA: .db 0x21, 0x2A
0005f0 2127      dB: .db 0x27, 0x21
0005f1 2725      dC: .db 0x25, 0x27
0005f2 2129      dD: .db 0x29, 0x21
0005f3 2626      dE: .db 0x26, 0x26
0005f4 2526      dF: .db 0x26, 0x25
                 
                 ; Font: CP866
                 font8x8:
0005f5 0000
0005f6 0000
0005f7 0000
0005f8 0000      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; ( )	0x20
                 ; коды для отображения цифр-букв в стиле семисегментного индикатора
0005f9 ba7c
0005fa c6c6
0005fb c6c6
0005fc 7cba      .db	0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C	; ()	0x21
0005fd 0200
0005fe 0606
0005ff 0606
000600 0002      .db	0x00, 0x02, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00	; ()	0x22
000601 3a7c
000602 0606
000603 0606
000604 0002      .db	0x7C, 0x3A, 0x06, 0x06, 0x06, 0x06, 0x02, 0x00	; ()	0x23
000605 3a7c
000606 0606
000607 0606
000608 7c3a      .db	0x7C, 0x3A, 0x06, 0x06, 0x06, 0x06, 0x3A, 0x7C	; ()	0x24
000609 b87c
00060a c0c0
00060b c0c0
00060c 0080      .db	0x7C, 0xB8, 0xC0, 0xC0, 0xC0, 0xC0, 0x80, 0x00	; ()	0x25
00060d b87c
00060e c0c0
00060f c0c0
000610 7cb8      .db	0x7C, 0xB8, 0xC0, 0xC0, 0xC0, 0xC0, 0xB8, 0x7C	; ()	0x26
000611 8000
000612 c0c0
000613 c0c0
000614 7cb8      .db	0x00, 0x80, 0xC0, 0xC0, 0xC0, 0xC0, 0xB8, 0x7C	; ()	0x27
000615 8200
000616 c6c6
000617 c6c6
000618 7cba      .db	0x00, 0x82, 0xC6, 0xC6, 0xC6, 0xC6, 0xBA, 0x7C	; ()	0x28
000619 0200
00061a 0606
00061b 0606
00061c 7c3a      .db	0x00, 0x02, 0x06, 0x06, 0x06, 0x06, 0x3A, 0x7C	; ()	0x29
00061d ba7c
00061e c6c6
00061f c6c6
000620 0082      .db	0x7C, 0xBA, 0xC6, 0xC6, 0xC6, 0xC6, 0x82, 0x00	; ()	0x2A
                 
000621 423c
000622 8181
000623 8181
000624 ff81      .db	0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0xFF	; (0%)	Символы батарейки 0x2B
000625 423c
000626 8181
000627 8181
000628 ffbd      .db	0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0xBD, 0xFF	; (33%) 0x2C
000629 423c
00062a 8181
00062b 81bd
00062c ffbd      .db	0x3C, 0x42, 0x81, 0x81, 0xBD, 0x81, 0xBD, 0xFF	; (66%) 0x2D
00062d 423c
00062e 81bd
00062f 81bd
000630 ffbd      .db	0x3C, 0x42, 0xBD, 0x81, 0xBD, 0x81, 0xBD, 0xFF	; (100%) 0x2E
000631 0c06
000632 3018
000633 c060
000634 0080      .db	0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00	; (/)
000635 6c38
000636 d6c6
000637 6cc6
000638 0038      .db	0x38, 0x6C, 0xC6, 0xD6, 0xC6, 0x6C, 0x38, 0x00	; (0)	0x30
000639 3818
00063a 1818
00063b 1818
00063c 007e      .db	0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00	; (1)
00063d c67c
00063e 1c06
00063f 6630
000640 00fe      .db	0x7C, 0xC6, 0x06, 0x1C, 0x30, 0x66, 0xFE, 0x00	; (2)
000641 c67c
000642 3c06
000643 c606
000644 007c      .db	0x7C, 0xC6, 0x06, 0x3C, 0x06, 0xC6, 0x7C, 0x00	; (3)
000645 3c1c
000646 cc6c
000647 0cfe
000648 001e      .db	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00	; (4)
000649 c0fe
00064a fcc0
00064b c606
00064c 007c      .db	0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0xC6, 0x7C, 0x00	; (5)
00064d 6038
00064e fcc0
00064f c6c6
000650 007c      .db	0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00	; (6)
000651 c6fe
000652 180c
000653 3030
000654 0030      .db	0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00	; (7)
000655 c67c
000656 7cc6
000657 c6c6
000658 007c      .db	0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00	; (8)
000659 c67c
00065a 7ec6
00065b 0c06
00065c 0078      .db	0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00	; (9)
00065d 1800
00065e 0018
00065f 1800
000660 0018      .db	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00	; (:)	0x3A
                 
000661 6c38
000662 fec6
000663 c6c6
000664 00c6      .db	0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00	; (A)	0x3B
000665 66fc
000666 7c66
000667 6666
000668 00fc      .db	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00	; (B)
000669 663c
00066a c0c0
00066b 66c0
00066c 003c      .db	0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00	; (C)
00066d 6cf8
00066e 6666
00066f 6c66
000670 00f8      .db	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00	; (D)
000671 62fe
000672 7868
000673 6268
000674 00fe      .db	0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00	; (E)
000675 62fe
000676 7868
000677 6068
000678 00f0      .db	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00	; (F)	0x40
                 
000679 1e0e
00067a 6636
00067b 667e
00067c 0066      .db	0x0E, 0x1E, 0x36, 0x66, 0x7E, 0x66, 0x66, 0x00	; (А)	0x41
00067d 607c
00067e 7c60
00067f 6666
000680 007c      .db	0x7C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (Б)
000681 667c
000682 7c66
000683 6666
000684 007c      .db	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (В)
000685 607e
000686 6060
000687 6060
000688 0060      .db	0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00	; (Г)
000689 3c1c
00068a 6c6c
00068b 6c6c
00068c c6fe      .db	0x1C, 0x3C, 0x6C, 0x6C, 0x6C, 0x6C, 0xFE, 0xC6	; (Д)
00068d 607e
00068e 7c60
00068f 6060
000690 007e      .db	0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00	; (Е)
000691 dbdb
000692 3c7e
000693 db7e
000694 00db      .db	0xDB, 0xDB, 0x7E, 0x3C, 0x7E, 0xDB, 0xDB, 0x00	; (Ж)
000695 663c
000696 1c06
000697 6606
000698 003c      .db	0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00	; (З)
000699 6666
00069a 7e6e
00069b 6676
00069c 0066      .db	0x66, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (И)
00069d 663c
00069e 7e6e
00069f 6676
0006a0 0066      .db	0x3C, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (Й)
0006a1 6c66
0006a2 7078
0006a3 6c78
0006a4 0066      .db	0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00	; (К)
0006a5 1e0e
0006a6 6636
0006a7 6666
0006a8 0066      .db	0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x00	; (Л)
0006a9 eec6
0006aa fefe
0006ab d6d6
0006ac 00c6      .db	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xD6, 0xC6, 0x00	; (М)
0006ad 6666
0006ae 7e66
0006af 6666
0006b0 0066      .db	0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (Н)
0006b1 663c
0006b2 6666
0006b3 6666
0006b4 003c      .db	0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00	; (О)
0006b5 667e
0006b6 6666
0006b7 6666
0006b8 0066      .db	0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00	; (П)
0006b9 667c
0006ba 6666
0006bb 607c
0006bc 0060      .db	0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00	; (Р)
0006bd 663c
0006be 6060
0006bf 6660
0006c0 003c      .db	0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00	; (С)
0006c1 187e
0006c2 1818
0006c3 1818
0006c4 0018      .db	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (Т)
0006c5 6666
0006c6 3e66
0006c7 6606
0006c8 003c      .db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00	; (У)
0006c9 db7e
0006ca dbdb
0006cb 187e
0006cc 0018      .db	0x7E, 0xdb, 0xdb, 0xdb, 0x7E, 0x18, 0x18, 0x00	; (Ф)
0006cd 6666
0006ce 183c
0006cf 663c
0006d0 0066      .db	0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00	; (Х)
0006d1 6666
0006d2 6666
0006d3 6666
0006d4 037f      .db	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7F, 0x03	; (Ц)
0006d5 6666
0006d6 3e66
0006d7 0606
0006d8 0006      .db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00	; (Ч)
0006d9 dbdb
0006da dbdb
0006db dbdb
0006dc 00ff      .db	0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xFF, 0x00	; (Ш)
0006dd dbdb
0006de dbdb
0006df dbdb
0006e0 03ff      .db	0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xFF, 0x03	; (Щ)
0006e1 60e0
0006e2 7c60
0006e3 6666
0006e4 007c      .db	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (Ъ)
0006e5 c6c6
0006e6 f6c6
0006e7 dede
0006e8 00f6      .db	0xC6, 0xC6, 0xC6, 0xF6, 0xDE, 0xDE, 0xF6, 0x00	; (Ы)
0006e9 6060
0006ea 7c60
0006eb 6666
0006ec 007c      .db	0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (Ь)
0006ed 8c78
0006ee 3e06
0006ef 8c06
0006f0 0078      .db	0x78, 0x8C, 0x06, 0x3E, 0x06, 0x8C, 0x78, 0x00	; (Э)
0006f1 dbce
0006f2 fbdb
0006f3 dbdb
0006f4 00ce      .db	0xCE, 0xdb, 0xdb, 0xFB, 0xdb, 0xdb, 0xCE, 0x00	; (Ю)
0006f5 663e
0006f6 6666
0006f7 363e
0006f8 0066      .db	0x3E, 0x66, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x00	; (Я)
                 
                 ; символы для бинарных часов
0006f9 0000
0006fa 0000
0006fb 0000
0006fc 0000      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (0) 0x61
0006fd 0000
0006fe 0000
0006ff 0000
000700 7e00      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E	; (1)
000701 0000
000702 0000
000703 7e00
000704 0000      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00	; (2)
000705 0000
000706 0000
000707 7e00
000708 7e00      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E	; (3)
000709 0000
00070a 7e00
00070b 0000
00070c 0000      .db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00	; (4)
00070d 0000
00070e 7e00
00070f 0000
000710 7e00      .db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x7E	; (5)
000711 0000
000712 7e00
000713 7e00
000714 0000      .db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00	; (6)
000715 0000
000716 7e00
000717 7e00
000718 7e00      .db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E	; (7)
000719 7e00
00071a 0000
00071b 0000
00071c 0000      .db	0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (8)
00071d 7e00
00071e 0000
00071f 0000
000720 7e00      .db	0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E	; (9)
                 
                 ; Символы для рисования батарейки
                 ;.db	0xFF, 0xFF, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF	; (1) левая часть
                 ;.db	0xFF, 0xFF, 0x80, 0xB0, 0xB0, 0x80, 0xFF, 0xFF	; (2)
                 ;.db	0xFF, 0xFF, 0x80, 0xB6, 0xB6, 0x80, 0xFF, 0xFF	; (3)
                 ;.db	0xFC, 0xFE, 0x03, 0x03, 0x03, 0x03, 0xFE, 0xFC	; (1) правая часть
                 ;.db	0xFC, 0xFE, 0x03, 0xC3, 0xC3, 0x03, 0xFE, 0xFC	; (2)
                 ;.db	0xFC, 0xFE, 0x03, 0xDB, 0xDB, 0x03, 0xFE, 0xFC	; (u)
                 
                 month_len:
000721 2932
000722 3132
000723 3132
000724 3232
000725 3231
000726 3231      	.db 0x32,0x29,0x32,0x31,0x32,0x31,0x32,0x32,0x31,0x32,0x31,0x32
                 
                 ; Символьные константы
                 month_names:
000727 cddf
000728 00c2      	.db "ЯНВ",0x00
000729 c5d4
00072a 00c2      	.db "ФЕВ",0x00
00072b c0cc
00072c 00d0      	.db "МАР",0x00
00072d cfc0
00072e 00d0      	.db "АПР",0x00
00072f c0cc
000730 00c9      	.db "МАЙ",0x00
000731 dec8
000732 00cd      	.db "ИЮН",0x00
000733 dec8
000734 00cb      	.db "ИЮЛ",0x00
000735 c2c0
000736 00c3      	.db "АВГ",0x00
000737 c5d1
000738 00cd      	.db "СЕН",0x00
000739 cace
00073a 00d2      	.db "ОКТ",0x00
00073b cecd
00073c 00df      	.db "НОЯ",0x00
00073d c5c4
00073e 00ca      	.db "ДЕК",0x00
                 
                 week_day_names:
00073f cecf
000740 c5cd
000741 c5c4
000742 dccb
000743 c8cd
000744 00ca      mon:	.db "ПОНЕДЕЛЬНИК",0x00
000745 2020
000746 d2c2
000747 d0ce
000748 c8cd
000749 20ca
00074a 0020      tue:	.db "  ВТОРНИК  ",0x00
00074b 2020
00074c d120
00074d c5d0
00074e c0c4
00074f 2020
000750 0020      wed:	.db "   СРЕДА   ",0x00
000751 2020
000752 c5d7
000753 c2d2
000754 d0c5
000755 20c3
000756 0020      thu:	.db "  ЧЕТВЕРГ  ",0x00
000757 2020
000758 dfcf
000759 cdd2
00075a d6c8
00075b 20c0
00075c 0020      fri:	.db "  ПЯТНИЦА  ",0x00
00075d 2020
00075e d3d1
00075f c1c1
000760 d2ce
000761 20c0
000762 0020      sat:	.db "  СУББОТА  ",0x00
000763 cec2
000764 cad1
000765 c5d0
000766 c5d1
000767 c8cd
000768 00c5      sun:	.db "ВОСКРЕСЕНИЕ",0x00
                 
000769 c0d2
00076a ccc9
00076b d0c5
00076c 0000      tim_str: .db "ТАЙМЕР",0x00,0x00
                 
                 corr_table:
00076d 0103
00076e 0102
00076f 0101
000770 0104
000771 0108
000772 0105
000773 0106      	.dw hour, minute, second, day, day_of_week, month, year
                 
                 corr_max_value:
000774 0024
000775 0060
000776 0060
000777 0000
000778 0007
000779 0012
00077a 9999      	.dw 0x24, 0x60, 0x60, 0x00, 0x07, 0x12, 0x9999
                 
                 sie_c60_init:
00077b 0480
00077c 548a
00077d 5245
00077e 0243
00077f 150a
000780 281f
000781 3730
000782 473f
000783 544c
000784 7565
000785 8580
000786 0300
000787 0705
000788 0b09
000789 0f0d
00078a 0300
00078b 0705
00078c 0b09
00078d 0f0d
00078e 0500
00078f 0f0b      	.db	0x80,0x04,0x8A,0x54,0x45,0x52,0x43,0x02,0x0A,0x15,0x1F,0x28,0x30,0x37,0x3F,0x47,0x4C,0x54,0x65,0x75,0x80,0x85,0x00,0x03,0x05,0x07,0x09,0x0B,0x0D,0x0F,0x00,0x03,0x05,0x07,0x09,0x0B,0x0D,0x0F,0x00,0x05,0x0B,0x0F
                 
                 w_time_corr:	; Коррекция времени. Когда часы "покажут" это время, программа "сбросит" их в 00:00:00.0 - это коррекция для "убегающих" часов
000790 0000
000791 0000      	.db 0x00,0x00,0x00,0x00 ; доли секунд, секунды, минуты, часы
                 
                 
                 ; запись длительностей звука и пауз для сигнала
                 ; т.к. нет не логично запускать подряд два звука или две паузы, то каждый четный байт (с нуля) - это длительность звука (в долях секунды)
                 ; а каждый нечетный байт - длительность паузы
                 sound_pattern:
000792 0102
000793 0102
000794 0102
000795 0102
000796 0102      	.db 2,1,2,1,2,1,2,1,2,1	; пробный пи-пи-пи-пи :-)
                 
                 ;-------- Конец cseg
                 
                 .dseg ; Сегмент данных ОЗУ
                 .org 0x100
                 ; Дата-время (BCD)
000100 00        	dsecond: .db 0x00
000101 00        	second: .db 0x00
000102 00        	minute: .db 0x00
000103 00        	hour: .db 0x00
000104 00        	day: .db 0x00
000105 00        	month: .db 0x00
000106 00 00     	year: .dw 0x00
000108 00        	day_of_week: .db 0x00
                 
000109 00        	timer_sec: .db 0x00	; BCD значение таймера (секунды)
00010a 00        	timer_min: .db 0x00	; минуты
                 
                 ;-------- Конец dseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48PA register use summary:
r0 :   2 r1 :   1 r2 :  28 r3 :  22 r4 :  19 r5 :  18 r6 :  15 r7 :  17 
r8 :  11 r9 :   6 r10:   5 r11:   0 r12:   4 r13:  21 r14:   4 r15:   0 
r16: 491 r17: 114 r18:  10 r19:  19 r20:  40 r21:   5 r22:  13 r23:  40 
r24:  24 r25:   8 r26:  14 r27:   1 r28:   5 r29:   4 r30:  74 r31:  67 
x  :   0 y  :   8 z  :  71 
Registers used: 32 out of 35 (91.4%)

ATmega48PA instruction use summary:
.lds  :   0 .sts  :   0 adc   :   9 add   :  29 adiw  :   3 and   :   5 
andi  :  20 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   0 break :   0 breq  :  17 brge  :   0 brhc  :   0 
brhs  :   1 brid  :   0 brie  :   0 brlo  :  11 brlt  :   0 brmi  :   0 
brne  :  58 brpl  :   0 brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :  35 cbr   :   0 clc   :   0 
clh   :   0 cli   :   2 cln   :   0 clr   :  37 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   2 cp    :   9 cpc   :   0 cpi   :  56 
cpse  :   0 dec   :  21 eor   :   2 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   8 inc   :   8 ld    :  30 ldd   :   0 
ldi   : 237 lds   :   9 lpm   :  27 lsl   :  19 lsr   :   6 mov   :  67 
movw  :   0 mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :  62 
or    :   3 ori   :  23 out   :  17 pop   : 105 push  : 104 rcall : 135 
ret   :  27 reti  :   2 rjmp  : 108 rol   :   6 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :  38 sbic  :   0 sbis  :   5 sbiw  :   5 sbr   :   0 
sbrc  :  30 sbrs  :  13 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   1 
spm   :   0 st    :  30 std   :   0 sts   :  16 sub   :   2 subi  :  10 
swap  :   3 tst   :   9 wdr   :   1 
Instructions used: 54 out of 111 (48.6%)

ATmega48PA memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000f2e   3018    868   3886    4096  94.9%
[.dseg] 0x000100 0x00010b      0     11     11     512   2.1%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 1 warnings
