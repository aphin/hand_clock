
AVRASM ver. 2.1.42  F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm Fri Aug 08 00:24:10 2014

F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(21): Including file 'C:\Program Files\Atmel\AVR Tools\AvrAssembler2\Appnotes\m48PAdef.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(24): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\definitions.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(59): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\init.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(856): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\Sie_c60.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(860): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\CP866.inc'
                 
                 
                 ; TODO
                 ; 1. Сделать более наглядную настройку времени (с подсветкой редактируемой величины)
                 ; 2. Сделать регистр флагов обновления, чтобы не выполнять лишние рисования
                 
                 
                 ;#define DEBUG
                 
                 ; Для себя:
                 ; Регистры GPIORx
                 ; GPIOR0.0 - флаг переноса BCD
                 ; GPIOR0.1 - используется как вспомогательный флаг при опросе клавиатуры
                 ; GPIOR0.2 - устанавливается в 1 каждую десятую долю секунды
                 ; GPIOR0.3 - ...каждую секунду
                 ; GPIOR0.4 - ...минуту
                 ; GPIOR0.5 - ...час
                 ; GPIOR0.6 - ...день
                 ; GPIOR0.7 - ...месяц
                 
                 .list
                 
                 .include "definitions.inc"
                 
                 
                 ;------- Константы
                 .equ num_mode = 0x02
                 .equ sec_part = 8
                 .equ OCR2A_val = 127
                 .equ TimCntVal = 32
                 ;-------
                 
                 ;------- Определения
                 .def lcd_X = r2	; Текущие координаты
                 .def lcd_Y = r3
                 .def bkg_color = r4 ; Цвета фона и текста
                 .def frg_color = r5
                 .def lcd_mx = r6	; множители масштабирования
                 .def lcd_my = r7
                 
                 .def kbd = r8	; Битовая маска нажатых кнопок
                 .def kbd_prev = r12	; Битовая маска нажатых кнопок предыдущего такта
                 .def kbd_press = r13 ; Нажатые кнопки (из 1 в 0)
                 .def kbd_release = r14 ; Отпущенные кнопки (из 1 в 0)
                 
                 .def sec_part_cnt = r10
                 .def refresh = r23	; Регистр с флагами обновления
                 ; Биты:
                 ; 0 - надо обновить минуты
                 ; 1 - часы
                 ; 2 - число/день недели
                 ; 3 - месяц
                 ; 4 - год
                 ; т.к. рисование идет не быстрее чем раз в секунду, то секунды обновляются каждый такт и так
                 
                 .def led_timer=r9	; Таймер подсветки (0.1 секундные интерваллы)
                 .def mode=r19	; Режим работы: 0 - часы (отображение даты-времени), 1 - настройка даты, времени,
                 				; 2 - таймер, 3 - секундомер 
                 .def mode_tmp=r24 ; Для режима 1 - здесь хранится текущий редактируемый параметр (час, минута, секунда и т.д.)
                 				  ; 0 - час, 1 - минута, 2 - секунда, 3 - число, 4 - день недели, 5 - месяц, 6 - год (пока так)
                 				  ; этот же параметр и указывает какая часть рисуемой даты-времени будет подсвечена
                 
                 .def tmp=r16	; Temp
                 .def tmp1=r17
                 .def tmp2=r18
                 ;-------
                 
                 ;------- Макросы
                 .macro CS_LOW
                 	cbi PORTB, 1
                 	nop
                 .endm
                 .macro CS_HIGH
                 	sbi PORTB, 1
                 	nop
                 .endm
                 .macro LED_ON
                 	sbi PORTC, 1
                 	nop
                 .endm
                 .macro LED_OFF
                 	cbi PORTC, 1
                 	nop
                 .endm
                 .macro CMD_SET
                 	cbi PORTB, 0
                 	nop
                 .endm
                 .macro DATA_SET
                 	sbi PORTB, 0
                 	nop
                 .endm
                 .macro LCD_RESET_LOW
                 	cbi PORTC, 0
                 	nop
                 .endm
                 .macro LCD_RESET_HIGH
                 	sbi PORTC, 0
                 	nop
                 .endm
                 .macro LAPZ
                 	ldi ZH, high(@0 << 1)
                 	ldi ZL, low(@0 << 1)
                 .endm
                 .macro LAPX
                 	ldi XH, high(@0 << 1)
                 	ldi XL, low(@0 << 1)
                 .endm
                 .macro LAPY
                 	ldi YH, high(@0 << 1)
                 	ldi YL, low(@0 << 1)
                 .endm
                 .macro LASZ
                 	ldi ZH, high(@0)
                 	ldi ZL, low(@0)
                 .endm
                 .macro LASX
                 	ldi XH, high(@0)
                 	ldi XL, low(@0)
                 .endm
                 .macro LASY
                 	ldi YH, high(@0)
                 	ldi YL, low(@0)
                 .endm
                 .macro BEEP_ON
                 	sbi PORTC, 2
                 	nop
                 .endm
                 .macro BEEP_OFF
                 	cbi PORTC, 2
                 	nop
                 .endm
                 ;-------
                 
                 .cseg ; Сегмент кода
                 .org 0
                 
000000 c019      rjmp Start
                 ; Прерывания
000001 c14d      rjmp INT0r
000002 c14c      rjmp INT1r
000003 c14b      rjmp PCINT0r
000004 c14a      rjmp PCINT1r
000005 c149      rjmp PCINT2r
000006 c148      rjmp WDT
000007 c151      rjmp T2_COMPA
000008 c146      rjmp T2_COMPB
000009 c145      rjmp T2_OVF
00000a c144      rjmp T1_CAPT
00000b c143      rjmp T1_COMPA
00000c c142      rjmp T1_COMPB
00000d c141      rjmp T1_OVF
00000e c140      rjmp T0_COMPA
00000f c13f      rjmp T0_COMPB
000010 c13e      rjmp T0_OVF
000011 c13d      rjmp SPI_STC
000012 c13c      rjmp USART_RX
000013 c13b      rjmp USART_UDRE
000014 c13a      rjmp USART_TX
000015 c139      rjmp AnalogDC
000016 c138      rjmp EE_RDY
000017 c137      rjmp AnalogCMP
000018 c136      rjmp TWI
000019 c135      rjmp SPM_RDY
                 
                 Start:
                 
                 .include "init.inc"
                 
00001a 94f8      	cli
                 ;-------- Инициализация стека
00001b e002          ldi tmp, high(RAMEND)
00001c bf0e          out SPH,tmp
00001d ef0f          ldi tmp, low(RAMEND)
00001e bf0d          out SPL,tmp
                 ;-------- Отключение Watchdog
00001f 95a8      	wdr
000020 2700      	clr tmp
000021 9300 0060 	sts WDTCSR, tmp
                 ;-------- Настраиваем асинхронный таймер
000023 e200      	ldi tmp,0b00100000	; Устанавливаем 32кГц источник для TCount2
000024 9300 00b6 	sts ASSR, tmp
                 	
000026 e002      	ldi tmp,0b00000010		; TCount2 вызывает прерывание при сравнении с OCR2A
000027 9300 0070 	sts TIMSK2, tmp
                 
000029 e70f      	ldi tmp, OCR2A_val
00002a 9300 00b3 	sts OCR2A, tmp		; Каждые 4.9 мс (примерно)
                 wl2:
00002c 9100 00b6 	lds tmp, ASSR
00002e fd03      	sbrc tmp, OCR2AUB
00002f cffc      	rjmp wl2
                 
000030 e001      	ldi tmp, 0x01		; TCount2 работает на частоте 32768 Гц
000031 9300 00b1 	sts TCCR2B, tmp
                 wl0:
000033 9100 00b6 	lds tmp, ASSR		; Ждем, пока будет обновлен TCCR2B
000035 fd00      	sbrc tmp, TCR2BUB
000036 cffc      	rjmp wl0
                 
000037 e002      	ldi tmp, 0b00000010	; Режим CTC
000038 9300 00b0 	sts TCCR2A, tmp
                 wl1:
00003a 9100 00b6 	lds tmp, ASSR
00003c fd01      	sbrc tmp, TCR2AUB			; Ждем, пока будет обновлен TCCR2A
00003d cffc      	rjmp wl1
                 ;-------- Отключаем не используемые модули (TWI, Timer0, Timer1, USART, ADC)
00003e ea0b      	ldi tmp, 0b10101011
00003f 9300 0064 	sts PRR, tmp
                 ;-------- Настраиваем sleep режим (Power-save mode)
000041 e007      	ldi tmp, 0b00000111
000042 bf03      	out SMCR, tmp
                 ;-------- Настраиваем порты
000043 e007      	ldi tmp, 0b00000111	; PORTC - подтяжки включены, PC0, PC1, PC2 - на выход
000044 b907      	out DDRC, tmp
000045 e709      	ldi tmp, 0b01111001	; PC2 - on/off для звука
000046 b908      	out PORTC, tmp
                 
000047 e20b      	ldi tmp, 0b00101011
000048 b904      	out DDRB, tmp
000049 ed07      	ldi tmp, 0b11010111
00004a b905      	out PORTB, tmp
                 
00004b e00c      	ldi tmp, 0b00001100
00004c b90a      	out DDRD, tmp
00004d ef07      	ldi tmp, 0b11110111
00004e b90b      	out PORTD, tmp
                 ;-------- Настраиваем SPI
00004f e500      	ldi tmp, 0b01010000	; Скорость fsck/2, режим 00, мастер
000050 bd0c      	out SPCR, tmp
000051 e001      	ldi tmp, 0x01
000052 bd0d      	out SPSR, tmp
000053 b50d      	in tmp, SPSR
000054 b50e      	in tmp, SPDR
                 ;-------- Настраиваем MCUCR
000055 e000      	ldi tmp, 0x00
000056 bf05      	out MCUCR, tmp
                 ;-------- Настраиваем EEPROM
000057 e000      	ldi tmp, 0x00
000058 bb0f      	out EECR, tmp
                 ;-------- Инициализируем регистры
000059 2733      	clr mode
00005a 2788      	clr mode_tmp
00005b 24aa      	clr sec_part_cnt
00005c 2700      	clr r16
00005d 2711      	clr r17
00005e 2722      	clr r18
00005f 2733      	clr r19
000060 2744      	clr r20
000061 2755      	clr r21
000062 2766      	clr r22
000063 2788      	clr r24
000064 2799      	clr r25
000065 27aa      	clr r26
000066 27bb      	clr r27
000067 27cc      	clr r28
000068 27dd      	clr r29
000069 27ee      	clr r30
00006a 27ff      	clr r31
00006b e30f      	ldi tmp, 0b00111111
00006c 2e80      	mov kbd, tmp
00006d 2ec0      	mov kbd_prev, tmp
00006e 2ed0      	mov kbd_press, tmp
00006f 2ee0      	mov kbd_release, tmp
000070 e000      	ldi tmp, 0x00
000071 bb0e      	out GPIOR0, tmp
000072 bd0a      	out GPIOR1, tmp
000073 e17f      	ldi refresh, 0b00011111
                 ;-------- Инициализируем значения в памяти
000074 e000      	ldi tmp, 0x00
000075 e0f1      	ldi ZH, high(dsecond)
000076 e0e0      	ldi ZL, low(dsecond)
000077 9301      	st Z+, tmp
000078 9301      	st Z+, tmp
000079 e308      	ldi tmp, 0x38
00007a 9301      	st Z+, tmp
00007b e106      	ldi tmp, 0x16
00007c 9301      	st Z+, tmp
00007d e205      	ldi tmp, 0x25
00007e 9301      	st Z+, tmp
00007f e007      	ldi tmp, 0x07
000080 9301      	st Z+, tmp
000081 e104      	ldi tmp, 0x14
000082 9301      	st Z+, tmp
000083 e200      	ldi tmp, 0x20
000084 9301      	st Z+, tmp
000085 e002      	ldi tmp, 0x02
000086 8300      	st Z, tmp
                 
000087 e0f1      	ldi ZH, high(sec_duration)
000088 e1e4      	ldi ZL, low(sec_duration)
                 ;	ldi tmp, sec_dur_eep
                 
                 ;eep_w:
                 ;	sbic EECR, 1
                 ;	rjmp eep_w
                 
                 ;	out EEARL, tmp
                 ;	sbi EECR, 0
                 ;	in tmp, EEDR
000089 e200      	ldi tmp, TimCntVal	; в этом случае икремент времени будет происходить каждую 1/7 секунды (в теории)
00008a 8300      	st Z, tmp
                 
00008b e015      	ldi tmp1, 0x05
00008c 2e21      	mov lcd_x, tmp1
00008d 2e31      	mov lcd_y, tmp1
00008e ef1f      	ldi tmp1, 0xFF
00008f 2e51      	mov frg_color, tmp1
000090 e010      	ldi tmp1, 0x00
000091 2e41      	mov bkg_color, tmp1
000092 e011      	ldi tmp1, 0x01
000093 2e61      	mov lcd_mx, tmp1
000094 2e71      	mov lcd_my, tmp1
                 
000095 9478      	sei
                 
000096 d357      	rcall LCD_C60_Init
000097 9a29
000098 0000      	CS_HIGH
000099 d436      	rcall LCD_Clear
00009a 9841
00009b 0000      	LED_OFF
                 	
00009c d292      	rcall LCD_IdleOn
                 
                 main:
                 
00009d 9588      	sleep
                 
                 ; Ждем обновления TC2 как в апп-нотах по RTC
00009e e000      	ldi tmp, 0x00
00009f 9300 00b4 	sts OCR2B, tmp
                 wtr:
0000a1 9100 00b6 	lds tmp, ASSR
0000a3 fd02      	sbrc tmp, OCR2BUB
0000a4 cffc      	rjmp wtr
                 
                 ; обработка звука
0000a5 2322      	tst tmp2
0000a6 f411      	brne m_cont
0000a7 9842
0000a8 0000      	BEEP_OFF
                 m_cont:
0000a9 3030      	cpi mode, 0x00
0000aa f449      	brne m_mode1
                 
                 ; Режим 0 - рисуем часы, подсветка 5 секунд по нажатию, режим Idle
0000ab 9bf3      	sbis GPIOR0, 3	; Выполняем рисование каждую секунду
0000ac c012      	rjmp kbd_hand
                 
0000ad e003      	ldi tmp, 3
0000ae 2e20      	mov lcd_x, tmp
0000af e10c      	ldi tmp, 28
0000b0 2e30      	mov lcd_y, tmp
0000b1 d0fc      	rcall LCD_DrawTime
0000b2 d1d8      	rcall LCD_DrawDate
0000b3 c00b      	rjmp kbd_hand
                 ; Режим 1 - рисуем дату-время, подсветка включена, режим Normal, рисуем с интервалом 0.1 сек
                 m_mode1:
0000b4 3031      	cpi mode, 0x01
0000b5 f449      	brne m_mode2
0000b6 9bf2      	sbis GPIOR0, 2
0000b7 c007      	rjmp kbd_hand
                 	
                 ;	ldi refresh, 0b00011111
                 
0000b8 e003      	ldi tmp, 3
0000b9 2e20      	mov lcd_x, tmp
0000ba e10c      	ldi tmp, 28
0000bb 2e30      	mov lcd_y, tmp
                 
0000bc d0f1      	rcall LCD_DrawTime
0000bd d1cd      	rcall LCD_DrawDate
                 	
0000be c000      	rjmp kbd_hand
                 m_mode2:				
                 
                 kbd_hand:
                 ; звук при нажатии на кнопки
0000bf 2d0d      	mov tmp, kbd_press
0000c0 6c00      	ori tmp, 0b11000000
0000c1 3f0f      	cpi tmp, 0xFF
0000c2 f019      	breq kbd_hcont
0000c3 9a42
0000c4 0000      	BEEP_ON
0000c5 e025      	ldi tmp2, 5
                 kbd_hcont:
0000c6 3030      	cpi mode, 0x00
0000c7 f481      	brne m_kbd_mode1
                 ; Обработчик кнопок режима 0
0000c8 fcd3      	sbrc kbd_press, 3
0000c9 c005      	rjmp nx_b
0000ca 9a41
0000cb 0000      	LED_ON
0000cc d26d      	rcall LCD_IdleOff
0000cd e302      	ldi tmp, 50
0000ce 2e90      	mov led_timer, tmp
                 nx_b:
0000cf fcd5      	sbrc kbd_press, 5
0000d0 c006      	rjmp nx_b1
0000d1 9533      	inc mode
0000d2 d3fd      	rcall LCD_Clear
0000d3 d266      	rcall LCD_IdleOff
0000d4 617f      	ori refresh, 0b00011111
0000d5 9a41
0000d6 0000      	LED_ON
                 nx_b1:
0000d7 cfc5      	rjmp main
                 m_kbd_mode1:
                 ; Обработчик кнопок режима 1
0000d8 3031      	cpi mode, 0x01
0000d9 f009      	breq m_kbd_mode1_cont
0000da c065      	rjmp m_kbd_mode2
                 m_kbd_mode1_cont:
0000db fcd5      	sbrc kbd_press, 5
0000dc c006      	rjmp nx_b_m1
0000dd 2733      	clr mode
0000de d3f1      	rcall LCD_Clear
0000df d24f      	rcall LCD_IdleOn
0000e0 617f      	ori refresh, 0b00011111
0000e1 9841
0000e2 0000      	LED_OFF
                 nx_b_m1:	; Кнопки 4, 1 (средние слева и справа соответственно) - выбор редактируемой величины
0000e3 fcd4      	sbrc kbd_press, 4
0000e4 c006      	rjmp nx_b1_m1
0000e5 617f      	ori refresh, 0b00011111
0000e6 2388      	tst mode_tmp
0000e7 f011      	breq m_mdtmp_max_set
0000e8 958a      	dec mode_tmp
0000e9 c001      	rjmp nx_b1_m1
                 m_mdtmp_max_set:
0000ea e086      	ldi mode_tmp, 0x06
                 nx_b1_m1:
0000eb fcd1      	sbrc kbd_press, 1
0000ec c005      	rjmp nx_b2_m1
0000ed 617f      	ori refresh, 0b00011111
0000ee 9583      	inc mode_tmp
0000ef 3087      	cpi mode_tmp, 0x07
0000f0 f409      	brne nx_b2_m1
0000f1 2788      	clr mode_tmp
                 nx_b2_m1: ; Кнопки 0, 2 (справа верхняя и нижняя соответственно) - изменение выбранной величины
0000f2 fed0      	sbrs kbd_press, 0
0000f3 c003      	rjmp nx_b2_cont
0000f4 fed2      	sbrs kbd_press, 2
0000f5 c001      	rjmp nx_b2_cont
0000f6 c048      	rjmp nx_b3_m1
                 
                 nx_b2_cont:
0000f7 617f      	ori refresh, 0b00011111
0000f8 e0fe
0000f9 e7e2      	LAPZ corr_table	; Таблица адресов корректируемых величин (для удобства)
0000fa d04d      	rcall mt_offset
                 
0000fb 9105      	lpm tmp, Z+
0000fc 9114      	lpm tmp1, Z	; tmp1:tmp - адрес редактируемой величины
0000fd 2ff1      	mov ZH, tmp1
0000fe 2fe0      	mov ZL, tmp
                 
0000ff 94f8      	cli	; Отключаем прерывания, т.к. меняем время
000100 fcd0      	sbrc kbd_press, 0	; кнопка 1 - инкремент
000101 c002      	rjmp val_dec
000102 d16e      	rcall BCD_Inc	; Увеличиваем значение в памяти 
000103 c002      	rjmp val_check
                 val_dec:
000104 e909      	ldi tmp, 0x99
000105 d151      	rcall BCD_Add	; аналогично BCD_Dec
                 val_check:
000106 8100      	ld tmp, Z	; в tmp число после модификации
000107 930f      	push tmp
000108 3082      	cpi mode_tmp, 0x02
000109 f091      	breq sec_corr
00010a 3083      	cpi mode_tmp, 0x03
00010b f0c9      	breq day_corr
00010c 3086      	cpi mode_tmp, 0x06
00010d f181      	breq no_corr
                 hr_mn_mo:
                 ; для часов, минут и месяца
00010e 910f      	pop tmp
00010f 93ff      	push ZH
000110 93ef      	push ZL
000111 e0fe
000112 e8e0      	LAPZ corr_max_value
000113 d034      	rcall mt_offset
000114 9114      	lpm tmp1, Z	; следующее после максимального значение редактируемого параметра
000115 91ef      	pop ZL
000116 91ff      	pop ZH
000117 1701      	cp tmp, tmp1
000118 f128      	brlo no_corr	; коррекция не нужна
000119 2700      	clr tmp
00011a 8300      	st Z, tmp
00011b c022      	rjmp no_corr
                 sec_corr:
                 ; для секунд (тупо в лоб обнуляем)
00011c 2700      	clr tmp
00011d 8300      	st Z, tmp	; обнуляем число секунд
00011e 9731      	sbiw ZL, 0x01
00011f 8300      	st Z, tmp	; обнуляем чило десятых долей секунд
000120 d02f      	rcall Tmp_to_TCNT2	; сброс счетчика таймера
000121 e0f1
000122 e1e5      	LASZ sec_cnt
000123 8300      	st Z, tmp	; обнуляем счетчик интервала 0.1 сек
000124 c019      	rjmp no_corr
                 day_corr:
                 ; в стеке лежит скорректированное текущее число	
000125 93ff      	push ZH	; а ZH:ZL указывает на него в оперативной памяти
000126 93ef      	push ZL
000127 e0f1
000128 e0e5      	LASZ month
000129 8100      	ld tmp, Z	; месяц
00012a fd04      	sbrc tmp, 4
00012b 5006      	subi tmp, 6	; в tmp номер месяца в binary
00012c e0fd
00012d eee2      	LAPZ month_len
00012e 0fe0      	add ZL, tmp
00012f 2700      	clr tmp
000130 1ff0      	adc ZH, tmp
000131 9114      	lpm tmp1, Z	; теперь тут число дней в месяце
000132 91ef      	pop ZL
000133 91ff      	pop ZH
000134 910f      	pop tmp	; tmp - текущее число
000135 3000      	cpi tmp, 0x00
000136 f021      	breq day_cr1
000137 1701      	cp tmp, tmp1
000138 f028      	brlo no_corr
000139 e001      	ldi tmp, 0x01
00013a c002      	rjmp day_cr2
                 day_cr1:
00013b 2f01      	mov tmp, tmp1
00013c 950a      	dec tmp ; Здесь можно и без BCD_Inc, т.к. переполнения не будет
                 day_cr2:
00013d 8300      	st Z, tmp
                 no_corr:
00013e 9478      	sei	; Включаем прерывания обратно
                 nx_b3_m1:
00013f cf5d      	rjmp main
                 
                 m_kbd_mode2:
                 ; Обработчик кнопок режима 2
000140 fcd5      	sbrc kbd_press, 5
000141 c005      	rjmp nx_b_m2
000142 2733      	clr mode
000143 d38c      	rcall LCD_Clear
000144 d1ea      	rcall LCD_IdleOn
000145 9841
000146 0000      	LED_OFF
                 nx_b_m2:
000147 cf55      	rjmp main
                 
                 ; для экономии flash расчет смещения для mode_tmp вынесен в отдельную подпрограмму
                 mt_offset:
000148 938f      	push mode_tmp
000149 0f88      	lsl mode_tmp
00014a 0fe8      	add ZL, mode_tmp
00014b 2788      	clr mode_tmp
00014c 1ff8      	adc ZH, mode_tmp
00014d 918f      	pop mode_tmp
00014e 9508      	ret
                 ;-------- Конец основного цикла
                 
                 INT0r:
                 INT1r:
                 PCINT0r:
                 PCINT1r:
                 PCINT2r:
                 WDT:
                 T2_OVF:
                 T2_COMPB:
                 T1_CAPT:
                 T1_COMPA:
                 T1_COMPB:
                 T1_OVF:
                 T0_COMPA:
                 T0_COMPB:
                 T0_OVF:
                 SPI_STC:
                 USART_RX:
                 USART_UDRE:
                 USART_TX:
                 AnalogDC:
                 EE_RDY:
                 AnalogCMP:
                 TWI:
                 SPM_RDY:
00014f 9518      	reti
                 
                 Tmp_to_TCNT2:
000150 930f      	push tmp
000151 9300 00b2 	sts TCNT2, tmp
                 wl_tcnt_z:
000153 9100 00b6 	lds tmp, ASSR
000155 fd04      	sbrc tmp, 4
000156 cffc      	rjmp wl_tcnt_z	
000157 910f      	pop tmp
000158 9508      	ret
                 
                 T2_COMPA:		; обработчик прерывания от таймера
000159 930f      	push tmp
00015a b70f      	in tmp, SREG
00015b 930f      	push tmp
                 
00015c 93ff      	push ZH
00015d 93ef      	push ZL
                 
00015e b30e      	in tmp, GPIOR0
00015f 7003      	andi tmp, 0b00000011
000160 bb0e      	out GPIOR0, tmp			; сбрасываем флаги временных событий
                 
000161 d01d      	rcall KBD_Check ; Скан кнопок
                 	
000162 e0f1      	ldi ZH, high(sec_duration)
000163 e1e4      	ldi ZL, low(sec_duration)
000164 8100      	ld tmp, Z
000165 94a3      	inc sec_part_cnt
000166 16a0      	cp sec_part_cnt, tmp
000167 f471      	brne t2_end
                 
                 ; Прошла 0.1 секунды
000168 9af2      	sbi GPIOR0, 2	; Установили флаг
                 	
000169 d08e      	rcall Time_Date_Inc	; Инкремент даты-времени
00016a 24aa      	clr sec_part_cnt	; Очистили счетчик
                 ; Определяем, в каком режиме работают часы
00016b 3030      	cpi mode, 0x00
00016c f441      	brne tc2_mode1
                 ; Режим 0 - управление подсветкой
00016d 2099      	tst led_timer		; Работа с подсветкой
00016e f039      	breq t2_end
00016f 949a      	dec led_timer
000170 f429      	brne t2_end
000171 9841
000172 0000      	LED_OFF
000173 d1bb      	rcall LCD_IdleOn
000174 c001      	rjmp t2_end
                 
                 tc2_mode1:
                 ; Режим 1 - настройка даты, времени, корректировок
000175 0000      	nop
                 
                 t2_end:
000176 2322      	tst tmp2
000177 f009      	breq t2_out1
000178 952a      	dec tmp2
                 t2_out1:
000179 91ef      	pop ZL
00017a 91ff      	pop ZH
                 t2_out:
00017b 910f      	pop tmp
00017c bf0f      	out SREG, tmp
00017d 910f      	pop tmp
00017e 9518      	reti
                 
                 ;-------- Подпрограммы
                 KBD_Check:
00017f 930f      	push tmp
000180 9bf1      	sbis GPIOR0, 1
000181 c00c      	rjmp row0_active
                 ; row1 active
000182 b109      	in tmp, PIND
000183 7700      	andi tmp, 0b01110000
000184 9506      	lsr tmp
000185 2a80      	or kbd, tmp
000186 6c07      	ori tmp, 0b11000111
000187 2280      	and kbd, tmp
000188 9a5a      	sbi PORTD, 2
000189 0000      	nop
00018a 985b      	cbi PORTD, 3
00018b 0000      	nop
00018c 98f1      	cbi GPIOR0, 1
00018d c00e      	rjmp kbd_end
                 row0_active:
00018e b109      	in tmp, PIND
00018f 7700      	andi tmp, 0b01110000
000190 9506      	lsr tmp
000191 9506      	lsr tmp
000192 9506      	lsr tmp
000193 9506      	lsr tmp
000194 2a80      	or kbd, tmp
000195 6f08      	ori tmp, 0b11111000
000196 2280      	and kbd, tmp
000197 9a5b      	sbi PORTD, 3
000198 0000      	nop
000199 985a      	cbi PORTD, 2
00019a 0000      	nop
00019b 9af1      	sbi GPIOR0, 1
                 kbd_end:
00019c e30f      	ldi tmp, 0b00111111
00019d 2280      	and kbd, tmp
00019e 1680      	cp kbd, tmp
00019f f411      	brne kbd_ret
0001a0 e800      	ldi tmp, 0x80
0001a1 2a80      	or kbd,tmp	; установлен флаг нажатия (для удобства)
                 kbd_ret:
                 ; Здесь формируем kbd_press и kbd_release
0001a2 2d08      	mov tmp, kbd
0001a3 250c      	eor tmp, kbd_prev	; tmp - содержит 1-цы если кнопка поменяла свое состояние
0001a4 6c00      	ori tmp, 0b11000000	; лишнее отсекаем
0001a5 2cdc      	mov kbd_press, kbd_prev	; здесь 0 если кнопка нажата в прошлом такте
0001a6 2ce8      	mov kbd_release, kbd	; здесь 0 если кнопка нажата в этом такте
0001a7 22d0      	and kbd_press, tmp ; если кнопка поменяла свое значение и она нажата в этом такте, то в нужном бите будет 1 (кнопка нажата)
0001a8 22e0      	and kbd_release, tmp ; если кнопка была нажата в прошлом такте, но поменяла свое значение, то в нужном бите будет 1 (кнопка отпущена)
0001a9 94d0      	com kbd_press
0001aa 94e0      	com kbd_release
0001ab 2cc8      	mov kbd_prev, kbd	; настоящее значение теперь предыдущее
                 
0001ac 910f      	pop tmp
0001ad 9508      	ret
                 ;----------------------
                 LCD_DrawTime:
0001ae 93ff      	push ZH
0001af 93ef      	push ZL
0001b0 930f      	push tmp
0001b1 931f      	push tmp1
                 
0001b2 e002      	ldi tmp, 2
0001b3 2e60      	mov lcd_mx, tmp
0001b4 e003      	ldi tmp, 3
0001b5 2e70      	mov lcd_my, tmp
0001b6 ef1f      	ldi tmp1, 0xFF
                 
0001b7 ff71      	sbrs refresh, 1
0001b8 c011      	rjmp drw_clk_minute_skip
0001b9 7f7d      	andi refresh, 0b11111101
0001ba e0f1
0001bb e0e3      	LASZ hour	; рисуем часы
0001bc 8100      	ld tmp, Z
                 	
0001bd 924f      	push bkg_color
0001be 925f      	push frg_color
0001bf 3031      	cpi mode, 0x01
0001c0 f419      	brne drw_clk_hrd
0001c1 3080      	cpi mode_tmp, 0x00
0001c2 f409      	brne drw_clk_hrd
0001c3 d166      	rcall Exch_bkg_frg
                 drw_clk_hrd:
0001c4 d180      	rcall LCD_DrawBCD
0001c5 905f      	pop frg_color
0001c6 904f      	pop bkg_color
0001c7 e30a      	ldi tmp,':'
0001c8 d1cc      	rcall LCD_DrawChar
0001c9 c002      	rjmp drw_clk_minute
                 drw_clk_minute_skip:
0001ca e200      	ldi tmp, 32
0001cb 0e20      	add lcd_x, tmp
                 drw_clk_minute:
0001cc ff70      	sbrs refresh, 0
0001cd c011      	rjmp drw_clk_sec_skip
0001ce 7f7e      	andi refresh, 0b11111110
0001cf e100      	ldi tmp, 16
0001d0 0e20      	add lcd_x, tmp
0001d1 e0f1
0001d2 e0e2      	LASZ minute
0001d3 8100      	ld tmp, Z
0001d4 924f      	push bkg_color
0001d5 925f      	push frg_color
0001d6 3031      	cpi mode, 0x01
0001d7 f419      	brne drw_clk_mnd
0001d8 3081      	cpi mode_tmp, 0x01
0001d9 f409      	brne drw_clk_mnd
0001da d14f      	rcall Exch_bkg_frg
                 drw_clk_mnd:
0001db d169      	rcall LCD_DrawBCD
0001dc 905f      	pop frg_color
0001dd 904f      	pop bkg_color
0001de c002      	rjmp drw_clk_sec
                 drw_clk_sec_skip:
0001df e300      	ldi tmp, 32+16
0001e0 0e20      	add lcd_x, tmp
                 drw_clk_sec:	; рисуем секунды
0001e1 e001      	ldi tmp, 1
0001e2 2e60      	mov lcd_mx, tmp
0001e3 2e70      	mov lcd_my, tmp
0001e4 e00e      	ldi tmp, 14
0001e5 0e30      	add lcd_y, tmp
                 
0001e6 e0f1
0001e7 e0e1      	LASZ second
0001e8 8100      	ld tmp, Z
0001e9 924f      	push bkg_color
0001ea 925f      	push frg_color
0001eb 3031      	cpi mode, 0x01
0001ec f419      	brne drw_clk_sed
0001ed 3082      	cpi mode_tmp, 0x02
0001ee f409      	brne drw_clk_sed
0001ef d13a      	rcall Exch_bkg_frg
                 drw_clk_sed:
0001f0 d154      	rcall LCD_DrawBCD
0001f1 905f      	pop frg_color
0001f2 904f      	pop bkg_color
                 
0001f3 911f      	pop tmp1
0001f4 910f      	pop tmp
0001f5 91ef      	pop ZL
0001f6 91ff      	pop ZH
0001f7 9508      	ret
                 ;---------------------
                 Time_Date_Inc:
0001f8 93ff      	push ZH
0001f9 93ef      	push ZL
0001fa 930f      	push tmp
                 
0001fb e0f1      	ldi ZH, high(dsecond)
0001fc e0e0      	ldi ZL, low(dsecond)
0001fd d073      	rcall BCD_Inc	; доли секунды (задаются константой sec_part)
0001fe 8100      	ld tmp, Z
0001ff 3008      	cpi tmp, sec_part
000200 f009      	breq tdi_cnt1
000201 c051      	rjmp tdi_end
                 tdi_cnt1:
000202 2700      	clr tmp
000203 9af3      	sbi GPIOR0, 3
000204 9301      	st Z+, tmp		
000205 d06b      	rcall BCD_Inc	; секунды
000206 8100      	ld tmp, Z
000207 3600      	cpi tmp, 0x60
000208 f009      	breq tdi_cnt2
000209 c049      	rjmp tdi_end
                 tdi_cnt2:
00020a 2700      	clr tmp
00020b 9af4      	sbi GPIOR0, 4
00020c 6071      	ori refresh, 0b00000001
00020d 9301      	st Z+, tmp
00020e d062      	rcall BCD_Inc ; минуты
00020f 8100      	ld tmp, Z
000210 3600      	cpi tmp, 0x60
000211 f009      	breq tdi_cnt3
000212 c040      	rjmp tdi_end
                 tdi_cnt3:
000213 2700      	clr tmp
000214 9af5      	sbi GPIOR0, 5
000215 6072      	ori refresh, 0b00000010
000216 9301      	st Z+, tmp
000217 d059      	rcall BCD_Inc ; часы
000218 8100      	ld tmp, Z
000219 3204      	cpi tmp, 0x24
00021a f5c1      	brne tdi_end
00021b 2700      	clr tmp
00021c 9af6      	sbi GPIOR0, 6
00021d 6074      	ori refresh, 0b00000100
00021e 9301      	st Z+, tmp
                 	
00021f 93ff      	push ZH	; дни недели
000220 93ef      	push ZL
000221 e0f1      	ldi ZH, high(day_of_week)
000222 e0e8      	ldi ZL, low(day_of_week)
000223 8100      	ld tmp, Z
000224 9503      	inc tmp
000225 3007      	cpi tmp, 0x07
000226 f409      	brne tdi_cnt
000227 2700      	clr tmp
                 tdi_cnt:
000228 8300      	st Z, tmp
000229 91ef      	pop ZL
00022a 91ff      	pop ZH
                 
00022b d045      	rcall BCD_Inc ; дни
00022c 8100      	ld tmp, Z
                 ; получаем число дней в месяце в регистр tmp1
00022d 931f      	push tmp1
00022e 93ff      	push ZH
00022f 93ef      	push ZL
000230 930f      	push tmp
000231 e0f1      	ldi ZH, high(month)
000232 e0e5      	ldi ZL, low(month)
000233 8100      	ld tmp, Z	; в tmp - номер месяца в формате BCD
000234 fd04      	sbrc tmp, 4
000235 5006      	subi tmp, 6	; в tmp номер месяца в binary
000236 950a      	dec tmp
000237 e0fd      	ldi ZH, high(month_len<<1)
000238 eee2      	ldi ZL, low(month_len<<1)
000239 0fe0      	add ZL, tmp
00023a e000      	ldi tmp, 0x00
00023b 1ff0      	adc ZH, tmp
00023c 9114      	lpm tmp1, Z
00023d 910f      	pop tmp
00023e 91ef      	pop ZL
00023f 91ff      	pop ZH
000240 1701      	cp tmp, tmp1
000241 911f      	pop tmp1
000242 f481      	brne tdi_end
000243 e001      	ldi tmp, 0x01
000244 9af7      	sbi GPIOR0, 7
000245 6078      	ori refresh, 0b00001000
000246 9301      	st Z+, tmp
000247 d029      	rcall BCD_Inc ; месяцы
000248 8100      	ld tmp, Z
000249 3103      	cpi tmp, 0x13
00024a f441      	brne tdi_end
00024b 6170      	ori refresh, 0b00010000
00024c e001      	ldi tmp, 0x01
00024d 9301      	st Z+, tmp
00024e d022      	rcall BCD_Inc ; годы
00024f 9bf0      	sbis GPIOR0, 0
000250 c002      	rjmp tdi_end
000251 9631      	adiw ZL, 0x01
000252 d01e      	rcall BCD_Inc
                 tdi_end:
000253 910f      	pop tmp
000254 91ef      	pop ZL
000255 91ff      	pop ZH
000256 9508      	ret
                 ;----------------------
                 BCD_Add:
                 ; in: Z - указывает на BCD число в памяти
                 ;     tmp - второе слагаемое (BCD)
                 ; out: число по адресу Z
                 ; GPIOR0(bit0) - BCD carry
                 	
000257 931f      	push tmp1
000258 930f      	push tmp
                 
000259 98f0      	cbi GPIOR0, 0
00025a 8110      	ld tmp1, Z
00025b 0f10      	add tmp1, tmp
00025c f02d      	brhs lsd_correct
00025d 931f      	push tmp1
00025e 701f      	andi tmp1, 0x0F
00025f 301a      	cpi tmp1, 0x0A
000260 911f      	pop tmp1
000261 f010      	brlo msd
                 lsd_correct:
000262 e006      	ldi tmp, 0x06
000263 0f10      	add tmp1, tmp
                 msd:
000264 931f      	push tmp1
000265 7f10      	andi tmp1, 0xF0
000266 3a10      	cpi tmp1, 0xA0
000267 911f      	pop tmp1
000268 f020      	brlo bcd_end
000269 e600      	ldi tmp, 0x60
00026a 0f10      	add tmp1, tmp
00026b f408      	brcc bcd_end
00026c 9af0      	sbi GPIOR0, 0 
                 bcd_end:
00026d 8310      	st Z, tmp1
                 
00026e 910f      	pop tmp
00026f 911f      	pop tmp1	
000270 9508      	ret
                 ;-------------------
                 BCD_Inc:
                 ; in: Z - указывает на BCD число в памяти
                 ; out: число по адресу Z
000271 930f      	push tmp
000272 e001      	ldi tmp, 0x01
000273 dfe3      	rcall BCD_Add
000274 910f      	pop tmp
000275 9508      	ret
                 ;-------------------
                 Send_SPI:
                 SPI_Send:
000276 930f      	push tmp
000277 bd0e      	out SPDR, tmp
                 #ifndef DEBUG
                 spi_wait:
000278 b50d      	in tmp, SPSR
000279 ff07      	sbrs tmp, SPIF
00027a cffd      	rjmp spi_wait
                 #endif
00027b 910f      	pop tmp
00027c 9508      	ret	
                 ;--------------------
                 delay_10us:
00027d 930f      	push tmp
00027e e108      	ldi tmp, 24
                 
                 delay_loop:
00027f 950a      	dec tmp
000280 f7f1      	brne delay_loop
                 
000281 910f      	pop tmp
000282 9508      	ret
                 ;--------------------
                 delay_100ms:
                 #ifndef DEBUG
000283 e120      	ldi tmp2, 16
                 d100_w:
000284 3020      	cpi tmp2, 0x00
000285 f7f1      	brne d100_w
                 #endif
000286 9508      	ret
                 ;--------------------
                 delay_10ms:
                 #ifndef DEBUG
000287 e022      	ldi tmp2, 2
                 d10_w:
000288 3020      	cpi tmp2, 0x00
000289 f7f1      	brne d10_w
                 #endif
00028a 9508      	ret
                 ;--------------------
                 LCD_DrawDate:
00028b 93ff      	push ZH
00028c 93ef      	push ZL
00028d 930f      	push tmp
00028e 931f      	push tmp1
                 
00028f ef1f      	ldi tmp1, 0xFF
                 
000290 e001      	ldi tmp, 1
000291 2e60      	mov lcd_mx, tmp
000292 2e70      	mov lcd_my, tmp
                 
000293 e005      	ldi tmp, 0x05
000294 2e30      	mov lcd_y, tmp
                 
000295 e0f1
000296 e0e4      	LASZ day
                 
000297 ff72      	sbrs refresh, 2
000298 c04d      	rjmp drw_dat_end	; если не надо обновить день, то и "автоматом" не надо обновить год, месяц и день недели
                 
000299 7f7b      	andi refresh, 0b11111011
00029a 2e20      	mov lcd_x, tmp ; риусем число
00029b 8100      	ld tmp, Z
                 
00029c 924f      	push bkg_color
00029d 925f      	push frg_color
00029e 3031      	cpi mode, 0x01
00029f f419      	brne drw_dat_day
0002a0 3083      	cpi mode_tmp, 0x03
0002a1 f409      	brne drw_dat_day
0002a2 d087      	rcall Exch_bkg_frg
                 drw_dat_day:
0002a3 d0a1      	rcall LCD_DrawBCD
0002a4 905f      	pop frg_color
0002a5 904f      	pop bkg_color
                 
0002a6 924f      	push bkg_color
0002a7 925f      	push frg_color
0002a8 3031      	cpi mode, 0x01
0002a9 f419      	brne drw_dat_dayw
0002aa 3084      	cpi mode_tmp, 0x04
0002ab f409      	brne drw_dat_dayw
0002ac d07d      	rcall Exch_bkg_frg
                 drw_dat_dayw:
0002ad d03d      	rcall LCD_DrawDayOfWeek
0002ae 905f      	pop frg_color
0002af 904f      	pop bkg_color
                 
0002b0 e005      	ldi tmp, 0x05
0002b1 2e30      	mov lcd_y, tmp
0002b2 e0f1
0002b3 e0e4      	LASZ day
                 
0002b4 ff73      	sbrs refresh, 3
0002b5 c030      	rjmp drw_dat_end
                 
0002b6 7f77      	andi refresh, 0b11110111
0002b7 e10d      	ldi tmp, 0x05+(0x08*3)
0002b8 2e20      	mov lcd_x, tmp
                 
0002b9 9631      	adiw ZL, 0x01
0002ba 9101      	ld tmp, Z+
0002bb fd04      	sbrc tmp, 4
0002bc 5006      	subi tmp, 6	; в tmp номер месяца в binary
0002bd 0f00      	lsl tmp
0002be 0f00      	lsl tmp
0002bf 93ff      	push ZH
0002c0 93ef      	push ZL
0002c1 e0fd
0002c2 eeee      	LAPZ month_names
0002c3 0fe0      	add ZL, tmp
0002c4 e000      	ldi tmp, 0x00
0002c5 1ff0      	adc ZH, tmp	; Z указывает на название месяца
                 
0002c6 924f      	push bkg_color
0002c7 925f      	push frg_color
0002c8 3031      	cpi mode, 0x01
0002c9 f419      	brne drw_dat_mon
0002ca 3085      	cpi mode_tmp, 0x05
0002cb f409      	brne drw_dat_mon
0002cc d05d      	rcall Exch_bkg_frg
                 drw_dat_mon:
0002cd d08d      	rcall LCD_DrawStringPM
0002ce 905f      	pop frg_color
0002cf 904f      	pop bkg_color
0002d0 91ef      	pop ZL
0002d1 91ff      	pop ZH
                 
0002d2 ff74      	sbrs refresh, 4
0002d3 c012      	rjmp drw_dat_end
                 
0002d4 7e7f      	andi refresh, 0b11101111
0002d5 e30d      	ldi tmp, 0x05+(0x08*7)
0002d6 2e20      	mov lcd_x, tmp
0002d7 9631      	adiw ZL, 0x01
0002d8 8100      	ld tmp, Z
0002d9 924f      	push bkg_color
0002da 925f      	push frg_color
0002db 3031      	cpi mode, 0x01
0002dc f419      	brne drw_dat_year
0002dd 3086      	cpi mode_tmp, 0x06
0002de f409      	brne drw_dat_year
0002df d04a      	rcall Exch_bkg_frg
                 drw_dat_year:
0002e0 d064      	rcall LCD_DrawBCD
0002e1 9731      	sbiw ZL, 0x01
0002e2 8100      	ld tmp, Z
0002e3 d061      	rcall LCD_DrawBCD
0002e4 905f      	pop frg_color
0002e5 904f      	pop bkg_color
                 drw_dat_end:
0002e6 911f      	pop tmp1
0002e7 910f      	pop tmp
0002e8 91ef      	pop ZL
0002e9 91ff      	pop ZH
0002ea 9508      	ret
                 ;--------------------
                 LCD_DrawDayOfWeek:
0002eb 931f      	push tmp1
0002ec e0f1
0002ed e0e8      	LASZ day_of_week 	; Рисуем день недели
0002ee 8100      	ld tmp, Z
                 
0002ef 2711      	clr tmp1
0002f0 e0fe
0002f1 e6ea      	LAPZ week_day_center_coo
0002f2 0fe0      	add ZL, tmp
0002f3 1ff1      	adc ZH, tmp1
0002f4 9114      	lpm tmp1, Z
                 
0002f5 2e21      	mov lcd_x, tmp1
0002f6 e31c      	ldi tmp1, 60
0002f7 2e31      	mov lcd_y, tmp1
                 
0002f8 e0fe
0002f9 e5ec      	LAPZ week_day_table
0002fa 0f00      	lsl tmp
0002fb 0fe0      	add ZL, tmp
0002fc 2700      	clr tmp
0002fd 1ff0      	adc ZH, tmp
0002fe 9105      	lpm tmp, Z+
0002ff 9114      	lpm tmp1, Z
000300 2fe0      	mov ZL, tmp
000301 2ff1      	mov ZH, tmp1
000302 d058      	rcall LCD_DrawStringPM
000303 911f      	pop tmp1
000304 9508      	ret
                 ;--------------------
                 .include "Sie_c60.inc"	; Siemens C60 routines
                 
                 
                 LCD_DrawBar:
                 ;in: lcd_x, lcd_y - координаты левого верхнего угла
                 ; tmp, tmp1 - ширина и высота
000305 930f      	push tmp
000306 931f      	push tmp1
000307 923f      	push lcd_y
000308 934f      	push r20
000309 935f      	push r21
                 
00030a 2f40      	mov r20, tmp
00030b 2f51      	mov r21, tmp1
                 
00030c 9829
00030d 0000      	CS_LOW
                 dr_bar_col:
00030e d0c7      	rcall LCD_GotoXY
                 
00030f 9828
000310 0000      	CMD_SET
000311 e20c      	ldi tmp, 0x2C
000312 df63      	rcall Send_SPI
                 
000313 9a28
000314 0000      	DATA_SET
000315 2d05      	mov tmp, frg_color
000316 934f      	push r20
                 dr_bar_line:
000317 df5e      	rcall Send_SPI	
000318 954a      	dec r20
000319 f7e9      	brne dr_bar_line
00031a 914f      	pop r20
                 
00031b 9433      	inc lcd_y
00031c 955a      	dec r21
00031d f781      	brne dr_bar_col
                 
00031e 9a29
00031f 0000      	CS_HIGH
                 
000320 915f      	pop r21
000321 914f      	pop r20
000322 903f      	pop lcd_y
000323 910f      	pop tmp
000324 911f      	pop tmp1
000325 9508      	ret
                 ;--------------------
                 LCD_DrawBkgBar:
                 ; in: то же что и DrawBar
000326 d003      	rcall Exch_bkg_frg
000327 dfdd      	rcall LCD_DrawBar
000328 d001      	rcall Exch_bkg_frg
000329 9508      	ret
                 ;--------------------
                 Exch_bkg_frg:
00032a 924f      	push bkg_color
00032b 925f      	push frg_color
00032c 904f      	pop bkg_color
00032d 905f      	pop frg_color
00032e 9508      	ret	
                 ;--------------------
                 LCD_IdleOn:
00032f 930f      	push tmp
000330 9829
000331 0000      	CS_LOW
000332 9828
000333 0000      	CMD_SET
000334 e309      	ldi tmp, 0x39
000335 df40      	rcall Send_SPI
000336 9a29
000337 0000      	CS_HIGH
000338 910f      	pop tmp
000339 9508      	ret
                 ;--------------------
                 LCD_IdleOff:
00033a 930f      	push tmp
00033b 9829
00033c 0000      	CS_LOW
00033d 9828
00033e 0000      	CMD_SET
00033f e308      	ldi tmp, 0x38
000340 df35      	rcall Send_SPI
000341 9a29
000342 0000      	CS_HIGH
000343 910f      	pop tmp
000344 9508      	ret
                 ;--------------------
                 LCD_DrawBCD:
                 ;in: tmp - число
000345 930f      	push tmp
000346 934f      	push r20
                 
000347 2d46      	mov r20, lcd_mx
000348 0f44      	lsl r20
000349 0f44      	lsl r20
00034a 0f44      	lsl r20
                 
00034b 930f      	push tmp
00034c 9506      	lsr tmp
00034d 9506      	lsr tmp
00034e 9506      	lsr tmp
00034f 9506      	lsr tmp
000350 5d00      	subi tmp, 0xD0 ; +0x30
000351 d043      	rcall LCD_DrawChar
000352 0e24      	add lcd_x, r20
000353 910f      	pop tmp
000354 700f      	andi tmp, 0x0F
000355 5d00      	subi tmp, 0xD0
000356 d03e      	rcall LCD_DrawChar
000357 0e24      	add lcd_x, r20
                 
000358 914f      	pop r20
000359 910f      	pop tmp
00035a 9508      	ret
                 ;--------------------
                 LCD_DrawStringPM:
                 ; in: Z - строка во flash ASCIIZ
00035b 930f      	push tmp
00035c 93ff      	push ZH
00035d 93ef      	push ZL
00035e 934f      	push r20
                 
00035f 2d46      	mov r20, lcd_mx ; инкремент по X
000360 0f44      	lsl r20
000361 0f44      	lsl r20
000362 0f44      	lsl r20
                 drst:
000363 9105      	lpm tmp, Z+
000364 2300      	tst tmp
000365 f031      	breq drst_end
000366 3800      	cpi tmp, 0x80
000367 f008      	brlo dr_ansi
000368 5400      	subi tmp, 0x40	; Перевод из Win-1251 в CP866 для заглавных букв (а других русских и нет тут :-)
                 dr_ansi:
000369 d02b      	rcall LCD_DrawChar
00036a 0e24      	add lcd_x, r20
00036b cff7      	rjmp drst
                 drst_end:
00036c 914f      	pop r20
00036d 91ef      	pop ZL
00036e 91ff      	pop ZH
00036f 910f      	pop tmp
000370 9508      	ret
                 ;--------------------
                 LCD_DrawByte:
                 ; in: tmp - байт
000371 930f      	push tmp
000372 934f      	push r20
                 
000373 2d46      	mov r20, lcd_mx
000374 0f44      	lsl r20
000375 0f44      	lsl r20
000376 0f44      	lsl r20
                 
000377 930f      	push tmp
000378 9502      	swap tmp
000379 700f      	andi tmp, 0x0F
00037a 300a      	cpi tmp, 0x0A
00037b f018      	brlo dr_b09
00037c 5c09      	subi tmp, (0x100 - 'A' + 0x0A)
00037d d017      	rcall LCD_DrawChar
00037e c002      	rjmp dr_b_lnibble
                 dr_b09:
00037f 5d00      	subi tmp, 0xD0
000380 d014      	rcall LCD_DrawChar
                 dr_b_lnibble:
000381 0e24      	add lcd_x, r20
000382 910f      	pop tmp
000383 700f      	andi tmp, 0x0F
000384 300a      	cpi tmp, 0x0A
000385 f018      	brlo dr_b09_1
000386 5c09      	subi tmp, (0x100 - 'A' + 0x0A)
000387 d00d      	rcall LCD_DrawChar
000388 c002      	rjmp dr_b_end
                 dr_b09_1:
000389 5d00      	subi tmp, 0xD0
00038a d00a      	rcall LCD_DrawChar
                 dr_b_end:
00038b 0e24      	add lcd_x, r20
00038c 914f      	pop r20
00038d 910f      	pop tmp
00038e 9508      	ret
                 ;--------------------
                 LCD_DrawWord:
                 ; tmp:tmp1 - слово
00038f 930f      	push tmp
                 
000390 dfe0      	rcall LCD_DrawByte
000391 2f01      	mov tmp, tmp1
000392 dfde      	rcall LCD_DrawByte
                 
000393 910f      	pop tmp
000394 9508      	ret
                 ;--------------------
                 LCD_DrawChar:
                 ; in: tmp - ASCII код символа
                 ;	lcd_x, lcd_y - координаты
                 ; lcd_mx - масштаб по x
                 ; lcd_my - масштаб по y
                 
                 ;	cpi tmp, 0x20
                 ;	brlo drw_chr_end
                 	
000395 930f      	push tmp
000396 931f      	push tmp1
000397 93ff      	push ZH
000398 93ef      	push ZL
000399 922f      	push lcd_x
00039a 923f      	push lcd_y
00039b 934f      	push r20	; индекс по y
00039c 935f      	push r21	; индекс по x
                 	
00039d e0f9      	ldi ZH, high(font8x8<<1)
00039e eee2      	ldi ZL, low(font8x8<<1)
00039f 5200      	subi tmp, 0x20
0003a0 2711      	clr tmp1 ; tmp1:tmp * 8
0003a1 1f00      	rol tmp
0003a2 1f11      	rol tmp1
0003a3 1f00      	rol tmp
0003a4 1f11      	rol tmp1
0003a5 1f00      	rol tmp
0003a6 1f11      	rol tmp1 ; tmp1:tmp - смещение
0003a7 0fe0      	add ZL, tmp
0003a8 1ff1      	adc ZH, tmp1
                 
0003a9 e048      	ldi r20, 0x08
0003aa 9829
0003ab 0000      	CS_LOW
                 cdrw:
0003ac 9115      	lpm tmp1, Z+
0003ad 927f      	push lcd_my
                 mydrw:
0003ae d027      	rcall LCD_GotoXY
0003af 9828
0003b0 0000      	CMD_SET
0003b1 e20c      	ldi tmp, 0x2C
0003b2 dec3      	rcall Send_SPI
0003b3 9a28
0003b4 0000      	DATA_SET
0003b5 e058      	ldi r21, 0x08
0003b6 931f      	push tmp1
                 ldrw:
0003b7 ff17      	sbrs tmp1, 7
0003b8 c002      	rjmp drw_bkg
0003b9 2d05      	mov tmp, frg_color
0003ba c001      	rjmp drw
                 drw_bkg:
0003bb 2d04      	mov tmp, bkg_color
                 drw:
0003bc 926f      	push lcd_mx
                 mxdrw:
0003bd deb8      	rcall Send_SPI
0003be 946a      	dec lcd_mx
0003bf f7e9      	brne mxdrw
0003c0 906f      	pop lcd_mx
                 
0003c1 0f11      	lsl tmp1
0003c2 955a      	dec r21
0003c3 f799      	brne ldrw
0003c4 911f      	pop tmp1
0003c5 9433      	inc lcd_y
0003c6 947a      	dec lcd_my
0003c7 f731      	brne mydrw
0003c8 907f      	pop lcd_my
0003c9 954a      	dec r20
0003ca f709      	brne cdrw	
                 
0003cb 9a29
0003cc 0000      	CS_HIGH	
                 
0003cd 915f      	pop r21
0003ce 914f      	pop r20
0003cf 903f      	pop lcd_y
0003d0 902f      	pop lcd_x
0003d1 91ef      	pop ZL
0003d2 91ff      	pop ZH
0003d3 911f      	pop tmp1
0003d4 910f      	pop tmp	
                 drw_chr_end:
0003d5 9508      	ret
                 ;--------------------
                 LCD_GotoXY:
                 ; вход lcd_x, lcd_y
0003d6 930f      	push tmp
0003d7 9828
0003d8 0000      	CMD_SET
0003d9 e20a      	ldi tmp, 0x2A
0003da de9b      	rcall Send_SPI
0003db 9a28
0003dc 0000      	DATA_SET
0003dd 2d02      	mov tmp, lcd_x
0003de de97      	rcall Send_SPI
0003df e604      	ldi tmp, 100
0003e0 de95      	rcall Send_SPI
0003e1 9828
0003e2 0000      	CMD_SET
0003e3 e20b      	ldi tmp, 0x2B
0003e4 de91      	rcall Send_SPI
0003e5 9a28
0003e6 0000      	DATA_SET
0003e7 2d03      	mov tmp, lcd_y
0003e8 9503      	inc tmp
0003e9 de8c      	rcall Send_SPI
0003ea e500      	ldi tmp, 80
0003eb de8a      	rcall Send_SPI
0003ec 910f      	pop tmp
0003ed 9508      	ret
                 ;--------------------
                 LCD_C60_Init:
0003ee 930f      	push tmp
                 ;; LCD RESET	
0003ef 9840
0003f0 0000      	LCD_RESET_LOW
0003f1 de91      	rcall delay_100ms
0003f2 9a40
0003f3 0000      	LCD_RESET_HIGH
0003f4 e005      	ldi tmp, 0x05
                 c60i_c1:
0003f5 de8d      	rcall delay_100ms
0003f6 950a      	dec tmp
0003f7 f7e9      	brne c60i_c1
0003f8 9a29
0003f9 0000      	CS_HIGH
0003fa de82      	rcall delay_10us
0003fb 9829
0003fc 0000      	CS_LOW
                 
                 ;   Send_to_lcd(CMD,0x01); //reset sw
                 ;   DelayMs(50);
                 ;   Send_to_lcd(CMD,0xc6); //initial escape
                 ;   DelayMs(40);
                 ;   Send_to_lcd(CMD,0xb9); //Refresh set
                 ;   Send_to_lcd(DAT,0x00);
0003fd 9828
0003fe 0000      	CMD_SET
0003ff e001      	ldi tmp, 0x01
000400 de75      	rcall Send_SPI
000401 e005      	ldi tmp, 0x05
                 c60i_c2:
000402 de84      	rcall delay_10ms
000403 950a      	dec tmp
000404 f7e9      	brne c60i_c2
000405 ec06      	ldi tmp, 0xC6
000406 de6f      	rcall Send_SPI
000407 de7f      	rcall delay_10ms
000408 de7e      	rcall delay_10ms
000409 de7d      	rcall delay_10ms
00040a de7c      	rcall delay_10ms
00040b eb09      	ldi tmp, 0xB9
00040c de69      	rcall Send_SPI
00040d 9a28
00040e 0000      	DATA_SET
00040f e000      	ldi tmp, 0x00
000410 de65      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb6); //Display control
                 ;   Send_to_lcd(DAT,0x80); //
                 ;   Send_to_lcd(DAT,0x04); //
                 ;   Send_to_lcd(DAT,0x8a); //
                 ;   Send_to_lcd(DAT,0x54); //
                 ;   Send_to_lcd(DAT,0x45); //
                 ;   Send_to_lcd(DAT,0x52); //
                 ;   Send_to_lcd(DAT,0x43); //
000411 9828
000412 0000      	CMD_SET
000413 eb06      	ldi tmp, 0xB6
000414 de61      	rcall Send_SPI
000415 9a28
000416 0000      	DATA_SET
000417 e800      	ldi tmp, 0x80
000418 de5d      	rcall Send_SPI
000419 e004      	ldi tmp, 0x04
00041a de5b      	rcall Send_SPI
00041b e80a      	ldi tmp, 0x8A
00041c de59      	rcall Send_SPI
00041d e504      	ldi tmp, 0x54
00041e de57      	rcall Send_SPI
00041f e405      	ldi tmp, 0x45
000420 de55      	rcall Send_SPI
000421 e502      	ldi tmp, 0x52
000422 de53      	rcall Send_SPI
000423 e403      	ldi tmp, 0x43
000424 de51      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb3); //Gray scale position set 0
                 ;   Send_to_lcd(DAT,0x02); //
                 ;   Send_to_lcd(DAT,0x0a); //
                 ;   Send_to_lcd(DAT,0x15); //
                 ;   Send_to_lcd(DAT,0x1f); //
                 ;   Send_to_lcd(DAT,0x28); //
                 ;   Send_to_lcd(DAT,0x30); //
                 ;   Send_to_lcd(DAT,0x37); //
                 ;   Send_to_lcd(DAT,0x3f); //
                 ;   Send_to_lcd(DAT,0x47); //
                 ;   Send_to_lcd(DAT,0x4c); //
                 ;   Send_to_lcd(DAT,0x54); //
                 ;   Send_to_lcd(DAT,0x65); //
                 ;   Send_to_lcd(DAT,0x75); //
                 ;   Send_to_lcd(DAT,0x80); //
                 ;   Send_to_lcd(DAT,0x85); //
000425 9828
000426 0000      	CMD_SET
000427 eb03      	ldi tmp, 0xb3
000428 de4d      	rcall Send_SPI
000429 9a28
00042a 0000      	DATA_SET
00042b e002      	ldi tmp, 0x02
00042c de49      	rcall Send_SPI
00042d e00a      	ldi tmp, 0x0a
00042e de47      	rcall Send_SPI
00042f e105      	ldi tmp, 0x15
000430 de45      	rcall Send_SPI
000431 e10f      	ldi tmp, 0x1f
000432 de43      	rcall Send_SPI
000433 e208      	ldi tmp, 0x28
000434 de41      	rcall Send_SPI
000435 e300      	ldi tmp, 0x30
000436 de3f      	rcall Send_SPI
000437 e307      	ldi tmp, 0x37
000438 de3d      	rcall Send_SPI
000439 e30f      	ldi tmp, 0x3F
00043a de3b      	rcall Send_SPI
00043b e407      	ldi tmp, 0x47
00043c de39      	rcall Send_SPI
00043d e40c      	ldi tmp, 0x4c
00043e de37      	rcall Send_SPI
00043f e504      	ldi tmp, 0x54
000440 de35      	rcall Send_SPI
000441 e605      	ldi tmp, 0x65
000442 de33      	rcall Send_SPI
000443 e705      	ldi tmp, 0x75
000444 de31      	rcall Send_SPI
000445 e800      	ldi tmp, 0x80
000446 de2f      	rcall Send_SPI
000447 e805      	ldi tmp, 0x85
000448 de2d      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb5); //Gamma curve
                 ;   Send_to_lcd(DAT,0x01); //
000449 9828
00044a 0000      	CMD_SET
00044b eb05      	ldi tmp, 0xB5
00044c de29      	rcall Send_SPI
00044d 9a28
00044e 0000      	DATA_SET
00044f e001      	ldi tmp, 0x01
000450 de25      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb7); //Temperature gradient
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
000451 9828
000452 0000      	CMD_SET
000453 eb07      	ldi tmp, 0xB7
000454 de21      	rcall Send_SPI
000455 9a28
000456 0000      	DATA_SET
000457 e000      	ldi tmp, 0x00
000458 e01f      	ldi tmp1, 15
                 c60i_c3:
000459 de1c      	rcall Send_SPI
00045a 951a      	dec tmp1
00045b f7e9      	brne c60i_c3
                 ;   Send_to_lcd(CMD,0xbd); //Common driver output select
                 ;   Send_to_lcd(DAT,0x00); //
00045c 9828
00045d 0000      	CMD_SET
00045e eb0d      	ldi tmp, 0xBD
00045f de16      	rcall Send_SPI
000460 9a28
000461 0000      	DATA_SET
000462 e000      	ldi tmp, 0x00
000463 de12      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x36); //Memory access control
                 ;   Send_to_lcd(DAT,0x48); //
000464 9828
000465 0000      	CMD_SET
000466 e306      	ldi tmp, 0x36
000467 de0e      	rcall Send_SPI
000468 9a28
000469 0000      	DATA_SET
00046a e408      	ldi tmp, 0b01001000
00046b de0a      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x2d); //Colour set
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x03); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x07); //
                 ;   Send_to_lcd(DAT,0x09); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0d); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x03); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x07); //
                 ;   Send_to_lcd(DAT,0x09); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0d); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 	
00046c 9828
00046d 0000      	CMD_SET
00046e e20d      	ldi tmp, 0x2D
00046f de06      	rcall Send_SPI
000470 9a28
000471 0000      	DATA_SET
000472 e000      	ldi tmp, 0x00
000473 de02      	rcall Send_SPI
000474 e003      	ldi tmp, 0x03
000475 de00      	rcall Send_SPI
000476 e005      	ldi tmp, 0x05
000477 ddfe      	rcall Send_SPI
000478 e007      	ldi tmp, 0x07
000479 ddfc      	rcall Send_SPI
00047a e009      	ldi tmp, 0x09
00047b ddfa      	rcall Send_SPI
00047c e00b      	ldi tmp, 0x0b
00047d ddf8      	rcall Send_SPI
00047e e00d      	ldi tmp, 0x0d
00047f ddf6      	rcall Send_SPI
000480 e00f      	ldi tmp, 0x0f
000481 ddf4      	rcall Send_SPI
000482 e000      	ldi tmp, 0x00
000483 ddf2      	rcall Send_SPI
000484 e003      	ldi tmp, 0x03
000485 ddf0      	rcall Send_SPI
000486 e005      	ldi tmp, 0x05
000487 ddee      	rcall Send_SPI
000488 e007      	ldi tmp, 0x07
000489 ddec      	rcall Send_SPI
00048a e009      	ldi tmp, 0x09
00048b ddea      	rcall Send_SPI
00048c e00b      	ldi tmp, 0x0b
00048d dde8      	rcall Send_SPI
00048e e00d      	ldi tmp, 0x0d
00048f dde6      	rcall Send_SPI
000490 e00f      	ldi tmp, 0x0f
000491 dde4      	rcall Send_SPI
                 
000492 e000      	ldi tmp, 0x00
000493 dde2      	rcall Send_SPI
000494 e005      	ldi tmp, 0x05
000495 dde0      	rcall Send_SPI
000496 e00b      	ldi tmp, 0x0b
000497 ddde      	rcall Send_SPI
000498 e00f      	ldi tmp, 0x0f
000499 dddc      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xba); //Voltage control
                 ;   Send_to_lcd(DAT,0x2f); //
                 ;   Send_to_lcd(DAT,0x03); //
00049a 9828
00049b 0000      	CMD_SET
00049c eb0a      	ldi tmp, 0xBA
00049d ddd8      	rcall Send_SPI
00049e 9a28
00049f 0000      	DATA_SET
0004a0 e20f      	ldi tmp, 0x2F
0004a1 ddd4      	rcall Send_SPI
0004a2 e003      	ldi tmp, 0x03
0004a3 ddd2      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x25); //Send_to_lcd contrast
                 ;   Send_to_lcd(DAT,0x64); // Стоит поиграться со значением контраста, у меня в примере контраст 100, если больше то на дисплее ничего нет
                 ;   Send_to_lcd(DAT,0x61); //me контраст одинаковый для 0x6e и 0xee
0004a4 9828
0004a5 0000      	CMD_SET
0004a6 e205      	ldi tmp, 0x25
0004a7 ddce      	rcall Send_SPI
0004a8 9a28
0004a9 0000      	DATA_SET
0004aa e601      	ldi tmp, 0x61
0004ab ddca      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xbe); //Power control
                 ;   Send_to_lcd(DAT,0x59); // me
                 ;   Send_to_lcd(DAT,0x58); // У меня пишется в этот регистр значение 0х58
0004ac 9828
0004ad 0000      	CMD_SET
0004ae eb0e      	ldi tmp, 0xBE
0004af ddc6      	rcall Send_SPI
0004b0 9a28
0004b1 0000      	DATA_SET
0004b2 e508      	ldi tmp, 0x58
0004b3 ddc2      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x3a); //interface pixel format
                 ;   Send_to_lcd(DAT,0x02); //me 8-и битный цвет
                 ;   Send_to_lcd(DAT,0x03); //12-и битный цвет
0004b4 9828
0004b5 0000      	CMD_SET
0004b6 e30a      	ldi tmp, 0x3A
0004b7 ddbe      	rcall Send_SPI
0004b8 9a28
0004b9 0000      	DATA_SET
0004ba e002      	ldi tmp, 0x02
0004bb ddba      	rcall Send_SPI
0004bc 9828
0004bd 0000      	CMD_SET
0004be e201      	ldi tmp, 0x21	// Inverse colors
0004bf ddb6      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x03); //Booster voltage ON
                 ;   DelayMs(40);
0004c0 e003      	ldi tmp, 0x03
0004c1 ddb4      	rcall Send_SPI
0004c2 ddc4      	rcall delay_10ms
0004c3 ddc3      	rcall delay_10ms
0004c4 ddc2      	rcall delay_10ms
0004c5 ddc1      	rcall delay_10ms
                 ;   Send_to_lcd(CMD,0x11); //sleep out
                 ;   DelayMs(20); //Перед включением ждем 20 миллисекунд 
0004c6 e101      	ldi tmp, 0x11
0004c7 ddae      	rcall Send_SPI
0004c8 ddbe      	rcall delay_10ms
0004c9 ddbd      	rcall delay_10ms
                 ;   Send_to_lcd(CMD,0x29); //Display ON
0004ca e209      	ldi tmp, 0x29
0004cb ddaa      	rcall Send_SPI
                 
0004cc 9a29
0004cd 0000      	CS_HIGH
0004ce 910f      	pop tmp
0004cf 9508      	ret
                 
                 ;--------------------
                 LCD_Clear:
0004d0 930f      	push tmp
0004d1 931f      	push tmp1	
0004d2 922f      	push lcd_x
0004d3 923f      	push lcd_y
0004d4 9829
0004d5 0000      	CS_LOW
0004d6 2700      	clr tmp
0004d7 2e20      	mov lcd_x, tmp
0004d8 2e30      	mov lcd_y, tmp
0004d9 defc      	rcall LCD_GotoXY
                 
0004da 9828
0004db 0000      	CMD_SET
0004dc e20c      	ldi tmp, 0x2C
0004dd dd98      	rcall Send_SPI
0004de 9a28
0004df 0000      	DATA_SET
0004e0 2d04      	mov tmp, bkg_color
                 		
0004e1 e510      	ldi tmp1, 80
                 cclr:
0004e2 931f      	push tmp1
0004e3 e615      	ldi tmp1, 101
                 lclr:
0004e4 dd91      	rcall Send_SPI
0004e5 951a      	dec tmp1
0004e6 f7e9      	brne lclr
0004e7 911f      	pop tmp1
0004e8 951a      	dec tmp1
0004e9 f7c1      	brne cclr
                 
0004ea 9a29
0004eb 0000      	CS_HIGH
0004ec 903f      	pop lcd_y
0004ed 902f      	pop lcd_x
0004ee 911f      	pop tmp1
0004ef 910f      	pop tmp
0004f0 9508      	ret
                 
                 
                 
                 ;-------- Данные
                 
                 .include "CP866.inc"	; 8x8 font
                 
                 ; Font: CP866
                 font8x8:
                 ;.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;.db	0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E	; (.)
                 ;.db	0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E	; (.)
                 ;.db	0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00	; (.)
                 ;.db	0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00	; (.)
                 ;.db	0x38, 0x7C, 0x38, 0xFE, 0xFE, 0xD6, 0x10, 0x38	; (.)
                 ;.db	0x10, 0x38, 0x7C, 0xFE, 0xFE, 0x7C, 0x10, 0x38	; (.)
                 ;.db	0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00	; (.)
                 ;.db	0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF	; (.)
                 ;.db	0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00	; (.)
                 ;.db	0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF	; (.)
                 ;.db	0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78	; (.)
                 ;.db	0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18	; (.)
                 ;.db	0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0	; (.)
                 ;.db	0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0	; (.)
                 ;.db	0x18, 0xDB, 0x3C, 0xE7, 0xE7, 0x3C, 0xDB, 0x18	; (.)
                 ;.db	0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00	; (.)
                 ;.db	0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00	; (.)
                 ;.db	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18	; (.)
                 ;.db	0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00	; (.)
                 ;.db	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00	; (.)
                 ;.db	0x3E, 0x61, 0x3C, 0x66, 0x66, 0x3C, 0x86, 0x7C	; (.)
                 ;.db	0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00	; (.)
                 ;.db	0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF	; (.)
                 ;.db	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00	; (.)
                 ;.db	0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00	; (.)
                 ;.db	0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00	; (.)
                 ;.db	0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00	; (.)
0004f1 0000
0004f2 0000
0004f3 0000
0004f4 0000      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; ( )
0004f5 3c18
0004f6 183c
0004f7 0018
0004f8 0018      .db	0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00	; (!)
0004f9 6666
0004fa 0024
0004fb 0000
0004fc 0000      .db	0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00	; (")
0004fd 6c6c
0004fe 6cfe
0004ff 6cfe
000500 006c      .db	0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00	; (#)
000501 3e18
000502 3c60
000503 7c06
000504 0018      .db	0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00	; ($)
000505 c600
000506 18cc
000507 6630
000508 00c6      .db	0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00	; (%)
000509 6c38
00050a 7638
00050b ccdc
00050c 0076      .db	0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00	; (&)
00050d 1818
00050e 0030
00050f 0000
000510 0000      .db	0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00	; (')
000511 180c
000512 3030
000513 1830
000514 000c      .db	0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00	; (()
000515 1830
000516 0c0c
000517 180c
000518 0030      .db	0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00	; ())
000519 6600
00051a ff3c
00051b 663c
00051c 0000      .db	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00	; (*)
00051d 1800
00051e 7e18
00051f 1818
000520 0000      .db	0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00	; (+)
000521 0000
000522 0000
000523 1800
000524 3018      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30	; (,)
000525 0000
000526 7e00
000527 0000
000528 0000      .db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00	; (-)
000529 0000
00052a 0000
00052b 1800
00052c 0018      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00	; (.)
00052d 0c06
00052e 3018
00052f c060
000530 0080      .db	0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00	; (/)
000531 6c38
000532 d6c6
000533 6cc6
000534 0038      .db	0x38, 0x6C, 0xC6, 0xD6, 0xC6, 0x6C, 0x38, 0x00	; (0)
000535 3818
000536 1818
000537 1818
000538 007e      .db	0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00	; (1)
000539 c67c
00053a 1c06
00053b 6630
00053c 00fe      .db	0x7C, 0xC6, 0x06, 0x1C, 0x30, 0x66, 0xFE, 0x00	; (2)
00053d c67c
00053e 3c06
00053f c606
000540 007c      .db	0x7C, 0xC6, 0x06, 0x3C, 0x06, 0xC6, 0x7C, 0x00	; (3)
000541 3c1c
000542 cc6c
000543 0cfe
000544 001e      .db	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00	; (4)
000545 c0fe
000546 fcc0
000547 c606
000548 007c      .db	0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0xC6, 0x7C, 0x00	; (5)
000549 6038
00054a fcc0
00054b c6c6
00054c 007c      .db	0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00	; (6)
00054d c6fe
00054e 180c
00054f 3030
000550 0030      .db	0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00	; (7)
000551 c67c
000552 7cc6
000553 c6c6
000554 007c      .db	0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00	; (8)
000555 c67c
000556 7ec6
000557 0c06
000558 0078      .db	0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00	; (9)
000559 1800
00055a 0018
00055b 1800
00055c 0018      .db	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00	; (:)
00055d 1800
00055e 0018
00055f 1800
000560 3018      .db	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30	; (;)
000561 0c06
000562 3018
000563 0c18
000564 0006      .db	0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00	; (<)
000565 0000
000566 007e
000567 7e00
000568 0000      .db	0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00	; (=)
000569 3060
00056a 0c18
00056b 3018
00056c 0060      .db	0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00	; (>)
00056d c67c
00056e 180c
00056f 0018
000570 0018      .db	0x7C, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00	; (?)
000571 c67c
000572 dede
000573 c0de
000574 0078      .db	0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00	; (@)
000575 6c38
000576 fec6
000577 c6c6
000578 00c6      .db	0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00	; (A)
000579 66fc
00057a 7c66
00057b 6666
00057c 00fc      .db	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00	; (B)
00057d 663c
00057e c0c0
00057f 66c0
000580 003c      .db	0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00	; (C)
000581 6cf8
000582 6666
000583 6c66
000584 00f8      .db	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00	; (D)
000585 62fe
000586 7868
000587 6268
000588 00fe      .db	0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00	; (E)
000589 62fe
00058a 7868
00058b 6068
00058c 00f0      .db	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00	; (F)
00058d 663c
00058e c0c0
00058f 66ce
000590 003a      .db	0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00	; (G)
000591 c6c6
000592 fec6
000593 c6c6
000594 00c6      .db	0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00	; (H)
000595 183c
000596 1818
000597 1818
000598 003c      .db	0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00	; (I)
000599 0c1e
00059a 0c0c
00059b cccc
00059c 0078      .db	0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00	; (J)
00059d 66e6
00059e 786c
00059f 666c
0005a0 00e6      .db	0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00	; (K)
0005a1 60f0
0005a2 6060
0005a3 6662
0005a4 00fe      .db	0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00	; (L)
0005a5 eec6
0005a6 fefe
0005a7 c6d6
0005a8 00c6      .db	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00	; (M)
0005a9 e6c6
0005aa def6
0005ab c6ce
0005ac 00c6      .db	0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00	; (N)
0005ad c67c
0005ae c6c6
0005af c6c6
0005b0 007c      .db	0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (O)
0005b1 66fc
0005b2 7c66
0005b3 6060
0005b4 00f0      .db	0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00	; (P)
0005b5 c67c
0005b6 c6c6
0005b7 cec6
0005b8 0e7c      .db	0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xCE, 0x7C, 0x0E	; (Q)
0005b9 66fc
0005ba 7c66
0005bb 666c
0005bc 00e6      .db	0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00	; (R)
0005bd 663c
0005be 1830
0005bf 660c
0005c0 003c      .db	0x3C, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x3C, 0x00	; (S)
0005c1 7e7e
0005c2 185a
0005c3 1818
0005c4 003c      .db	0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00	; (T)
0005c5 c6c6
0005c6 c6c6
0005c7 c6c6
0005c8 007c      .db	0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (U)
0005c9 c6c6
0005ca c6c6
0005cb 6cc6
0005cc 0038      .db	0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00	; (V)
0005cd c6c6
0005ce d6c6
0005cf fed6
0005d0 006c      .db	0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00	; (W)
0005d1 c6c6
0005d2 386c
0005d3 c66c
0005d4 00c6      .db	0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00	; (X)
0005d5 6666
0005d6 3c66
0005d7 1818
0005d8 003c      .db	0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00	; (Y)
0005d9 c6fe
0005da 188c
0005db 6632
0005dc 00fe      .db	0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00	; (Z)
0005dd 303c
0005de 3030
0005df 3030
0005e0 003c      .db	0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00	; ([)
0005e1 60c0
0005e2 1830
0005e3 060c
0005e4 0002      .db	0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00	; (\)
0005e5 0c3c
0005e6 0c0c
0005e7 0c0c
0005e8 003c      .db	0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00	; (])
0005e9 3810
0005ea c66c
0005eb 0000
0005ec 0000      .db	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00	; (^)
0005ed 0000
0005ee 0000
0005ef 0000
0005f0 ff00      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF	; (_)
0005f1 1830
0005f2 000c
0005f3 0000
0005f4 0000      .db	0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; (`)
0005f5 0000
0005f6 0c78
0005f7 cc7c
0005f8 0076      .db	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00	; (a)
0005f9 60e0
0005fa 667c
0005fb 6666
0005fc 00dc      .db	0xE0, 0x60, 0x7C, 0x66, 0x66, 0x66, 0xDC, 0x00	; (b)
0005fd 0000
0005fe c67c
0005ff c6c0
000600 007c      .db	0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x00	; (c)
000601 0c1c
000602 cc7c
000603 cccc
000604 0076      .db	0x1C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00	; (d)
000605 0000
000606 c67c
000607 c0fe
000608 007c      .db	0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00	; (e)
000609 663c
00060a f860
00060b 6060
00060c 00f0      .db	0x3C, 0x66, 0x60, 0xF8, 0x60, 0x60, 0xF0, 0x00	; (f)
00060d 0000
00060e cc76
00060f 7ccc
000610 f80c      .db	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8	; (g)
000611 60e0
000612 766c
000613 6666
000614 00e6      .db	0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00	; (h)
000615 0018
000616 1838
000617 1818
000618 003c      .db	0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00	; (i)
000619 0006
00061a 0606
00061b 6606
00061c 3c66      .db	0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C	; (j)
00061d 60e0
00061e 6c66
00061f 6c78
000620 00e6      .db	0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00	; (k)
000621 1838
000622 1818
000623 1818
000624 003c      .db	0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00	; (l)
000625 0000
000626 feec
000627 d6d6
000628 00d6      .db	0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0x00	; (m)
000629 0000
00062a 66dc
00062b 6666
00062c 0066      .db	0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x00	; (n)
00062d 0000
00062e c67c
00062f c6c6
000630 007c      .db	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (o)
000631 0000
000632 66dc
000633 7c66
000634 f060      .db	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0	; (p)
000635 0000
000636 cc76
000637 7ccc
000638 1e0c      .db	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E	; (q)
000639 0000
00063a 76dc
00063b 6060
00063c 00f0      .db	0x00, 0x00, 0xDC, 0x76, 0x60, 0x60, 0xF0, 0x00	; (r)
00063d 0000
00063e c07e
00063f 067c
000640 00fc      .db	0x00, 0x00, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x00	; (s)
000641 3030
000642 30fc
000643 3630
000644 001c      .db	0x30, 0x30, 0xFC, 0x30, 0x30, 0x36, 0x1C, 0x00	; (t)
000645 0000
000646 cccc
000647 cccc
000648 0076      .db	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00	; (u)
000649 0000
00064a c6c6
00064b 6cc6
00064c 0038      .db	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00	; (v)
00064d 0000
00064e d6c6
00064f fed6
000650 006c      .db	0x00, 0x00, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00	; (w)
000651 0000
000652 6cc6
000653 6c38
000654 00c6      .db	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00	; (x)
000655 0000
000656 c6c6
000657 7ec6
000658 fc06      .db	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC	; (y)
000659 0000
00065a 4c7e
00065b 3218
00065c 007e      .db	0x00, 0x00, 0x7E, 0x4C, 0x18, 0x32, 0x7E, 0x00	; (z)
00065d 180e
00065e 7018
00065f 1818
000660 000e      .db	0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00	; ({)
000661 1818
000662 1818
000663 1818
000664 0018      .db	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (|)
000665 1870
000666 0e18
000667 1818
000668 0070      .db	0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00	; (})
000669 dc76
00066a 0000
00066b 0000
00066c 0000      .db	0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (~)
00066d 1000
00066e 6c38
00066f c6c6
000670 00fe      .db	0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00	; (.)
                 
000671 1e0e
000672 6636
000673 667e
000674 0066      .db	0x0E, 0x1E, 0x36, 0x66, 0x7E, 0x66, 0x66, 0x00	; (.)
000675 607c
000676 7c60
000677 6666
000678 007c      .db	0x7C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
000679 667c
00067a 7c66
00067b 6666
00067c 007c      .db	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
00067d 607e
00067e 6060
00067f 6060
000680 0060      .db	0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00	; (.)
000681 3c1c
000682 6c6c
000683 6c6c
000684 c6fe      .db	0x1C, 0x3C, 0x6C, 0x6C, 0x6C, 0x6C, 0xFE, 0xC6	; (.)
000685 607e
000686 7c60
000687 6060
000688 007e      .db	0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00	; (.)
000689 dbdb
00068a 3c7e
00068b db7e
00068c 00db      .db	0xDB, 0xDB, 0x7E, 0x3C, 0x7E, 0xDB, 0xDB, 0x00	; (.)
00068d 663c
00068e 1c06
00068f 6606
000690 003c      .db	0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00	; (.)
000691 6666
000692 7e6e
000693 6676
000694 0066      .db	0x66, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (.)
000695 663c
000696 7e6e
000697 6676
000698 0066      .db	0x3C, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (.)
000699 6c66
00069a 7078
00069b 6c78
00069c 0066      .db	0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00	; (.)
00069d 1e0e
00069e 6636
00069f 6666
0006a0 0066      .db	0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
0006a1 eec6
0006a2 fefe
0006a3 d6d6
0006a4 00c6      .db	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xD6, 0xC6, 0x00	; (.)
0006a5 6666
0006a6 7e66
0006a7 6666
0006a8 0066      .db	0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (.)
0006a9 663c
0006aa 6666
0006ab 6666
0006ac 003c      .db	0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00	; (.)
0006ad 667e
0006ae 6666
0006af 6666
0006b0 0066      .db	0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
0006b1 667c
0006b2 6666
0006b3 607c
0006b4 0060      .db	0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00	; (.)
0006b5 663c
0006b6 6060
0006b7 6660
0006b8 003c      .db	0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00	; (.)
0006b9 187e
0006ba 1818
0006bb 1818
0006bc 0018      .db	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (.)
0006bd 6666
0006be 3e66
0006bf 6606
0006c0 003c      .db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00	; (.)
0006c1 db7e
0006c2 dbdb
0006c3 187e
0006c4 0018      .db	0x7E, 0xdb, 0xdb, 0xdb, 0x7E, 0x18, 0x18, 0x00	; (.)
0006c5 6666
0006c6 183c
0006c7 663c
0006c8 0066      .db	0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00	; (.)
0006c9 6666
0006ca 6666
0006cb 6666
0006cc 037f      .db	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7F, 0x03	; (.)
0006cd 6666
0006ce 3e66
0006cf 0606
0006d0 0006      .db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00	; (.)
0006d1 dbdb
0006d2 dbdb
0006d3 dbdb
0006d4 00ff      .db	0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xFF, 0x00	; (.)
0006d5 dbdb
0006d6 dbdb
0006d7 dbdb
0006d8 03ff      .db	0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xFF, 0x03	; (.)
0006d9 60e0
0006da 7c60
0006db 6666
0006dc 007c      .db	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
0006dd c6c6
0006de f6c6
0006df dede
0006e0 00f6      .db	0xC6, 0xC6, 0xC6, 0xF6, 0xDE, 0xDE, 0xF6, 0x00	; (.)
0006e1 6060
0006e2 7c60
0006e3 6666
0006e4 007c      .db	0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
0006e5 8c78
0006e6 3e06
0006e7 8c06
0006e8 0078      .db	0x78, 0x8C, 0x06, 0x3E, 0x06, 0x8C, 0x78, 0x00	; (.)
0006e9 dbce
0006ea fbdb
0006eb dbdb
0006ec 00ce      .db	0xCE, 0xdb, 0xdb, 0xFB, 0xdb, 0xdb, 0xCE, 0x00	; (.)
0006ed 663e
0006ee 6666
0006ef 363e
0006f0 0066      .db	0x3E, 0x66, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x00	; (.)
                 
                 ;Char_160		.db	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00	; (.)
                 ;Char_161		.db	0x0C, 0x38, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00	; (.)
                 ;Char_162		.db	0x00, 0x00, 0xFC, 0x66, 0x7C, 0x66, 0xFC, 0x00	; (.)
                 ;Char_163		.db	0x00, 0x00, 0xFC, 0x64, 0x60, 0x60, 0xF0, 0x00	; (.)
                 ;Char_164		.db	0x00, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0xC6, 0x00	; (.)
                 ;Char_165		.db	0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00	; (.)
                 ;Char_166		.db	0x00, 0x00, 0xD6, 0x54, 0x7C, 0x54, 0xD6, 0x00	; (.)
                 ;Char_167		.db	0x00, 0x00, 0x7C, 0xC6, 0x1C, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_168		.db	0x00, 0x00, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x00	; (.)
                 ;Char_169		.db	0x00, 0x6C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x00	; (.)
                 ;Char_170		.db	0x00, 0x00, 0xE6, 0x6C, 0x78, 0x6C, 0xE6, 0x00	; (.)
                 ;Char_171		.db	0x00, 0x00, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x00	; (.)
                 ;Char_172		.db	0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0x00	; (.)
                 ;Char_173		.db	0x00, 0x00, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00	; (.)
                 ;Char_174		.db	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_175		.db	0x00, 0x00, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
                 ;Char_176		.db	0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88	; (.)
                 ;Char_177		.db	0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA	; (.)
                 ;Char_178		.db	0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD	; (.)
                 ;Char_179		.db	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18	; (.)
                 ;Char_180		.db	0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_181		.db	0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_182		.db	0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36	; (.)
                 ;Char_183		.db	0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36	; (.)
                 ;Char_184		.db	0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_185		.db	0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36	; (.)
                 ;Char_186		.db	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36	; (.)
                 ;Char_187		.db	0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36	; (.)
                 ;Char_188		.db	0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00	; (.)
                 ;Char_189		.db	0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00	; (.)
                 ;Char_190		.db	0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00	; (.)
                 ;Char_191		.db	0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_192		.db	0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00	; (.)
                 ;Char_193		.db	0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_194		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_195		.db	0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_196		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_197		.db	0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_198		.db	0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_199		.db	0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36	; (.)
                 ;Char_200		.db	0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00	; (.)
                 ;Char_201		.db	0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36	; (.)
                 ;Char_202		.db	0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_203		.db	0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36	; (.)
                 ;Char_204		.db	0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36	; (.)
                 ;Char_205		.db	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_206		.db	0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36	; (.)
                 ;Char_207		.db	0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_208		.db	0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_209		.db	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_210		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36	; (.)
                 ;Char_211		.db	0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00	; (.)
                 ;Char_212		.db	0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00	; (.)
                 ;Char_213		.db	0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_214		.db	0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36	; (.)
                 ;Char_215		.db	0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36	; (.)
                 ;Char_216		.db	0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_217		.db	0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00	; (.)
                 ;Char_218		.db	0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_219		.db	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF	; (.)
                 ;Char_220		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF	; (.)
                 ;Char_221		.db	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0	; (.)
                 ;Char_222		.db	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F	; (.)
                 ;Char_223		.db	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;Char_224		.db	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0	; (.)
                 ;Char_225		.db	0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_226		.db	0x00, 0x00, 0x7E, 0x5A, 0x18, 0x18, 0x3C, 0x00	; (.)
                 ;Char_227		.db	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC	; (.)
                 ;Char_228		.db	0x18, 0x18, 0x3C, 0x5A, 0x5A, 0x3C, 0x18, 0x18	; (.)
                 ;Char_229		.db	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00	; (.)
                 ;Char_230		.db	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0x06	; (.)
                 ;Char_231		.db	0x00, 0x00, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x00	; (.)
                 ;Char_232		.db	0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x00	; (.)
                 ;Char_233		.db	0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x06	; (.)
                 ;Char_234		.db	0x00, 0x00, 0xF8, 0xB0, 0x3C, 0x36, 0x7C, 0x00	; (.)
                 ;Char_235		.db	0x00, 0x00, 0xC6, 0xC6, 0xF6, 0xDE, 0xF6, 0x00	; (.)
                 ;Char_236		.db	0x00, 0x00, 0xFC, 0x30, 0x3C, 0x36, 0x7C, 0x00	; (.)
                 ;Char_237		.db	0x00, 0x00, 0x7C, 0xC6, 0x1E, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_238		.db	0x00, 0x00, 0xCE, 0xDB, 0xFB, 0xDB, 0xCE, 0x00	; (.)
                 ;Char_239		.db	0x00, 0x00, 0x7E, 0xCC, 0x7C, 0x6C, 0xCE, 0x00	; (.)
                 ;Char_240		.db	0x6C, 0x00, 0xFE, 0x62, 0x78, 0x62, 0xFE, 0x00	; (.)
                 ;Char_241		.db	0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00	; (.)
                 ;Char_242		.db	0x7C, 0xC6, 0xD0, 0xF0, 0xD0, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_243		.db	0x00, 0x00, 0x7C, 0xC6, 0xF0, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_244		.db	0x66, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00	; (.)
                 ;Char_245		.db	0x6C, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00	; (.)
                 ;Char_246		.db	0xC6, 0x6C, 0xD6, 0xC6, 0x7E, 0x06, 0xFC, 0x00	; (.)
                 ;Char_247		.db	0xC6, 0x6C, 0x10, 0xC6, 0xC6, 0x7E, 0x06, 0xFC	; (.)
                 ;Char_248		.db	0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;Char_249		.db	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00	; (.)
                 ;Char_250		.db	0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;Char_251		.db	0x03, 0x03, 0x06, 0x06, 0xC6, 0x6C, 0x3C, 0x18	; (.)
                 ;Char_252		.db	0xCF, 0xED, 0xFF, 0xDC, 0xCF, 0xCC, 0xCC, 0x00	; (.)
                 ;Char_253		.db	0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0x00	; (.)
                 ;Char_254		.db	0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00	; (.)
                 ;Char_255		.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
                 
                 month_len:
0006f1 2932
0006f2 3132
0006f3 3132
0006f4 3232
0006f5 3231
0006f6 3231      	.db 0x32,0x29,0x32,0x31,0x32,0x31,0x32,0x32,0x31,0x32,0x31,0x32
                 
                 ; Символьные константы
                 month_names:
0006f7 cddf
0006f8 00c2      	.db "ЯНВ",0x00
0006f9 c5d4
0006fa 00c2      	.db "ФЕВ",0x00
0006fb c0cc
0006fc 00d0      	.db "МАР",0x00
0006fd cfc0
0006fe 00d0      	.db "АПР",0x00
0006ff c0cc
000700 00c9      	.db "МАЙ",0x00
000701 dec8
000702 00cd      	.db "ИЮН",0x00
000703 dec8
000704 00cb      	.db "ИЮЛ",0x00
000705 c2c0
000706 00c3      	.db "АВГ",0x00
000707 c5d1
000708 00cd      	.db "СЕН",0x00
000709 cace
00070a 00d2      	.db "ОКТ",0x00
00070b cecd
00070c 00df      	.db "НОЯ",0x00
00070d c5c4
00070e 00ca      	.db "ДЕК",0x00
                 
                 week_day_names:
00070f cecf
000710 c5cd
000711 c5c4
000712 dccb
000713 c8cd
000714 00ca      mon:	.db "ПОНЕДЕЛЬНИК",0x00
000715 d2c2
000716 d0ce
000717 c8cd
000718 00ca      tue:	.db "ВТОРНИК",0x00
000719 d0d1
00071a c4c5
00071b 00c0      wed:	.db "СРЕДА",0x00
00071c c5d7
00071d c2d2
00071e d0c5
00071f 00c3      thu:	.db "ЧЕТВЕРГ",0x00
000720 dfcf
000721 cdd2
000722 d6c8
000723 00c0      fri:	.db "ПЯТНИЦА",0x00
000724 d3d1
000725 c1c1
000726 d2ce
000727 00c0      sat:	.db "СУББОТА",0x00
000728 cec2
000729 cad1
00072a c5d0
00072b c5d1
00072c c8cd
00072d 00c5      sun:	.db "ВОСКРЕСЕНИЕ",0x00
                 
                 week_day_table:
00072e 0e1e
00072f 0e2a
000730 0e32
000731 0e38
000732 0e40
000733 0e48
000734 0e50      	.dw mon<<1, tue<<1, wed<<1, thu<<1, fri<<1, sat<<1, sun<<1
                 
                 week_day_center_coo:
000735 1606
000736 161e
000737 1616
000738 0006      	.db 6, 22, 30, 22, 22, 22, 6, 0x00
                 
                 corr_table:
000739 0103
00073a 0102
00073b 0101
00073c 0104
00073d 0108
00073e 0105
00073f 0106      	.dw hour, minute, second, day, day_of_week, month, year
                 
                 corr_max_value:
000740 0024
000741 0060
000742 0060
000743 0000
000744 0007
000745 0012
000746 9999      	.dw 0x24, 0x60, 0x60, 0x00, 0x07, 0x12, 0x9999
                 
                 ;-------- Конец cseg
                 
                 .dseg ; Сегмент данных ОЗУ
                 .org 0x100
                 ; Дата-время (BCD)
000100 00        	dsecond: .db 0x00
000101 00        	second: .db 0x00
000102 00        	minute: .db 0x00
000103 00        	hour: .db 0x00
000104 00        	day: .db 0x00
000105 00        	month: .db 0x00
000106 00 00     	year: .dw 0x00
000108 00        	day_of_week: .db 0x00
                 
000109 00        	tim_ovf_val: .db 0x00	; Длительность 5мс интервала (более точная корректировка)
                 
                 	; цифровая настройка хода (очень точная корректировка)
00010a 00 00
00010c 00 00     	corr_period: .dd 0x00000000	; период, по прошествии которого осуществится корректировка (десятые доли секунды)
00010e 00 00
000110 00 00     	corr_per_cnt: .dd 0x00000000
000112 00 00     	corr_value: .dw 0x0000		; корректирующее значение (BCD) lsb - десятые доли секунд, msb - секунды, старший бит lsb - знак коррекции (+/-)
                 
000114 00        	sec_duration: .db 0x00	; Длительность секунды (грубая корректировка)
000115 00        	sec_cnt: .db 0x00
                 
                 ;-------- Конец dseg
                 
                 .eseg ; Сегмент eeprom
                 
000000 14        sec_dur_eep: .db 0x14
                 
                 ;-------- Конец eseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48PA register use summary:
r0 :   0 r1 :   0 r2 :  21 r3 :  17 r4 :  19 r5 :  19 r6 :  10 r7 :   7 
r8 :  11 r9 :   3 r10:   4 r11:   0 r12:   4 r13:  14 r14:   4 r15:   0 
r16: 421 r17:  79 r18:   9 r19:  17 r20:  34 r21:   9 r22:   1 r23:  21 
r24:  24 r25:   1 r26:   1 r27:   1 r28:   1 r29:   1 r30:  59 r31:  54 
x  :   0 y  :   0 z  :  53 
Registers used: 29 out of 35 (82.9%)

ATmega48PA instruction use summary:
.lds  :   0 .sts  :   0 adc   :   7 add   :  19 adiw  :   3 and   :   5 
andi  :  13 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  13 brge  :   0 brhc  :   0 
brhs  :   1 brid  :   0 brie  :   0 brlo  :   7 brlt  :   0 brmi  :   0 
brne  :  41 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :  36 cbr   :   0 clc   :   0 
clh   :   0 cli   :   2 cln   :   0 clr   :  36 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   2 cp    :   5 cpc   :   0 cpi   :  38 
cpse  :   0 dec   :  17 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   7 inc   :   7 ld    :  20 ldd   :   0 
ldi   : 203 lds   :   5 lpm   :  16 lsl   :  14 lsr   :   9 mov   :  52 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :  66 
or    :   3 ori   :  14 out   :  18 pop   :  93 push  :  92 rcall : 161 
ret   :  26 reti  :   2 rjmp  :  74 rol   :   6 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :  39 sbic  :   0 sbis  :   4 sbiw  :   2 sbr   :   0 
sbrc  :  15 sbrs  :   9 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   1 
spm   :   0 st    :  23 std   :   0 sts   :   9 sub   :   0 subi  :  11 
swap  :   1 tst   :   5 wdr   :   1 
Instructions used: 51 out of 111 (45.9%)

ATmega48PA memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e8e   2530   1196   3726    4096  91.0%
[.dseg] 0x000100 0x000116      0     22     22     512   4.3%
[.eseg] 0x000000 0x000001      0      1      1     256   0.4%

Assembly complete, 0 errors, 0 warnings
