
AVRASM ver. 2.1.42  F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm Wed Aug 06 23:59:30 2014

F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(21): Including file 'C:\Program Files\Atmel\AVR Tools\AvrAssembler2\Appnotes\m48PAdef.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(24): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\definitions.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(59): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\init.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(846): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\Sie_c60.inc'
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(850): Including file 'F:\Work\Hardware\HAND_CLOCK\firmware\CP866.inc'
                 
                 
                 ; TODO
                 ; 1. Сделать более наглядную настройку времени (с подсветкой редактируемой величины)
                 ; 2. Сделать регистр флагов обновления, чтобы не выполнять лишние рисования
                 
                 
                 ;#define DEBUG
                 
                 ; Для себя:
                 ; Регистры GPIORx
                 ; GPIOR0.0 - флаг переноса BCD
                 ; GPIOR0.1 - используется как вспомогательный флаг при опросе клавиатуры
                 ; GPIOR0.2 - устанавливается в 1 каждую десятую долю секунды
                 ; GPIOR0.3 - ...каждую секунду
                 ; GPIOR0.4 - ...минуту
                 ; GPIOR0.5 - ...час
                 ; GPIOR0.6 - ...день
                 ; GPIOR0.7 - ...месяц
                 
                 .list
                 
                 .include "definitions.inc"
                 
                 
                 ;------- Константы
                 .equ num_mode = 0x02
                 .equ sec_part = 8
                 .equ OCR2A_val = 127
                 .equ TimCntVal = 32
                 ;-------
                 
                 ;------- Определения
                 .def lcd_X = r2	; Текущие координаты
                 .def lcd_Y = r3
                 .def bkg_color = r4 ; Цвета фона и текста
                 .def frg_color = r5
                 .def lcd_mx = r6	; множители масштабирования
                 .def lcd_my = r7
                 
                 .def kbd = r8	; Битовая маска нажатых кнопок
                 .def kbd_prev = r12	; Битовая маска нажатых кнопок предыдущего такта
                 .def kbd_press = r13 ; Нажатые кнопки (из 1 в 0)
                 .def kbd_release = r14 ; Отпущенные кнопки (из 1 в 0)
                 
                 .def sec_part_cnt = r10
                 .def refresh = r23	; Регистр с флагами обновления
                 ; Биты:
                 ; 0 - надо обновить минуты
                 ; 1 - часы
                 ; 2 - число/день недели
                 ; 3 - месяц
                 ; 4 - год
                 ; т.к. рисование идет не быстрее чем раз в секунду, то секунды обновляются каждый такт и так
                 
                 .def led_timer=r9	; Таймер подсветки (0.1 секундные интерваллы)
                 .def mode=r19	; Режим работы: 0 - часы (отображение даты-времени), 1 - настройка даты, времени,
                 				; 2 - таймер, 3 - секундомер 
                 .def mode_tmp=r24 ; Для режима 1 - здесь хранится текущий редактируемый параметр (час, минута, секунда и т.д.)
                 				  ; 0 - час, 1 - минута, 2 - секунда, 3 - число, 4 - день недели, 5 - месяц, 6 - год (пока так)
                 				  ; этот же параметр и указывает какая часть рисуемой даты-времени будет подсвечена
                 
                 .def tmp=r16	; Temp
                 .def tmp1=r17
                 .def tmp2=r18
                 ;-------
                 
                 ;------- Макросы
                 .macro CS_LOW
                 	cbi PORTB, 1
                 	nop
                 .endm
                 .macro CS_HIGH
                 	sbi PORTB, 1
                 	nop
                 .endm
                 .macro LED_ON
                 	sbi PORTC, 1
                 	nop
                 .endm
                 .macro LED_OFF
                 	cbi PORTC, 1
                 	nop
                 .endm
                 .macro CMD_SET
                 	cbi PORTB, 0
                 	nop
                 .endm
                 .macro DATA_SET
                 	sbi PORTB, 0
                 	nop
                 .endm
                 .macro LCD_RESET_LOW
                 	cbi PORTC, 0
                 	nop
                 .endm
                 .macro LCD_RESET_HIGH
                 	sbi PORTC, 0
                 	nop
                 .endm
                 .macro LAPZ
                 	ldi ZH, high(@0 << 1)
                 	ldi ZL, low(@0 << 1)
                 .endm
                 .macro LAPX
                 	ldi XH, high(@0 << 1)
                 	ldi XL, low(@0 << 1)
                 .endm
                 .macro LAPY
                 	ldi YH, high(@0 << 1)
                 	ldi YL, low(@0 << 1)
                 .endm
                 .macro LASZ
                 	ldi ZH, high(@0)
                 	ldi ZL, low(@0)
                 .endm
                 .macro LASX
                 	ldi XH, high(@0)
                 	ldi XL, low(@0)
                 .endm
                 .macro LASY
                 	ldi YH, high(@0)
                 	ldi YL, low(@0)
                 .endm
                 ;-------
                 
                 .cseg ; Сегмент кода
                 .org 0
                 
000000 c019      rjmp Start
                 ; Прерывания
000001 c140      rjmp INT0r
000002 c13f      rjmp INT1r
000003 c13e      rjmp PCINT0r
000004 c13d      rjmp PCINT1r
000005 c13c      rjmp PCINT2r
000006 c13b      rjmp WDT
000007 c144      rjmp T2_COMPA
000008 c139      rjmp T2_COMPB
000009 c138      rjmp T2_OVF
00000a c137      rjmp T1_CAPT
00000b c136      rjmp T1_COMPA
00000c c135      rjmp T1_COMPB
00000d c134      rjmp T1_OVF
00000e c133      rjmp T0_COMPA
00000f c132      rjmp T0_COMPB
000010 c131      rjmp T0_OVF
000011 c130      rjmp SPI_STC
000012 c12f      rjmp USART_RX
000013 c12e      rjmp USART_UDRE
000014 c12d      rjmp USART_TX
000015 c12c      rjmp AnalogDC
000016 c12b      rjmp EE_RDY
000017 c12a      rjmp AnalogCMP
000018 c129      rjmp TWI
000019 c128      rjmp SPM_RDY
                 
                 Start:
                 
                 .include "init.inc"
                 
00001a 94f8      	cli
                 ;-------- Инициализация стека
00001b e002          ldi tmp, high(RAMEND)
00001c bf0e          out SPH,tmp
00001d ef0f          ldi tmp, low(RAMEND)
00001e bf0d          out SPL,tmp
                 ;-------- Отключение Watchdog
00001f 95a8      	wdr
000020 2700      	clr tmp
000021 9300 0060 	sts WDTCSR, tmp
                 ;-------- Настраиваем асинхронный таймер
000023 e200      	ldi tmp,0b00100000	; Устанавливаем 32кГц источник для TCount2
000024 9300 00b6 	sts ASSR, tmp
                 	
000026 e002      	ldi tmp,0b00000010		; TCount2 вызывает прерывание при сравнении с OCR2A
000027 9300 0070 	sts TIMSK2, tmp
                 
000029 e70f      	ldi tmp, OCR2A_val
00002a 9300 00b3 	sts OCR2A, tmp		; Каждые 4.9 мс (примерно)
                 wl2:
00002c 9100 00b6 	lds tmp, ASSR
00002e fd03      	sbrc tmp, OCR2AUB
00002f cffc      	rjmp wl2
                 
000030 e001      	ldi tmp, 0x01		; TCount2 работает на частоте 32768 Гц
000031 9300 00b1 	sts TCCR2B, tmp
                 wl0:
000033 9100 00b6 	lds tmp, ASSR		; Ждем, пока будет обновлен TCCR2B
000035 fd00      	sbrc tmp, TCR2BUB
000036 cffc      	rjmp wl0
                 
000037 e002      	ldi tmp, 0b00000010	; Режим CTC
000038 9300 00b0 	sts TCCR2A, tmp
                 wl1:
00003a 9100 00b6 	lds tmp, ASSR
00003c fd01      	sbrc tmp, TCR2AUB			; Ждем, пока будет обновлен TCCR2A
00003d cffc      	rjmp wl1
                 ;-------- Отключаем не используемые модули (TWI, Timer0, Timer1, USART, ADC)
00003e ea0b      	ldi tmp, 0b10101011
00003f 9300 0064 	sts PRR, tmp
                 ;-------- Настраиваем sleep режим (Power-save mode)
000041 e007      	ldi tmp, 0b00000111
000042 bf03      	out SMCR, tmp
                 ;-------- Настраиваем порты
000043 e003      	ldi tmp, 0b00000011	; PORTC - подтяжки включены, PC0, PC1 - на выход
000044 b907      	out DDRC, tmp
000045 e70d      	ldi tmp, 0b01111101
000046 b908      	out PORTC, tmp
                 
000047 e20b      	ldi tmp, 0b00101011
000048 b904      	out DDRB, tmp
000049 ed07      	ldi tmp, 0b11010111
00004a b905      	out PORTB, tmp
                 
00004b e00c      	ldi tmp, 0b00001100
00004c b90a      	out DDRD, tmp
00004d ef07      	ldi tmp, 0b11110111
00004e b90b      	out PORTD, tmp
                 ;-------- Настраиваем SPI
00004f e500      	ldi tmp, 0b01010000	; Скорость fsck/2, режим 00, мастер
000050 bd0c      	out SPCR, tmp
000051 e001      	ldi tmp, 0x01
000052 bd0d      	out SPSR, tmp
000053 b50d      	in tmp, SPSR
000054 b50e      	in tmp, SPDR
                 ;-------- Настраиваем MCUCR
000055 e000      	ldi tmp, 0x00
000056 bf05      	out MCUCR, tmp
                 ;-------- Настраиваем EEPROM
000057 e000      	ldi tmp, 0x00
000058 bb0f      	out EECR, tmp
                 ;-------- Инициализируем регистры
000059 2733      	clr mode
00005a 2788      	clr mode_tmp
00005b 24aa      	clr sec_part_cnt
00005c 2700      	clr r16
00005d 2711      	clr r17
00005e 2722      	clr r18
00005f 2733      	clr r19
000060 2744      	clr r20
000061 2755      	clr r21
000062 2766      	clr r22
000063 2788      	clr r24
000064 2799      	clr r25
000065 27aa      	clr r26
000066 27bb      	clr r27
000067 27cc      	clr r28
000068 27dd      	clr r29
000069 27ee      	clr r30
00006a 27ff      	clr r31
00006b e30f      	ldi tmp, 0b00111111
00006c 2e80      	mov kbd, tmp
00006d 2ec0      	mov kbd_prev, tmp
00006e 2ed0      	mov kbd_press, tmp
00006f 2ee0      	mov kbd_release, tmp
000070 e000      	ldi tmp, 0x00
000071 bb0e      	out GPIOR0, tmp
000072 bd0a      	out GPIOR1, tmp
000073 e17f      	ldi refresh, 0b00011111
                 ;-------- Инициализируем значения в памяти
000074 e000      	ldi tmp, 0x00
000075 e0f1      	ldi ZH, high(dsecond)
000076 e0e0      	ldi ZL, low(dsecond)
000077 9301      	st Z+, tmp
000078 9301      	st Z+, tmp
000079 e308      	ldi tmp, 0x38
00007a 9301      	st Z+, tmp
00007b e106      	ldi tmp, 0x16
00007c 9301      	st Z+, tmp
00007d e205      	ldi tmp, 0x25
00007e 9301      	st Z+, tmp
00007f e007      	ldi tmp, 0x07
000080 9301      	st Z+, tmp
000081 e104      	ldi tmp, 0x14
000082 9301      	st Z+, tmp
000083 e200      	ldi tmp, 0x20
000084 9301      	st Z+, tmp
000085 e002      	ldi tmp, 0x02
000086 8300      	st Z, tmp
                 
000087 e0f1      	ldi ZH, high(sec_duration)
000088 e1e4      	ldi ZL, low(sec_duration)
                 ;	ldi tmp, sec_dur_eep
                 
                 ;eep_w:
                 ;	sbic EECR, 1
                 ;	rjmp eep_w
                 
                 ;	out EEARL, tmp
                 ;	sbi EECR, 0
                 ;	in tmp, EEDR
000089 e200      	ldi tmp, TimCntVal	; в этом случае икремент времени будет происходить каждую 1/7 секунды (в теории)
00008a 8300      	st Z, tmp
                 
00008b e015      	ldi tmp1, 0x05
00008c 2e21      	mov lcd_x, tmp1
00008d 2e31      	mov lcd_y, tmp1
00008e ef1f      	ldi tmp1, 0xFF
00008f 2e51      	mov frg_color, tmp1
000090 e010      	ldi tmp1, 0x00
000091 2e41      	mov bkg_color, tmp1
000092 e011      	ldi tmp1, 0x01
000093 2e61      	mov lcd_mx, tmp1
000094 2e71      	mov lcd_my, tmp1
                 
000095 9478      	sei
                 
000096 d353      	rcall LCD_C60_Init
000097 9a29
000098 0000      	CS_HIGH
000099 d43f      	rcall LCD_Clear
00009a 9841
00009b 0000      	LED_OFF
                 	
00009c d28e      	rcall LCD_IdleOn
                 
                 main:
                 
00009d 9588      	sleep
                 
                 ; Ждем обновления TC2 как в апп-нотах по RTC
00009e e000      	ldi tmp, 0x00
00009f 9300 00b4 	sts OCR2B, tmp
                 wtr:
0000a1 9100 00b6 	lds tmp, ASSR
0000a3 fd02      	sbrc tmp, OCR2BUB
0000a4 cffc      	rjmp wtr
                 
                 
0000a5 3030      	cpi mode, 0x00
0000a6 f449      	brne m_mode1
                 
                 ; Режим 0 - рисуем часы, подсветка 5 секунд по нажатию, режим Idle
0000a7 9bf3      	sbis GPIOR0, 3	; Выполняем рисование каждую секунду
0000a8 c013      	rjmp kbd_hand
                 
0000a9 e003      	ldi tmp, 3
0000aa 2e20      	mov lcd_x, tmp
0000ab e10c      	ldi tmp, 28
0000ac 2e30      	mov lcd_y, tmp
0000ad d0f1      	rcall LCD_DrawTime
0000ae d1d0      	rcall LCD_DrawDate
0000af c00c      	rjmp kbd_hand
                 ; Режим 1 - рисуем дату-время, подсветка включена, режим Normal, рисуем с интервалом 0.1 сек
                 m_mode1:
0000b0 3031      	cpi mode, 0x01
0000b1 f451      	brne m_mode2
0000b2 9bf2      	sbis GPIOR0, 2
0000b3 c008      	rjmp kbd_hand
                 	
0000b4 e17f      	ldi refresh, 0b00011111
                 
0000b5 e003      	ldi tmp, 3
0000b6 2e20      	mov lcd_x, tmp
0000b7 e10c      	ldi tmp, 28
0000b8 2e30      	mov lcd_y, tmp
                 
0000b9 d0e5      	rcall LCD_DrawTime
0000ba d1c4      	rcall LCD_DrawDate
                 	
0000bb c000      	rjmp kbd_hand
                 m_mode2:				
                 
                 kbd_hand:
0000bc 3030      	cpi mode, 0x00
0000bd f479      	brne m_kbd_mode1
                 ; Обработчик кнопок режима 0
0000be fcd3      	sbrc kbd_press, 3
0000bf c005      	rjmp nx_b
0000c0 9a41
0000c1 0000      	LED_ON
0000c2 d273      	rcall LCD_IdleOff
0000c3 e302      	ldi tmp, 50
0000c4 2e90      	mov led_timer, tmp
                 nx_b:
0000c5 fcd5      	sbrc kbd_press, 5
0000c6 c005      	rjmp nx_b1
0000c7 9533      	inc mode
0000c8 d410      	rcall LCD_Clear
0000c9 d26c      	rcall LCD_IdleOff
0000ca 9a41
0000cb 0000      	LED_ON
                 nx_b1:
0000cc cfd0      	rjmp main
                 m_kbd_mode1:
                 ; Обработчик кнопок режима 1
0000cd 3031      	cpi mode, 0x01
0000ce f009      	breq m_kbd_mode1_cont
0000cf c063      	rjmp m_kbd_mode2
                 m_kbd_mode1_cont:
0000d0 fcd5      	sbrc kbd_press, 5
0000d1 c006      	rjmp nx_b_m1
0000d2 2733      	clr mode
0000d3 d405      	rcall LCD_Clear
0000d4 d256      	rcall LCD_IdleOn
0000d5 617f      	ori refresh, 0b00011111
0000d6 9841
0000d7 0000      	LED_OFF
                 nx_b_m1:	; Кнопки 4, 1 (средние слева и справа соответственно) - выбор редактируемой величины
0000d8 fcd4      	sbrc kbd_press, 4
0000d9 c005      	rjmp nx_b1_m1
0000da 2388      	tst mode_tmp
0000db f011      	breq m_mdtmp_max_set
0000dc 958a      	dec mode_tmp
0000dd c001      	rjmp nx_b1_m1
                 m_mdtmp_max_set:
0000de e086      	ldi mode_tmp, 0x06
                 nx_b1_m1:
0000df fcd1      	sbrc kbd_press, 1
0000e0 c004      	rjmp nx_b2_m1
0000e1 9583      	inc mode_tmp
0000e2 3087      	cpi mode_tmp, 0x07
0000e3 f409      	brne nx_b2_m1
0000e4 2788      	clr mode_tmp
                 nx_b2_m1: ; Кнопки 0, 2 (справа верхняя и нижняя соответственно) - изменение выбранной величины
0000e5 fed0      	sbrs kbd_press, 0
0000e6 c003      	rjmp nx_b2_cont
0000e7 fed2      	sbrs kbd_press, 2
0000e8 c001      	rjmp nx_b2_cont
0000e9 c048      	rjmp nx_b3_m1
                 
                 nx_b2_cont:
0000ea e0fe
0000eb ece4      	LAPZ corr_table	; Таблица адресов корректируемых величин (для удобства)
0000ec d04e      	rcall mt_offset
                 
0000ed 9105      	lpm tmp, Z+
0000ee 9114      	lpm tmp1, Z	; tmp1:tmp - адрес редактируемой величины
0000ef 2ff1      	mov ZH, tmp1
0000f0 2fe0      	mov ZL, tmp
                 
0000f1 94f8      	cli	; Отключаем прерывания, т.к. меняем время
0000f2 fcd0      	sbrc kbd_press, 0	; кнопка 1 - инкремент
0000f3 c002      	rjmp val_dec
0000f4 d170      	rcall BCD_Inc	; Увеличиваем значение в памяти 
0000f5 c002      	rjmp val_check
                 val_dec:
0000f6 e909      	ldi tmp, 0x99
0000f7 d153      	rcall BCD_Add	; аналогично BCD_Dec
                 val_check:
0000f8 8100      	ld tmp, Z	; в tmp число после модификации
0000f9 930f      	push tmp
0000fa 3082      	cpi mode_tmp, 0x02
0000fb f091      	breq sec_corr
0000fc 3083      	cpi mode_tmp, 0x03
0000fd f0c9      	breq day_corr
0000fe 3086      	cpi mode_tmp, 0x06
0000ff f189      	breq no_corr
                 hr_mn_mo:
                 ; для часов, минут и месяца
000100 910f      	pop tmp
000101 93ff      	push ZH
000102 93ef      	push ZL
000103 e0fe
000104 ede2      	LAPZ corr_max_value
000105 d035      	rcall mt_offset
000106 9114      	lpm tmp1, Z	; следующее после максимального значение редактируемого параметра
000107 91ef      	pop ZL
000108 91ff      	pop ZH
000109 1701      	cp tmp, tmp1
00010a f130      	brlo no_corr	; коррекция не нужна
00010b 2700      	clr tmp
00010c 8300      	st Z, tmp
00010d c023      	rjmp no_corr
                 sec_corr:
                 ; для секунд (тупо в лоб обнуляем)
00010e 2700      	clr tmp
00010f 8300      	st Z, tmp	; обнуляем число секунд
000110 9731      	sbiw ZL, 0x01
000111 8300      	st Z, tmp	; обнуляем чило десятых долей секунд
000112 d030      	rcall Tmp_to_TCNT2	; сброс счетчика таймера
000113 e0f1
000114 e1e5      	LASZ sec_cnt
000115 8300      	st Z, tmp	; обнуляем счетчик интервала 0.1 сек
000116 c01a      	rjmp no_corr
                 day_corr:
                 ; в стеке лежит скорректированное текущее число	
000117 93ff      	push ZH	; а ZH:ZL указывает на него в оперативной памяти
000118 93ef      	push ZL
000119 e0f1
00011a e0e5      	LASZ month
00011b 8100      	ld tmp, Z	; месяц
00011c fd04      	sbrc tmp, 4
00011d 5006      	subi tmp, 6	; в tmp номер месяца в binary
00011e 950a      	dec tmp
00011f e0fd
000120 efe4      	LAPZ month_len
000121 0fe0      	add ZL, tmp
000122 2700      	clr tmp
000123 1ff0      	adc ZH, tmp
000124 9114      	lpm tmp1, Z	; теперь тут число дней в месяце
000125 91ef      	pop ZL
000126 91ff      	pop ZH
000127 910f      	pop tmp	; tmp - текущее число
000128 3000      	cpi tmp, 0x00
000129 f021      	breq day_cr1
00012a 1701      	cp tmp, tmp1
00012b f028      	brlo no_corr
00012c e001      	ldi tmp, 0x01
00012d c002      	rjmp day_cr2
                 day_cr1:
00012e 2f01      	mov tmp, tmp1
00012f 950a      	dec tmp ; Здесь можно и без BCD_Inc, т.к. переполнения не будет
                 day_cr2:
000130 8300      	st Z, tmp
                 no_corr:
000131 9478      	sei	; Включаем прерывания обратно
                 nx_b3_m1:
000132 cf6a      	rjmp main
                 
                 m_kbd_mode2:
                 ; Обработчик кнопок режима 2
000133 fcd5      	sbrc kbd_press, 5
000134 c005      	rjmp nx_b_m2
000135 2733      	clr mode
000136 d3a2      	rcall LCD_Clear
000137 d1f3      	rcall LCD_IdleOn
000138 9841
000139 0000      	LED_OFF
                 nx_b_m2:
00013a cf62      	rjmp main
                 
                 ; для экономии flash расчет смещения для mode_tmp вынесен в отдельную подпрограмму
                 mt_offset:
00013b 938f      	push mode_tmp
00013c 0f88      	lsl mode_tmp
00013d 0fe8      	add ZL, mode_tmp
00013e 2788      	clr mode_tmp
00013f 1ff8      	adc ZH, mode_tmp
000140 918f      	pop mode_tmp
000141 9508      	ret
                 ;-------- Конец основного цикла
                 
                 INT0r:
                 INT1r:
                 PCINT0r:
                 PCINT1r:
                 PCINT2r:
                 WDT:
                 T2_OVF:
                 T2_COMPB:
                 T1_CAPT:
                 T1_COMPA:
                 T1_COMPB:
                 T1_OVF:
                 T0_COMPA:
                 T0_COMPB:
                 T0_OVF:
                 SPI_STC:
                 USART_RX:
                 USART_UDRE:
                 USART_TX:
                 AnalogDC:
                 EE_RDY:
                 AnalogCMP:
                 TWI:
                 SPM_RDY:
000142 9518      	reti
                 
                 Tmp_to_TCNT2:
000143 930f      	push tmp
000144 9300 00b2 	sts TCNT2, tmp
                 wl_tcnt_z:
000146 9100 00b6 	lds tmp, ASSR
000148 fd04      	sbrc tmp, 4
000149 cffc      	rjmp wl_tcnt_z	
00014a 910f      	pop tmp
00014b 9508      	ret
                 
                 T2_COMPA:		; обработчик прерывания от таймера
00014c 930f      	push tmp
00014d b70f      	in tmp, SREG
00014e 930f      	push tmp
                 
00014f 93ff      	push ZH
000150 93ef      	push ZL
                 
000151 b30e      	in tmp, GPIOR0
000152 7003      	andi tmp, 0b00000011
000153 bb0e      	out GPIOR0, tmp			; сбрасываем флаги временных событий
                 
000154 d01b      	rcall KBD_Check ; Скан кнопок
                 	
000155 e0f1      	ldi ZH, high(sec_duration)
000156 e1e4      	ldi ZL, low(sec_duration)
000157 8100      	ld tmp, Z
000158 94a3      	inc sec_part_cnt
000159 16a0      	cp sec_part_cnt, tmp
00015a f471      	brne t2_end
                 
                 ; Прошла 0.1 секунды
00015b 9af2      	sbi GPIOR0, 2	; Установили флаг
                 	
00015c d08f      	rcall Time_Date_Inc	; Инкремент даты-времени
00015d 24aa      	clr sec_part_cnt	; Очистили счетчик
                 ; Определяем, в каком режиме работают часы
00015e 3030      	cpi mode, 0x00
00015f f441      	brne tc2_mode1
                 ; Режим 0 - управление подсветкой
000160 2099      	tst led_timer		; Работа с подсветкой
000161 f039      	breq t2_end
000162 949a      	dec led_timer
000163 f429      	brne t2_end
000164 9841
000165 0000      	LED_OFF
000166 d1c4      	rcall LCD_IdleOn
000167 c001      	rjmp t2_end
                 
                 tc2_mode1:
                 ; Режим 1 - настройка даты, времени, корректировок
000168 0000      	nop
                 
                 t2_end:
000169 952a      	dec tmp2
                 
00016a 91ef      	pop ZL
00016b 91ff      	pop ZH
                 t2_out:
00016c 910f      	pop tmp
00016d bf0f      	out SREG, tmp
00016e 910f      	pop tmp
00016f 9518      	reti
                 
                 ;-------- Подпрограммы
                 KBD_Check:
000170 930f      	push tmp
000171 9bf1      	sbis GPIOR0, 1
000172 c00c      	rjmp row0_active
                 ; row1 active
000173 b109      	in tmp, PIND
000174 7700      	andi tmp, 0b01110000
000175 9506      	lsr tmp
000176 2a80      	or kbd, tmp
000177 6c07      	ori tmp, 0b11000111
000178 2280      	and kbd, tmp
000179 9a5a      	sbi PORTD, 2
00017a 0000      	nop
00017b 985b      	cbi PORTD, 3
00017c 0000      	nop
00017d 98f1      	cbi GPIOR0, 1
00017e c00e      	rjmp kbd_end
                 row0_active:
00017f b109      	in tmp, PIND
000180 7700      	andi tmp, 0b01110000
000181 9506      	lsr tmp
000182 9506      	lsr tmp
000183 9506      	lsr tmp
000184 9506      	lsr tmp
000185 2a80      	or kbd, tmp
000186 6f08      	ori tmp, 0b11111000
000187 2280      	and kbd, tmp
000188 9a5b      	sbi PORTD, 3
000189 0000      	nop
00018a 985a      	cbi PORTD, 2
00018b 0000      	nop
00018c 9af1      	sbi GPIOR0, 1
                 kbd_end:
00018d e30f      	ldi tmp, 0b00111111
00018e 2280      	and kbd, tmp
00018f 1680      	cp kbd, tmp
000190 f411      	brne kbd_ret
000191 e800      	ldi tmp, 0x80
000192 2a80      	or kbd,tmp	; установлен флаг нажатия (для удобства)
                 kbd_ret:
                 ; Здесь формируем kbd_press и kbd_release
000193 2d08      	mov tmp, kbd
000194 250c      	eor tmp, kbd_prev	; tmp - содержит 1-цы если кнопка поменяла свое состояние
000195 6c00      	ori tmp, 0b11000000	; лишнее отсекаем
000196 2cdc      	mov kbd_press, kbd_prev	; здесь 0 если кнопка нажата в прошлом такте
000197 2ce8      	mov kbd_release, kbd	; здесь 0 если кнопка нажата в этом такте
000198 22d0      	and kbd_press, tmp ; если кнопка поменяла свое значение и она нажата в этом такте, то в нужном бите будет 1 (кнопка нажата)
000199 22e0      	and kbd_release, tmp ; если кнопка была нажата в прошлом такте, но поменяла свое значение, то в нужном бите будет 1 (кнопка отпущена)
00019a 94d0      	com kbd_press
00019b 94e0      	com kbd_release
00019c 2cc8      	mov kbd_prev, kbd	; настоящее значение теперь предыдущее
                 
00019d 910f      	pop tmp
00019e 9508      	ret
                 ;----------------------
                 LCD_DrawTime:
00019f 93ff      	push ZH
0001a0 93ef      	push ZL
0001a1 930f      	push tmp
0001a2 931f      	push tmp1
                 
0001a3 e002      	ldi tmp, 2
0001a4 2e60      	mov lcd_mx, tmp
0001a5 e003      	ldi tmp, 3
0001a6 2e70      	mov lcd_my, tmp
0001a7 ef1f      	ldi tmp1, 0xFF
                 
0001a8 ff71      	sbrs refresh, 1
0001a9 c012      	rjmp drw_clk_minute_skip
0001aa 7f7d      	andi refresh, 0b11111101
0001ab e0f1
0001ac e0e3      	LASZ hour	; рисуем часы
0001ad 8100      	ld tmp, Z
0001ae 924f      	push bkg_color
0001af 925f      	push frg_color
0001b0 3031      	cpi mode, 0x01
0001b1 f421      	brne drw_clk_hrd
0001b2 3080      	cpi mode_tmp, 0x00
0001b3 f411      	brne drw_clk_hrd
0001b4 2e41      	mov bkg_color, tmp1
0001b5 2455      	clr frg_color
                 drw_clk_hrd:
0001b6 d18a      	rcall LCD_DrawBCD
0001b7 905f      	pop frg_color
0001b8 904f      	pop bkg_color
0001b9 e30a      	ldi tmp,':'
0001ba d1d6      	rcall LCD_DrawChar
0001bb c002      	rjmp drw_clk_minute
                 drw_clk_minute_skip:
0001bc e200      	ldi tmp, 32
0001bd 0e20      	add lcd_x, tmp
                 drw_clk_minute:
0001be ff70      	sbrs refresh, 0
0001bf c012      	rjmp drw_clk_sec_skip
0001c0 7f7e      	andi refresh, 0b11111110
0001c1 e100      	ldi tmp, 16
0001c2 0e20      	add lcd_x, tmp
0001c3 e0f1
0001c4 e0e2      	LASZ minute
0001c5 8100      	ld tmp, Z
0001c6 924f      	push bkg_color
0001c7 925f      	push frg_color
0001c8 3031      	cpi mode, 0x01
0001c9 f421      	brne drw_clk_mnd
0001ca 3081      	cpi mode_tmp, 0x01
0001cb f411      	brne drw_clk_mnd
0001cc 2e41      	mov bkg_color, tmp1
0001cd 2455      	clr frg_color
                 drw_clk_mnd:
0001ce d172      	rcall LCD_DrawBCD
0001cf 905f      	pop frg_color
0001d0 904f      	pop bkg_color
0001d1 c002      	rjmp drw_clk_sec
                 drw_clk_sec_skip:
0001d2 e300      	ldi tmp, 32+16
0001d3 0e20      	add lcd_x, tmp
                 drw_clk_sec:	; рисуем секунды
0001d4 e001      	ldi tmp, 1
0001d5 2e60      	mov lcd_mx, tmp
0001d6 2e70      	mov lcd_my, tmp
0001d7 e00e      	ldi tmp, 14
0001d8 0e30      	add lcd_y, tmp
                 
0001d9 e0f1
0001da e0e1      	LASZ second
0001db 8100      	ld tmp, Z
0001dc 924f      	push bkg_color
0001dd 925f      	push frg_color
0001de 3031      	cpi mode, 0x01
0001df f421      	brne drw_clk_sed
0001e0 3082      	cpi mode_tmp, 0x02
0001e1 f411      	brne drw_clk_sed
0001e2 2e41      	mov bkg_color, tmp1
0001e3 2455      	clr frg_color
                 drw_clk_sed:
0001e4 d15c      	rcall LCD_DrawBCD
0001e5 905f      	pop frg_color
0001e6 904f      	pop bkg_color
                 
0001e7 911f      	pop tmp1
0001e8 910f      	pop tmp
0001e9 91ef      	pop ZL
0001ea 91ff      	pop ZH
0001eb 9508      	ret
                 ;---------------------
                 Time_Date_Inc:
0001ec 93ff      	push ZH
0001ed 93ef      	push ZL
0001ee 930f      	push tmp
                 
0001ef e0f1      	ldi ZH, high(dsecond)
0001f0 e0e0      	ldi ZL, low(dsecond)
0001f1 d073      	rcall BCD_Inc	; доли секунды (задаются константой sec_part)
0001f2 8100      	ld tmp, Z
0001f3 3008      	cpi tmp, sec_part
0001f4 f009      	breq tdi_cnt1
0001f5 c051      	rjmp tdi_end
                 tdi_cnt1:
0001f6 2700      	clr tmp
0001f7 9af3      	sbi GPIOR0, 3
0001f8 9301      	st Z+, tmp		
0001f9 d06b      	rcall BCD_Inc	; секунды
0001fa 8100      	ld tmp, Z
0001fb 3600      	cpi tmp, 0x60
0001fc f009      	breq tdi_cnt2
0001fd c049      	rjmp tdi_end
                 tdi_cnt2:
0001fe 2700      	clr tmp
0001ff 9af4      	sbi GPIOR0, 4
000200 6071      	ori refresh, 0b00000001
000201 9301      	st Z+, tmp
000202 d062      	rcall BCD_Inc ; минуты
000203 8100      	ld tmp, Z
000204 3600      	cpi tmp, 0x60
000205 f009      	breq tdi_cnt3
000206 c040      	rjmp tdi_end
                 tdi_cnt3:
000207 2700      	clr tmp
000208 9af5      	sbi GPIOR0, 5
000209 6072      	ori refresh, 0b00000010
00020a 9301      	st Z+, tmp
00020b d059      	rcall BCD_Inc ; часы
00020c 8100      	ld tmp, Z
00020d 3204      	cpi tmp, 0x24
00020e f5c1      	brne tdi_end
00020f 2700      	clr tmp
000210 9af6      	sbi GPIOR0, 6
000211 6074      	ori refresh, 0b00000100
000212 9301      	st Z+, tmp
                 	
000213 93ff      	push ZH	; дни недели
000214 93ef      	push ZL
000215 e0f1      	ldi ZH, high(day_of_week)
000216 e0e8      	ldi ZL, low(day_of_week)
000217 8100      	ld tmp, Z
000218 9503      	inc tmp
000219 3007      	cpi tmp, 0x07
00021a f409      	brne tdi_cnt
00021b 2700      	clr tmp
                 tdi_cnt:
00021c 8300      	st Z, tmp
00021d 91ef      	pop ZL
00021e 91ff      	pop ZH
                 
00021f d045      	rcall BCD_Inc ; дни
000220 8100      	ld tmp, Z
                 ; получаем число дней в месяце в регистр tmp1
000221 931f      	push tmp1
000222 93ff      	push ZH
000223 93ef      	push ZL
000224 930f      	push tmp
000225 e0f1      	ldi ZH, high(month)
000226 e0e5      	ldi ZL, low(month)
000227 8100      	ld tmp, Z	; в tmp - номер месяца в формате BCD
000228 fd04      	sbrc tmp, 4
000229 5006      	subi tmp, 6	; в tmp номер месяца в binary
00022a 950a      	dec tmp
00022b e0fd      	ldi ZH, high(month_len<<1)
00022c efe4      	ldi ZL, low(month_len<<1)
00022d 0fe0      	add ZL, tmp
00022e e000      	ldi tmp, 0x00
00022f 1ff0      	adc ZH, tmp
000230 9114      	lpm tmp1, Z
000231 910f      	pop tmp
000232 91ef      	pop ZL
000233 91ff      	pop ZH
000234 1701      	cp tmp, tmp1
000235 911f      	pop tmp1
000236 f481      	brne tdi_end
000237 e001      	ldi tmp, 0x01
000238 9af7      	sbi GPIOR0, 7
000239 6078      	ori refresh, 0b00001000
00023a 9301      	st Z+, tmp
00023b d029      	rcall BCD_Inc ; месяцы
00023c 8100      	ld tmp, Z
00023d 3103      	cpi tmp, 0x13
00023e f441      	brne tdi_end
00023f 6170      	ori refresh, 0b00010000
000240 e001      	ldi tmp, 0x01
000241 9301      	st Z+, tmp
000242 d022      	rcall BCD_Inc ; годы
000243 9bf0      	sbis GPIOR0, 0
000244 c002      	rjmp tdi_end
000245 9631      	adiw ZL, 0x01
000246 d01e      	rcall BCD_Inc
                 tdi_end:
000247 910f      	pop tmp
000248 91ef      	pop ZL
000249 91ff      	pop ZH
00024a 9508      	ret
                 ;----------------------
                 BCD_Add:
                 ; in: Z - указывает на BCD число в памяти
                 ;     tmp - второе слагаемое (BCD)
                 ; out: число по адресу Z
                 ; GPIOR0(bit0) - BCD carry
                 	
00024b 931f      	push tmp1
00024c 930f      	push tmp
                 
00024d 98f0      	cbi GPIOR0, 0
00024e 8110      	ld tmp1, Z
00024f 0f10      	add tmp1, tmp
000250 f02d      	brhs lsd_correct
000251 931f      	push tmp1
000252 701f      	andi tmp1, 0x0F
000253 301a      	cpi tmp1, 0x0A
000254 911f      	pop tmp1
000255 f010      	brlo msd
                 lsd_correct:
000256 e006      	ldi tmp, 0x06
000257 0f10      	add tmp1, tmp
                 msd:
000258 931f      	push tmp1
000259 7f10      	andi tmp1, 0xF0
00025a 3a10      	cpi tmp1, 0xA0
00025b 911f      	pop tmp1
00025c f020      	brlo bcd_end
00025d e600      	ldi tmp, 0x60
00025e 0f10      	add tmp1, tmp
00025f f408      	brcc bcd_end
000260 9af0      	sbi GPIOR0, 0 
                 bcd_end:
000261 8310      	st Z, tmp1
                 
000262 910f      	pop tmp
000263 911f      	pop tmp1	
000264 9508      	ret
                 ;-------------------
                 BCD_Inc:
                 ; in: Z - указывает на BCD число в памяти
                 ; out: число по адресу Z
000265 930f      	push tmp
000266 e001      	ldi tmp, 0x01
000267 dfe3      	rcall BCD_Add
000268 910f      	pop tmp
000269 9508      	ret
                 ;-------------------
                 Send_SPI:
                 SPI_Send:
00026a 930f      	push tmp
00026b bd0e      	out SPDR, tmp
                 #ifndef DEBUG
                 spi_wait:
00026c b50d      	in tmp, SPSR
00026d ff07      	sbrs tmp, SPIF
00026e cffd      	rjmp spi_wait
                 #endif
00026f 910f      	pop tmp
000270 9508      	ret	
                 ;--------------------
                 delay_10us:
000271 930f      	push tmp
000272 e108      	ldi tmp, 24
                 
                 delay_loop:
000273 950a      	dec tmp
000274 f7f1      	brne delay_loop
                 
000275 910f      	pop tmp
000276 9508      	ret
                 ;--------------------
                 delay_100ms:
                 #ifndef DEBUG
000277 e120      	ldi tmp2, 16
                 d100_w:
000278 3020      	cpi tmp2, 0x00
000279 f7f1      	brne d100_w
                 #endif
00027a 9508      	ret
                 ;--------------------
                 delay_10ms:
                 #ifndef DEBUG
00027b e022      	ldi tmp2, 2
                 d10_w:
00027c 3020      	cpi tmp2, 0x00
00027d f7f1      	brne d10_w
                 #endif
00027e 9508      	ret
                 ;--------------------
                 LCD_DrawDate:
00027f 93ff      	push ZH
000280 93ef      	push ZL
000281 930f      	push tmp
000282 931f      	push tmp1
                 
000283 ef1f      	ldi tmp1, 0xFF
                 
000284 e001      	ldi tmp, 1
000285 2e60      	mov lcd_mx, tmp
000286 2e70      	mov lcd_my, tmp
                 
000287 e005      	ldi tmp, 0x05
000288 2e30      	mov lcd_y, tmp
                 
000289 e0f1
00028a e0e4      	LASZ day
                 
00028b ff72      	sbrs refresh, 2
00028c c052      	rjmp drw_dat_end	; если не надо обновить день, то и "автоматом" не надо обновить год, месяц и день недели
                 
00028d 7f7b      	andi refresh, 0b11111011
00028e 2e20      	mov lcd_x, tmp ; риусем число
00028f 8100      	ld tmp, Z
                 
000290 924f      	push bkg_color
000291 925f      	push frg_color
000292 3031      	cpi mode, 0x01
000293 f421      	brne drw_dat_day
000294 3083      	cpi mode_tmp, 0x03
000295 f411      	brne drw_dat_day
000296 2e41      	mov bkg_color, tmp1
000297 2455      	clr frg_color
                 drw_dat_day:
000298 d0a8      	rcall LCD_DrawBCD
000299 905f      	pop frg_color
00029a 904f      	pop bkg_color
                 
00029b 924f      	push bkg_color
00029c 925f      	push frg_color
00029d 3031      	cpi mode, 0x01
00029e f421      	brne drw_dat_dayw
00029f 3084      	cpi mode_tmp, 0x04
0002a0 f411      	brne drw_dat_dayw
0002a1 2e41      	mov bkg_color, tmp1
0002a2 2455      	clr frg_color
                 drw_dat_dayw:
0002a3 d040      	rcall LCD_DrawDayOfWeek
0002a4 905f      	pop frg_color
0002a5 904f      	pop bkg_color
                 
0002a6 e005      	ldi tmp, 0x05
0002a7 2e30      	mov lcd_y, tmp
0002a8 e0f1
0002a9 e0e4      	LASZ day
                 
0002aa ff73      	sbrs refresh, 3
0002ab c033      	rjmp drw_dat_end
                 
0002ac 7f77      	andi refresh, 0b11110111
0002ad e10d      	ldi tmp, 0x05+(0x08*3)
0002ae 2e20      	mov lcd_x, tmp
                 
0002af 9631      	adiw ZL, 0x01
0002b0 9101      	ld tmp, Z+
0002b1 fd04      	sbrc tmp, 4
0002b2 5006      	subi tmp, 6	; в tmp номер месяца в binary
0002b3 950a      	dec tmp
0002b4 0f00      	lsl tmp
0002b5 0f00      	lsl tmp
0002b6 93ff      	push ZH
0002b7 93ef      	push ZL
0002b8 e0fe
0002b9 e0e0      	LAPZ month_names
0002ba 0fe0      	add ZL, tmp
0002bb e000      	ldi tmp, 0x00
0002bc 1ff0      	adc ZH, tmp	; Z указывает на название месяца
                 
0002bd 924f      	push bkg_color
0002be 925f      	push frg_color
0002bf 3031      	cpi mode, 0x01
0002c0 f421      	brne drw_dat_mon
0002c1 3085      	cpi mode_tmp, 0x05
0002c2 f411      	brne drw_dat_mon
0002c3 2e41      	mov bkg_color, tmp1
0002c4 2455      	clr frg_color
                 drw_dat_mon:
0002c5 d091      	rcall LCD_DrawStringPM
0002c6 905f      	pop frg_color
0002c7 904f      	pop bkg_color
0002c8 91ef      	pop ZL
0002c9 91ff      	pop ZH
                 
0002ca ff74      	sbrs refresh, 4
0002cb c013      	rjmp drw_dat_end
                 
0002cc 7e7f      	andi refresh, 0b11101111
0002cd e30d      	ldi tmp, 0x05+(0x08*7)
0002ce 2e20      	mov lcd_x, tmp
0002cf 9631      	adiw ZL, 0x01
0002d0 8100      	ld tmp, Z
0002d1 924f      	push bkg_color
0002d2 925f      	push frg_color
0002d3 3031      	cpi mode, 0x01
0002d4 f421      	brne drw_dat_year
0002d5 3086      	cpi mode_tmp, 0x06
0002d6 f411      	brne drw_dat_year
0002d7 2e41      	mov bkg_color, tmp1
0002d8 2455      	clr frg_color
                 drw_dat_year:
0002d9 d067      	rcall LCD_DrawBCD
0002da 9731      	sbiw ZL, 0x01
0002db 8100      	ld tmp, Z
0002dc d064      	rcall LCD_DrawBCD
0002dd 905f      	pop frg_color
0002de 904f      	pop bkg_color
                 drw_dat_end:
0002df 911f      	pop tmp1
0002e0 910f      	pop tmp
0002e1 91ef      	pop ZL
0002e2 91ff      	pop ZH
0002e3 9508      	ret
                 ;--------------------
                 LCD_DrawDayOfWeek:
0002e4 931f      	push tmp1
0002e5 e0f1
0002e6 e0e8      	LASZ day_of_week 	; Рисуем день недели
0002e7 8100      	ld tmp, Z
                 
0002e8 2711      	clr tmp1
0002e9 e0fe
0002ea e7ec      	LAPZ week_day_center_coo
0002eb 0fe0      	add ZL, tmp
0002ec 1ff1      	adc ZH, tmp1
0002ed 9114      	lpm tmp1, Z
                 
0002ee 2e21      	mov lcd_x, tmp1
0002ef e31c      	ldi tmp1, 60
0002f0 2e31      	mov lcd_y, tmp1
                 
0002f1 e0fe
0002f2 e6ee      	LAPZ week_day_table
0002f3 0f00      	lsl tmp
0002f4 0fe0      	add ZL, tmp
0002f5 2700      	clr tmp
0002f6 1ff0      	adc ZH, tmp
0002f7 9105      	lpm tmp, Z+
0002f8 9114      	lpm tmp1, Z
0002f9 2fe0      	mov ZL, tmp
0002fa 2ff1      	mov ZH, tmp1
0002fb d05b      	rcall LCD_DrawStringPM
0002fc 911f      	pop tmp1
0002fd 9508      	ret
                 ;--------------------
                 .include "Sie_c60.inc"	; Siemens C60 routines
                 
                 
                 LCD_DrawBar:
                 ;in: lcd_x, lcd_y - координаты левого верхнего угла
                 ; tmp, tmp1 - ширина и высота
0002fe 930f      	push tmp
0002ff 931f      	push tmp1
000300 923f      	push lcd_y
000301 934f      	push r20
000302 935f      	push r21
                 
000303 2f40      	mov r20, tmp
000304 2f51      	mov r21, tmp1
                 
000305 9829
000306 0000      	CS_LOW
                 dr_bar_col:
000307 d0ca      	rcall LCD_GotoXY
                 
000308 9828
000309 0000      	CMD_SET
00030a e20c      	ldi tmp, 0x2C
00030b df5e      	rcall Send_SPI
                 
00030c 9a28
00030d 0000      	DATA_SET
00030e 2d05      	mov tmp, frg_color
00030f 934f      	push r20
                 dr_bar_line:
000310 df59      	rcall Send_SPI	
000311 954a      	dec r20
000312 f7e9      	brne dr_bar_line
000313 914f      	pop r20
                 
000314 9433      	inc lcd_y
000315 955a      	dec r21
000316 f781      	brne dr_bar_col
                 
000317 9a29
000318 0000      	CS_HIGH
                 
000319 915f      	pop r21
00031a 914f      	pop r20
00031b 903f      	pop lcd_y
00031c 910f      	pop tmp
00031d 911f      	pop tmp1
00031e 9508      	ret
                 ;--------------------
                 LCD_DrawBkgBar:
                 ; in: то же что и DrawBar
00031f 930f      	push tmp
000320 2d05      	mov tmp, frg_color
000321 2c54      	mov frg_color, bkg_color
000322 2e40      	mov bkg_color, tmp
000323 910f      	pop tmp
000324 dfd9      	rcall LCD_DrawBar
000325 930f      	push tmp
000326 2d05      	mov tmp, frg_color
000327 2c54      	mov frg_color, bkg_color
000328 2e40      	mov bkg_color, tmp
000329 910f      	pop tmp
00032a 9508      	ret
                 ;--------------------
                 LCD_IdleOn:
00032b 930f      	push tmp
00032c 9829
00032d 0000      	CS_LOW
00032e 9828
00032f 0000      	CMD_SET
000330 e309      	ldi tmp, 0x39
000331 df38      	rcall Send_SPI
000332 9a29
000333 0000      	CS_HIGH
000334 910f      	pop tmp
000335 9508      	ret
                 ;--------------------
                 LCD_IdleOff:
000336 930f      	push tmp
000337 9829
000338 0000      	CS_LOW
000339 9828
00033a 0000      	CMD_SET
00033b e308      	ldi tmp, 0x38
00033c df2d      	rcall Send_SPI
00033d 9a29
00033e 0000      	CS_HIGH
00033f 910f      	pop tmp
000340 9508      	ret
                 ;--------------------
                 LCD_DrawBCD:
                 ;in: tmp - число
000341 930f      	push tmp
000342 934f      	push r20
                 
000343 2d46      	mov r20, lcd_mx
000344 0f44      	lsl r20
000345 0f44      	lsl r20
000346 0f44      	lsl r20
                 
000347 930f      	push tmp
000348 9506      	lsr tmp
000349 9506      	lsr tmp
00034a 9506      	lsr tmp
00034b 9506      	lsr tmp
00034c 5d00      	subi tmp, 0xD0 ; +0x30
00034d d043      	rcall LCD_DrawChar
00034e 0e24      	add lcd_x, r20
00034f 910f      	pop tmp
000350 700f      	andi tmp, 0x0F
000351 5d00      	subi tmp, 0xD0
000352 d03e      	rcall LCD_DrawChar
000353 0e24      	add lcd_x, r20
                 
000354 914f      	pop r20
000355 910f      	pop tmp
000356 9508      	ret
                 ;--------------------
                 LCD_DrawStringPM:
                 ; in: Z - строка во flash ASCIIZ
000357 930f      	push tmp
000358 93ff      	push ZH
000359 93ef      	push ZL
00035a 934f      	push r20
                 
00035b 2d46      	mov r20, lcd_mx ; инкремент по X
00035c 0f44      	lsl r20
00035d 0f44      	lsl r20
00035e 0f44      	lsl r20
                 drst:
00035f 9105      	lpm tmp, Z+
000360 2300      	tst tmp
000361 f031      	breq drst_end
000362 3800      	cpi tmp, 0x80
000363 f008      	brlo dr_ansi
000364 5400      	subi tmp, 0x40	; Перевод из Win-1251 в CP866 для заглавных букв (а других русских и нет тут :-)
                 dr_ansi:
000365 d02b      	rcall LCD_DrawChar
000366 0e24      	add lcd_x, r20
000367 cff7      	rjmp drst
                 drst_end:
000368 914f      	pop r20
000369 91ef      	pop ZL
00036a 91ff      	pop ZH
00036b 910f      	pop tmp
00036c 9508      	ret
                 ;--------------------
                 LCD_DrawByte:
                 ; in: tmp - байт
00036d 930f      	push tmp
00036e 934f      	push r20
                 
00036f 2d46      	mov r20, lcd_mx
000370 0f44      	lsl r20
000371 0f44      	lsl r20
000372 0f44      	lsl r20
                 
000373 930f      	push tmp
000374 9502      	swap tmp
000375 700f      	andi tmp, 0x0F
000376 300a      	cpi tmp, 0x0A
000377 f018      	brlo dr_b09
000378 5c09      	subi tmp, (0x100 - 'A' + 0x0A)
000379 d017      	rcall LCD_DrawChar
00037a c002      	rjmp dr_b_lnibble
                 dr_b09:
00037b 5d00      	subi tmp, 0xD0
00037c d014      	rcall LCD_DrawChar
                 dr_b_lnibble:
00037d 0e24      	add lcd_x, r20
00037e 910f      	pop tmp
00037f 700f      	andi tmp, 0x0F
000380 300a      	cpi tmp, 0x0A
000381 f018      	brlo dr_b09_1
000382 5c09      	subi tmp, (0x100 - 'A' + 0x0A)
000383 d00d      	rcall LCD_DrawChar
000384 c002      	rjmp dr_b_end
                 dr_b09_1:
000385 5d00      	subi tmp, 0xD0
000386 d00a      	rcall LCD_DrawChar
                 dr_b_end:
000387 0e24      	add lcd_x, r20
000388 914f      	pop r20
000389 910f      	pop tmp
00038a 9508      	ret
                 ;--------------------
                 LCD_DrawWord:
                 ; tmp:tmp1 - слово
00038b 930f      	push tmp
                 
00038c dfe0      	rcall LCD_DrawByte
00038d 2f01      	mov tmp, tmp1
00038e dfde      	rcall LCD_DrawByte
                 
00038f 910f      	pop tmp
000390 9508      	ret
                 ;--------------------
                 LCD_DrawChar:
                 ; in: tmp - ASCII код символа
                 ;	lcd_x, lcd_y - координаты
                 ; lcd_mx - масштаб по x
                 ; lcd_my - масштаб по y
                 
                 ;	cpi tmp, 0x20
                 ;	brlo drw_chr_end
                 	
000391 930f      	push tmp
000392 931f      	push tmp1
000393 93ff      	push ZH
000394 93ef      	push ZL
000395 922f      	push lcd_x
000396 923f      	push lcd_y
000397 934f      	push r20	; индекс по y
000398 935f      	push r21	; индекс по x
                 	
000399 e0f9      	ldi ZH, high(font8x8<<1)
00039a efe4      	ldi ZL, low(font8x8<<1)
00039b 5200      	subi tmp, 0x20
00039c 2711      	clr tmp1 ; tmp1:tmp * 8
00039d 1f00      	rol tmp
00039e 1f11      	rol tmp1
00039f 1f00      	rol tmp
0003a0 1f11      	rol tmp1
0003a1 1f00      	rol tmp
0003a2 1f11      	rol tmp1 ; tmp1:tmp - смещение
0003a3 0fe0      	add ZL, tmp
0003a4 1ff1      	adc ZH, tmp1
                 
0003a5 e048      	ldi r20, 0x08
0003a6 9829
0003a7 0000      	CS_LOW
                 cdrw:
0003a8 9115      	lpm tmp1, Z+
0003a9 927f      	push lcd_my
                 mydrw:
0003aa d027      	rcall LCD_GotoXY
0003ab 9828
0003ac 0000      	CMD_SET
0003ad e20c      	ldi tmp, 0x2C
0003ae debb      	rcall Send_SPI
0003af 9a28
0003b0 0000      	DATA_SET
0003b1 e058      	ldi r21, 0x08
0003b2 931f      	push tmp1
                 ldrw:
0003b3 ff17      	sbrs tmp1, 7
0003b4 c002      	rjmp drw_bkg
0003b5 2d05      	mov tmp, frg_color
0003b6 c001      	rjmp drw
                 drw_bkg:
0003b7 2d04      	mov tmp, bkg_color
                 drw:
0003b8 926f      	push lcd_mx
                 mxdrw:
0003b9 deb0      	rcall Send_SPI
0003ba 946a      	dec lcd_mx
0003bb f7e9      	brne mxdrw
0003bc 906f      	pop lcd_mx
                 
0003bd 0f11      	lsl tmp1
0003be 955a      	dec r21
0003bf f799      	brne ldrw
0003c0 911f      	pop tmp1
0003c1 9433      	inc lcd_y
0003c2 947a      	dec lcd_my
0003c3 f731      	brne mydrw
0003c4 907f      	pop lcd_my
0003c5 954a      	dec r20
0003c6 f709      	brne cdrw	
                 
0003c7 9a29
0003c8 0000      	CS_HIGH	
                 
0003c9 915f      	pop r21
0003ca 914f      	pop r20
0003cb 903f      	pop lcd_y
0003cc 902f      	pop lcd_x
0003cd 91ef      	pop ZL
0003ce 91ff      	pop ZH
0003cf 911f      	pop tmp1
0003d0 910f      	pop tmp	
                 drw_chr_end:
0003d1 9508      	ret
                 ;--------------------
                 LCD_GotoXY:
                 ; вход lcd_x, lcd_y
0003d2 930f      	push tmp
0003d3 9828
0003d4 0000      	CMD_SET
0003d5 e20a      	ldi tmp, 0x2A
0003d6 de93      	rcall Send_SPI
0003d7 9a28
0003d8 0000      	DATA_SET
0003d9 2d02      	mov tmp, lcd_x
0003da de8f      	rcall Send_SPI
0003db e604      	ldi tmp, 100
0003dc de8d      	rcall Send_SPI
0003dd 9828
0003de 0000      	CMD_SET
0003df e20b      	ldi tmp, 0x2B
0003e0 de89      	rcall Send_SPI
0003e1 9a28
0003e2 0000      	DATA_SET
0003e3 2d03      	mov tmp, lcd_y
0003e4 9503      	inc tmp
0003e5 de84      	rcall Send_SPI
0003e6 e500      	ldi tmp, 80
0003e7 de82      	rcall Send_SPI
0003e8 910f      	pop tmp
0003e9 9508      	ret
                 ;--------------------
                 LCD_C60_Init:
0003ea 930f      	push tmp
                 ;; LCD RESET	
0003eb 9840
0003ec 0000      	LCD_RESET_LOW
0003ed de89      	rcall delay_100ms
0003ee 9a40
0003ef 0000      	LCD_RESET_HIGH
0003f0 de86      	rcall delay_100ms
0003f1 de85      	rcall delay_100ms
0003f2 de84      	rcall delay_100ms
0003f3 de83      	rcall delay_100ms
0003f4 de82      	rcall delay_100ms
0003f5 9a29
0003f6 0000      	CS_HIGH
0003f7 de79      	rcall delay_10us
0003f8 9829
0003f9 0000      	CS_LOW
                 
                 ;   Send_to_lcd(CMD,0x01); //reset sw
                 ;   DelayMs(50);
                 ;   Send_to_lcd(CMD,0xc6); //initial escape
                 ;   DelayMs(40);
                 ;   Send_to_lcd(CMD,0xb9); //Refresh set
                 ;   Send_to_lcd(DAT,0x00);
0003fa 9828
0003fb 0000      	CMD_SET
0003fc e001      	ldi tmp, 0x01
0003fd de6c      	rcall Send_SPI
0003fe de7c      	rcall delay_10ms
0003ff de7b      	rcall delay_10ms
000400 de7a      	rcall delay_10ms
000401 de79      	rcall delay_10ms
000402 de78      	rcall delay_10ms
000403 ec06      	ldi tmp, 0xC6
000404 de65      	rcall Send_SPI
000405 de75      	rcall delay_10ms
000406 de74      	rcall delay_10ms
000407 de73      	rcall delay_10ms
000408 de72      	rcall delay_10ms
000409 eb09      	ldi tmp, 0xB9
00040a de5f      	rcall Send_SPI
00040b 9a28
00040c 0000      	DATA_SET
00040d e000      	ldi tmp, 0x00
00040e de5b      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb6); //Display control
                 ;   Send_to_lcd(DAT,0x80); //
                 ;   Send_to_lcd(DAT,0x04); //
                 ;   Send_to_lcd(DAT,0x8a); //
                 ;   Send_to_lcd(DAT,0x54); //
                 ;   Send_to_lcd(DAT,0x45); //
                 ;   Send_to_lcd(DAT,0x52); //
                 ;   Send_to_lcd(DAT,0x43); //
00040f 9828
000410 0000      	CMD_SET
000411 eb06      	ldi tmp, 0xB6
000412 de57      	rcall Send_SPI
000413 9a28
000414 0000      	DATA_SET
000415 e800      	ldi tmp, 0x80
000416 de53      	rcall Send_SPI
000417 e004      	ldi tmp, 0x04
000418 de51      	rcall Send_SPI
000419 e80a      	ldi tmp, 0x8A
00041a de4f      	rcall Send_SPI
00041b e504      	ldi tmp, 0x54
00041c de4d      	rcall Send_SPI
00041d e405      	ldi tmp, 0x45
00041e de4b      	rcall Send_SPI
00041f e502      	ldi tmp, 0x52
000420 de49      	rcall Send_SPI
000421 e403      	ldi tmp, 0x43
000422 de47      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb3); //Gray scale position set 0
                 ;   Send_to_lcd(DAT,0x02); //
                 ;   Send_to_lcd(DAT,0x0a); //
                 ;   Send_to_lcd(DAT,0x15); //
                 ;   Send_to_lcd(DAT,0x1f); //
                 ;   Send_to_lcd(DAT,0x28); //
                 ;   Send_to_lcd(DAT,0x30); //
                 ;   Send_to_lcd(DAT,0x37); //
                 ;   Send_to_lcd(DAT,0x3f); //
                 ;   Send_to_lcd(DAT,0x47); //
                 ;   Send_to_lcd(DAT,0x4c); //
                 ;   Send_to_lcd(DAT,0x54); //
                 ;   Send_to_lcd(DAT,0x65); //
                 ;   Send_to_lcd(DAT,0x75); //
                 ;   Send_to_lcd(DAT,0x80); //
                 ;   Send_to_lcd(DAT,0x85); //
000423 9828
000424 0000      	CMD_SET
000425 eb03      	ldi tmp, 0xb3
000426 de43      	rcall Send_SPI
000427 9a28
000428 0000      	DATA_SET
000429 e002      	ldi tmp, 0x02
00042a de3f      	rcall Send_SPI
00042b e00a      	ldi tmp, 0x0a
00042c de3d      	rcall Send_SPI
00042d e105      	ldi tmp, 0x15
00042e de3b      	rcall Send_SPI
00042f e10f      	ldi tmp, 0x1f
000430 de39      	rcall Send_SPI
000431 e208      	ldi tmp, 0x28
000432 de37      	rcall Send_SPI
000433 e300      	ldi tmp, 0x30
000434 de35      	rcall Send_SPI
000435 e307      	ldi tmp, 0x37
000436 de33      	rcall Send_SPI
000437 e30f      	ldi tmp, 0x3F
000438 de31      	rcall Send_SPI
000439 e407      	ldi tmp, 0x47
00043a de2f      	rcall Send_SPI
00043b e40c      	ldi tmp, 0x4c
00043c de2d      	rcall Send_SPI
00043d e504      	ldi tmp, 0x54
00043e de2b      	rcall Send_SPI
00043f e605      	ldi tmp, 0x65
000440 de29      	rcall Send_SPI
000441 e705      	ldi tmp, 0x75
000442 de27      	rcall Send_SPI
000443 e800      	ldi tmp, 0x80
000444 de25      	rcall Send_SPI
000445 e805      	ldi tmp, 0x85
000446 de23      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb5); //Gamma curve
                 ;   Send_to_lcd(DAT,0x01); //
000447 9828
000448 0000      	CMD_SET
000449 eb05      	ldi tmp, 0xB5
00044a de1f      	rcall Send_SPI
00044b 9a28
00044c 0000      	DATA_SET
00044d e001      	ldi tmp, 0x01
00044e de1b      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xb7); //Temperature gradient
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x00); //
00044f 9828
000450 0000      	CMD_SET
000451 eb07      	ldi tmp, 0xB7
000452 de17      	rcall Send_SPI
000453 9a28
000454 0000      	DATA_SET
000455 e000      	ldi tmp, 0x00
000456 de13      	rcall Send_SPI
000457 de12      	rcall Send_SPI
000458 de11      	rcall Send_SPI
000459 de10      	rcall Send_SPI
00045a de0f      	rcall Send_SPI
00045b de0e      	rcall Send_SPI
00045c de0d      	rcall Send_SPI
00045d de0c      	rcall Send_SPI
00045e de0b      	rcall Send_SPI
00045f de0a      	rcall Send_SPI
000460 de09      	rcall Send_SPI
000461 de08      	rcall Send_SPI
000462 de07      	rcall Send_SPI
000463 de06      	rcall Send_SPI
000464 de05      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xbd); //Common driver output select
                 ;   Send_to_lcd(DAT,0x00); //
000465 9828
000466 0000      	CMD_SET
000467 eb0d      	ldi tmp, 0xBD
000468 de01      	rcall Send_SPI
000469 9a28
00046a 0000      	DATA_SET
00046b e000      	ldi tmp, 0x00
00046c ddfd      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x36); //Memory access control
                 ;   Send_to_lcd(DAT,0x48); //
00046d 9828
00046e 0000      	CMD_SET
00046f e306      	ldi tmp, 0x36
000470 ddf9      	rcall Send_SPI
000471 9a28
000472 0000      	DATA_SET
000473 e408      	ldi tmp, 0b01001000
000474 ddf5      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x2d); //Colour set
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x03); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x07); //
                 ;   Send_to_lcd(DAT,0x09); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0d); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x03); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x07); //
                 ;   Send_to_lcd(DAT,0x09); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0d); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 
                 ;   Send_to_lcd(DAT,0x00); //
                 ;   Send_to_lcd(DAT,0x05); //
                 ;   Send_to_lcd(DAT,0x0b); //
                 ;   Send_to_lcd(DAT,0x0f); //
                 	
000475 9828
000476 0000      	CMD_SET
000477 e20d      	ldi tmp, 0x2D
000478 ddf1      	rcall Send_SPI
000479 9a28
00047a 0000      	DATA_SET
00047b e000      	ldi tmp, 0x00
00047c dded      	rcall Send_SPI
00047d e003      	ldi tmp, 0x03
00047e ddeb      	rcall Send_SPI
00047f e005      	ldi tmp, 0x05
000480 dde9      	rcall Send_SPI
000481 e007      	ldi tmp, 0x07
000482 dde7      	rcall Send_SPI
000483 e009      	ldi tmp, 0x09
000484 dde5      	rcall Send_SPI
000485 e00b      	ldi tmp, 0x0b
000486 dde3      	rcall Send_SPI
000487 e00d      	ldi tmp, 0x0d
000488 dde1      	rcall Send_SPI
000489 e00f      	ldi tmp, 0x0f
00048a dddf      	rcall Send_SPI
00048b e000      	ldi tmp, 0x00
00048c dddd      	rcall Send_SPI
00048d e003      	ldi tmp, 0x03
00048e dddb      	rcall Send_SPI
00048f e005      	ldi tmp, 0x05
000490 ddd9      	rcall Send_SPI
000491 e007      	ldi tmp, 0x07
000492 ddd7      	rcall Send_SPI
000493 e009      	ldi tmp, 0x09
000494 ddd5      	rcall Send_SPI
000495 e00b      	ldi tmp, 0x0b
000496 ddd3      	rcall Send_SPI
000497 e00d      	ldi tmp, 0x0d
000498 ddd1      	rcall Send_SPI
000499 e00f      	ldi tmp, 0x0f
00049a ddcf      	rcall Send_SPI
                 
00049b e000      	ldi tmp, 0x00
00049c ddcd      	rcall Send_SPI
00049d e005      	ldi tmp, 0x05
00049e ddcb      	rcall Send_SPI
00049f e00b      	ldi tmp, 0x0b
0004a0 ddc9      	rcall Send_SPI
0004a1 e00f      	ldi tmp, 0x0f
0004a2 ddc7      	rcall Send_SPI
                 
                 ;   Send_to_lcd(CMD,0xba); //Voltage control
                 ;   Send_to_lcd(DAT,0x2f); //
                 ;   Send_to_lcd(DAT,0x03); //
0004a3 9828
0004a4 0000      	CMD_SET
0004a5 eb0a      	ldi tmp, 0xBA
0004a6 ddc3      	rcall Send_SPI
0004a7 9a28
0004a8 0000      	DATA_SET
0004a9 e20f      	ldi tmp, 0x2F
0004aa ddbf      	rcall Send_SPI
0004ab e003      	ldi tmp, 0x03
0004ac ddbd      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x25); //Send_to_lcd contrast
                 ;   Send_to_lcd(DAT,0x64); // Стоит поиграться со значением контраста, у меня в примере контраст 100, если больше то на дисплее ничего нет
                 ;   Send_to_lcd(DAT,0x61); //me контраст одинаковый для 0x6e и 0xee
0004ad 9828
0004ae 0000      	CMD_SET
0004af e205      	ldi tmp, 0x25
0004b0 ddb9      	rcall Send_SPI
0004b1 9a28
0004b2 0000      	DATA_SET
0004b3 e601      	ldi tmp, 0x61
0004b4 ddb5      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0xbe); //Power control
                 ;   Send_to_lcd(DAT,0x59); // me
                 ;   Send_to_lcd(DAT,0x58); // У меня пишется в этот регистр значение 0х58
0004b5 9828
0004b6 0000      	CMD_SET
0004b7 eb0e      	ldi tmp, 0xBE
0004b8 ddb1      	rcall Send_SPI
0004b9 9a28
0004ba 0000      	DATA_SET
0004bb e508      	ldi tmp, 0x58
0004bc ddad      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x3a); //interface pixel format
                 ;   Send_to_lcd(DAT,0x02); //me 8-и битный цвет
                 ;   Send_to_lcd(DAT,0x03); //12-и битный цвет
0004bd 9828
0004be 0000      	CMD_SET
0004bf e30a      	ldi tmp, 0x3A
0004c0 dda9      	rcall Send_SPI
0004c1 9a28
0004c2 0000      	DATA_SET
0004c3 e002      	ldi tmp, 0x02
0004c4 dda5      	rcall Send_SPI
0004c5 9828
0004c6 0000      	CMD_SET
0004c7 e201      	ldi tmp, 0x21	// Inverse colors
0004c8 dda1      	rcall Send_SPI
                 ;   Send_to_lcd(CMD,0x03); //Booster voltage ON
                 ;   DelayMs(40);
0004c9 e003      	ldi tmp, 0x03
0004ca dd9f      	rcall Send_SPI
0004cb ddaf      	rcall delay_10ms
0004cc ddae      	rcall delay_10ms
0004cd ddad      	rcall delay_10ms
0004ce ddac      	rcall delay_10ms
                 ;   Send_to_lcd(CMD,0x11); //sleep out
                 ;   DelayMs(20); //Перед включением ждем 20 миллисекунд 
0004cf e101      	ldi tmp, 0x11
0004d0 dd99      	rcall Send_SPI
0004d1 dda9      	rcall delay_10ms
0004d2 dda8      	rcall delay_10ms
                 ;   Send_to_lcd(CMD,0x29); //Display ON
0004d3 e209      	ldi tmp, 0x29
0004d4 dd95      	rcall Send_SPI
                 
0004d5 9a29
0004d6 0000      	CS_HIGH
0004d7 910f      	pop tmp
0004d8 9508      	ret
                 
                 ;--------------------
                 LCD_Clear:
0004d9 930f      	push tmp
0004da 931f      	push tmp1	
0004db 922f      	push lcd_x
0004dc 923f      	push lcd_y
0004dd 9829
0004de 0000      	CS_LOW
0004df 2700      	clr tmp
0004e0 2e20      	mov lcd_x, tmp
0004e1 2e30      	mov lcd_y, tmp
0004e2 deef      	rcall LCD_GotoXY
                 
0004e3 9828
0004e4 0000      	CMD_SET
0004e5 e20c      	ldi tmp, 0x2C
0004e6 dd83      	rcall Send_SPI
0004e7 9a28
0004e8 0000      	DATA_SET
0004e9 2d04      	mov tmp, bkg_color
                 		
0004ea e510      	ldi tmp1, 80
                 cclr:
0004eb 931f      	push tmp1
0004ec e615      	ldi tmp1, 101
                 lclr:
0004ed dd7c      	rcall Send_SPI
0004ee 951a      	dec tmp1
0004ef f7e9      	brne lclr
0004f0 911f      	pop tmp1
0004f1 951a      	dec tmp1
0004f2 f7c1      	brne cclr
                 
0004f3 9a29
0004f4 0000      	CS_HIGH
0004f5 903f      	pop lcd_y
0004f6 902f      	pop lcd_x
0004f7 911f      	pop tmp1
0004f8 910f      	pop tmp
0004f9 9508      	ret
                 
                 
                 
                 ;-------- Данные
                 
                 .include "CP866.inc"	; 8x8 font
                 
                 ; Font: CP866
                 font8x8:
                 ;.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;.db	0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E	; (.)
                 ;.db	0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E	; (.)
                 ;.db	0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00	; (.)
                 ;.db	0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00	; (.)
                 ;.db	0x38, 0x7C, 0x38, 0xFE, 0xFE, 0xD6, 0x10, 0x38	; (.)
                 ;.db	0x10, 0x38, 0x7C, 0xFE, 0xFE, 0x7C, 0x10, 0x38	; (.)
                 ;.db	0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00	; (.)
                 ;.db	0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF	; (.)
                 ;.db	0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00	; (.)
                 ;.db	0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF	; (.)
                 ;.db	0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78	; (.)
                 ;.db	0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18	; (.)
                 ;.db	0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0	; (.)
                 ;.db	0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0	; (.)
                 ;.db	0x18, 0xDB, 0x3C, 0xE7, 0xE7, 0x3C, 0xDB, 0x18	; (.)
                 ;.db	0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00	; (.)
                 ;.db	0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00	; (.)
                 ;.db	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18	; (.)
                 ;.db	0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00	; (.)
                 ;.db	0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00	; (.)
                 ;.db	0x3E, 0x61, 0x3C, 0x66, 0x66, 0x3C, 0x86, 0x7C	; (.)
                 ;.db	0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00	; (.)
                 ;.db	0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF	; (.)
                 ;.db	0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00	; (.)
                 ;.db	0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00	; (.)
                 ;.db	0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00	; (.)
                 ;.db	0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00	; (.)
                 ;.db	0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00	; (.)
0004fa 0000
0004fb 0000
0004fc 0000
0004fd 0000      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; ( )
0004fe 3c18
0004ff 183c
000500 0018
000501 0018      .db	0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00	; (!)
000502 6666
000503 0024
000504 0000
000505 0000      .db	0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00	; (")
000506 6c6c
000507 6cfe
000508 6cfe
000509 006c      .db	0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00	; (#)
00050a 3e18
00050b 3c60
00050c 7c06
00050d 0018      .db	0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00	; ($)
00050e c600
00050f 18cc
000510 6630
000511 00c6      .db	0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00	; (%)
000512 6c38
000513 7638
000514 ccdc
000515 0076      .db	0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00	; (&)
000516 1818
000517 0030
000518 0000
000519 0000      .db	0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00	; (')
00051a 180c
00051b 3030
00051c 1830
00051d 000c      .db	0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00	; (()
00051e 1830
00051f 0c0c
000520 180c
000521 0030      .db	0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00	; ())
000522 6600
000523 ff3c
000524 663c
000525 0000      .db	0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00	; (*)
000526 1800
000527 7e18
000528 1818
000529 0000      .db	0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00	; (+)
00052a 0000
00052b 0000
00052c 1800
00052d 3018      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30	; (,)
00052e 0000
00052f 7e00
000530 0000
000531 0000      .db	0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00	; (-)
000532 0000
000533 0000
000534 1800
000535 0018      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00	; (.)
000536 0c06
000537 3018
000538 c060
000539 0080      .db	0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00	; (/)
00053a 6c38
00053b d6c6
00053c 6cc6
00053d 0038      .db	0x38, 0x6C, 0xC6, 0xD6, 0xC6, 0x6C, 0x38, 0x00	; (0)
00053e 3818
00053f 1818
000540 1818
000541 007e      .db	0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00	; (1)
000542 c67c
000543 1c06
000544 6630
000545 00fe      .db	0x7C, 0xC6, 0x06, 0x1C, 0x30, 0x66, 0xFE, 0x00	; (2)
000546 c67c
000547 3c06
000548 c606
000549 007c      .db	0x7C, 0xC6, 0x06, 0x3C, 0x06, 0xC6, 0x7C, 0x00	; (3)
00054a 3c1c
00054b cc6c
00054c 0cfe
00054d 001e      .db	0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00	; (4)
00054e c0fe
00054f fcc0
000550 c606
000551 007c      .db	0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0xC6, 0x7C, 0x00	; (5)
000552 6038
000553 fcc0
000554 c6c6
000555 007c      .db	0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00	; (6)
000556 c6fe
000557 180c
000558 3030
000559 0030      .db	0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00	; (7)
00055a c67c
00055b 7cc6
00055c c6c6
00055d 007c      .db	0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00	; (8)
00055e c67c
00055f 7ec6
000560 0c06
000561 0078      .db	0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00	; (9)
000562 1800
000563 0018
000564 1800
000565 0018      .db	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00	; (:)
000566 1800
000567 0018
000568 1800
000569 3018      .db	0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30	; (;)
00056a 0c06
00056b 3018
00056c 0c18
00056d 0006      .db	0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00	; (<)
00056e 0000
00056f 007e
000570 7e00
000571 0000      .db	0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00	; (=)
000572 3060
000573 0c18
000574 3018
000575 0060      .db	0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00	; (>)
000576 c67c
000577 180c
000578 0018
000579 0018      .db	0x7C, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00	; (?)
00057a c67c
00057b dede
00057c c0de
00057d 0078      .db	0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00	; (@)
00057e 6c38
00057f fec6
000580 c6c6
000581 00c6      .db	0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00	; (A)
000582 66fc
000583 7c66
000584 6666
000585 00fc      .db	0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00	; (B)
000586 663c
000587 c0c0
000588 66c0
000589 003c      .db	0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00	; (C)
00058a 6cf8
00058b 6666
00058c 6c66
00058d 00f8      .db	0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00	; (D)
00058e 62fe
00058f 7868
000590 6268
000591 00fe      .db	0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00	; (E)
000592 62fe
000593 7868
000594 6068
000595 00f0      .db	0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00	; (F)
000596 663c
000597 c0c0
000598 66ce
000599 003a      .db	0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00	; (G)
00059a c6c6
00059b fec6
00059c c6c6
00059d 00c6      .db	0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00	; (H)
00059e 183c
00059f 1818
0005a0 1818
0005a1 003c      .db	0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00	; (I)
0005a2 0c1e
0005a3 0c0c
0005a4 cccc
0005a5 0078      .db	0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00	; (J)
0005a6 66e6
0005a7 786c
0005a8 666c
0005a9 00e6      .db	0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00	; (K)
0005aa 60f0
0005ab 6060
0005ac 6662
0005ad 00fe      .db	0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00	; (L)
0005ae eec6
0005af fefe
0005b0 c6d6
0005b1 00c6      .db	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00	; (M)
0005b2 e6c6
0005b3 def6
0005b4 c6ce
0005b5 00c6      .db	0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00	; (N)
0005b6 c67c
0005b7 c6c6
0005b8 c6c6
0005b9 007c      .db	0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (O)
0005ba 66fc
0005bb 7c66
0005bc 6060
0005bd 00f0      .db	0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00	; (P)
0005be c67c
0005bf c6c6
0005c0 cec6
0005c1 0e7c      .db	0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xCE, 0x7C, 0x0E	; (Q)
0005c2 66fc
0005c3 7c66
0005c4 666c
0005c5 00e6      .db	0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00	; (R)
0005c6 663c
0005c7 1830
0005c8 660c
0005c9 003c      .db	0x3C, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x3C, 0x00	; (S)
0005ca 7e7e
0005cb 185a
0005cc 1818
0005cd 003c      .db	0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00	; (T)
0005ce c6c6
0005cf c6c6
0005d0 c6c6
0005d1 007c      .db	0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (U)
0005d2 c6c6
0005d3 c6c6
0005d4 6cc6
0005d5 0038      .db	0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00	; (V)
0005d6 c6c6
0005d7 d6c6
0005d8 fed6
0005d9 006c      .db	0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00	; (W)
0005da c6c6
0005db 386c
0005dc c66c
0005dd 00c6      .db	0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00	; (X)
0005de 6666
0005df 3c66
0005e0 1818
0005e1 003c      .db	0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00	; (Y)
0005e2 c6fe
0005e3 188c
0005e4 6632
0005e5 00fe      .db	0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00	; (Z)
0005e6 303c
0005e7 3030
0005e8 3030
0005e9 003c      .db	0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00	; ([)
0005ea 60c0
0005eb 1830
0005ec 060c
0005ed 0002      .db	0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00	; (\)
0005ee 0c3c
0005ef 0c0c
0005f0 0c0c
0005f1 003c      .db	0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00	; (])
0005f2 3810
0005f3 c66c
0005f4 0000
0005f5 0000      .db	0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00	; (^)
0005f6 0000
0005f7 0000
0005f8 0000
0005f9 ff00      .db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF	; (_)
0005fa 1830
0005fb 000c
0005fc 0000
0005fd 0000      .db	0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00	; (`)
0005fe 0000
0005ff 0c78
000600 cc7c
000601 0076      .db	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00	; (a)
000602 60e0
000603 667c
000604 6666
000605 00dc      .db	0xE0, 0x60, 0x7C, 0x66, 0x66, 0x66, 0xDC, 0x00	; (b)
000606 0000
000607 c67c
000608 c6c0
000609 007c      .db	0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x00	; (c)
00060a 0c1c
00060b cc7c
00060c cccc
00060d 0076      .db	0x1C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00	; (d)
00060e 0000
00060f c67c
000610 c0fe
000611 007c      .db	0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00	; (e)
000612 663c
000613 f860
000614 6060
000615 00f0      .db	0x3C, 0x66, 0x60, 0xF8, 0x60, 0x60, 0xF0, 0x00	; (f)
000616 0000
000617 cc76
000618 7ccc
000619 f80c      .db	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8	; (g)
00061a 60e0
00061b 766c
00061c 6666
00061d 00e6      .db	0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00	; (h)
00061e 0018
00061f 1838
000620 1818
000621 003c      .db	0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00	; (i)
000622 0006
000623 0606
000624 6606
000625 3c66      .db	0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C	; (j)
000626 60e0
000627 6c66
000628 6c78
000629 00e6      .db	0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00	; (k)
00062a 1838
00062b 1818
00062c 1818
00062d 003c      .db	0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00	; (l)
00062e 0000
00062f feec
000630 d6d6
000631 00d6      .db	0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0x00	; (m)
000632 0000
000633 66dc
000634 6666
000635 0066      .db	0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x00	; (n)
000636 0000
000637 c67c
000638 c6c6
000639 007c      .db	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (o)
00063a 0000
00063b 66dc
00063c 7c66
00063d f060      .db	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0	; (p)
00063e 0000
00063f cc76
000640 7ccc
000641 1e0c      .db	0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E	; (q)
000642 0000
000643 76dc
000644 6060
000645 00f0      .db	0x00, 0x00, 0xDC, 0x76, 0x60, 0x60, 0xF0, 0x00	; (r)
000646 0000
000647 c07e
000648 067c
000649 00fc      .db	0x00, 0x00, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x00	; (s)
00064a 3030
00064b 30fc
00064c 3630
00064d 001c      .db	0x30, 0x30, 0xFC, 0x30, 0x30, 0x36, 0x1C, 0x00	; (t)
00064e 0000
00064f cccc
000650 cccc
000651 0076      .db	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00	; (u)
000652 0000
000653 c6c6
000654 6cc6
000655 0038      .db	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00	; (v)
000656 0000
000657 d6c6
000658 fed6
000659 006c      .db	0x00, 0x00, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00	; (w)
00065a 0000
00065b 6cc6
00065c 6c38
00065d 00c6      .db	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00	; (x)
00065e 0000
00065f c6c6
000660 7ec6
000661 fc06      .db	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC	; (y)
000662 0000
000663 4c7e
000664 3218
000665 007e      .db	0x00, 0x00, 0x7E, 0x4C, 0x18, 0x32, 0x7E, 0x00	; (z)
000666 180e
000667 7018
000668 1818
000669 000e      .db	0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00	; ({)
00066a 1818
00066b 1818
00066c 1818
00066d 0018      .db	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (|)
00066e 1870
00066f 0e18
000670 1818
000671 0070      .db	0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00	; (})
000672 dc76
000673 0000
000674 0000
000675 0000      .db	0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (~)
000676 1000
000677 6c38
000678 c6c6
000679 00fe      .db	0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00	; (.)
                 
00067a 1e0e
00067b 6636
00067c 667e
00067d 0066      .db	0x0E, 0x1E, 0x36, 0x66, 0x7E, 0x66, 0x66, 0x00	; (.)
00067e 607c
00067f 7c60
000680 6666
000681 007c      .db	0x7C, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
000682 667c
000683 7c66
000684 6666
000685 007c      .db	0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
000686 607e
000687 6060
000688 6060
000689 0060      .db	0x7E, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x00	; (.)
00068a 3c1c
00068b 6c6c
00068c 6c6c
00068d c6fe      .db	0x1C, 0x3C, 0x6C, 0x6C, 0x6C, 0x6C, 0xFE, 0xC6	; (.)
00068e 607e
00068f 7c60
000690 6060
000691 007e      .db	0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00	; (.)
000692 dbdb
000693 3c7e
000694 db7e
000695 00db      .db	0xDB, 0xDB, 0x7E, 0x3C, 0x7E, 0xDB, 0xDB, 0x00	; (.)
000696 663c
000697 1c06
000698 6606
000699 003c      .db	0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00	; (.)
00069a 6666
00069b 7e6e
00069c 6676
00069d 0066      .db	0x66, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (.)
00069e 663c
00069f 7e6e
0006a0 6676
0006a1 0066      .db	0x3C, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x66, 0x00	; (.)
0006a2 6c66
0006a3 7078
0006a4 6c78
0006a5 0066      .db	0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00	; (.)
0006a6 1e0e
0006a7 6636
0006a8 6666
0006a9 0066      .db	0x0E, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
0006aa eec6
0006ab fefe
0006ac d6d6
0006ad 00c6      .db	0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xD6, 0xC6, 0x00	; (.)
0006ae 6666
0006af 7e66
0006b0 6666
0006b1 0066      .db	0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00	; (.)
0006b2 663c
0006b3 6666
0006b4 6666
0006b5 003c      .db	0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00	; (.)
0006b6 667e
0006b7 6666
0006b8 6666
0006b9 0066      .db	0x7E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
0006ba 667c
0006bb 6666
0006bc 607c
0006bd 0060      .db	0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x00	; (.)
0006be 663c
0006bf 6060
0006c0 6660
0006c1 003c      .db	0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00	; (.)
0006c2 187e
0006c3 1818
0006c4 1818
0006c5 0018      .db	0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00	; (.)
0006c6 6666
0006c7 3e66
0006c8 6606
0006c9 003c      .db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00	; (.)
0006ca db7e
0006cb dbdb
0006cc 187e
0006cd 0018      .db	0x7E, 0xdb, 0xdb, 0xdb, 0x7E, 0x18, 0x18, 0x00	; (.)
0006ce 6666
0006cf 183c
0006d0 663c
0006d1 0066      .db	0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00	; (.)
0006d2 6666
0006d3 6666
0006d4 6666
0006d5 037f      .db	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7F, 0x03	; (.)
0006d6 6666
0006d7 3e66
0006d8 0606
0006d9 0006      .db	0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00	; (.)
0006da dbdb
0006db dbdb
0006dc dbdb
0006dd 00ff      .db	0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xFF, 0x00	; (.)
0006de dbdb
0006df dbdb
0006e0 dbdb
0006e1 03ff      .db	0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xFF, 0x03	; (.)
0006e2 60e0
0006e3 7c60
0006e4 6666
0006e5 007c      .db	0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
0006e6 c6c6
0006e7 f6c6
0006e8 dede
0006e9 00f6      .db	0xC6, 0xC6, 0xC6, 0xF6, 0xDE, 0xDE, 0xF6, 0x00	; (.)
0006ea 6060
0006eb 7c60
0006ec 6666
0006ed 007c      .db	0x60, 0x60, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00	; (.)
0006ee 8c78
0006ef 3e06
0006f0 8c06
0006f1 0078      .db	0x78, 0x8C, 0x06, 0x3E, 0x06, 0x8C, 0x78, 0x00	; (.)
0006f2 dbce
0006f3 fbdb
0006f4 dbdb
0006f5 00ce      .db	0xCE, 0xdb, 0xdb, 0xFB, 0xdb, 0xdb, 0xCE, 0x00	; (.)
0006f6 663e
0006f7 6666
0006f8 363e
0006f9 0066      .db	0x3E, 0x66, 0x66, 0x66, 0x3E, 0x36, 0x66, 0x00	; (.)
                 
                 ;Char_160		.db	0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00	; (.)
                 ;Char_161		.db	0x0C, 0x38, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00	; (.)
                 ;Char_162		.db	0x00, 0x00, 0xFC, 0x66, 0x7C, 0x66, 0xFC, 0x00	; (.)
                 ;Char_163		.db	0x00, 0x00, 0xFC, 0x64, 0x60, 0x60, 0xF0, 0x00	; (.)
                 ;Char_164		.db	0x00, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0xC6, 0x00	; (.)
                 ;Char_165		.db	0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00	; (.)
                 ;Char_166		.db	0x00, 0x00, 0xD6, 0x54, 0x7C, 0x54, 0xD6, 0x00	; (.)
                 ;Char_167		.db	0x00, 0x00, 0x7C, 0xC6, 0x1C, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_168		.db	0x00, 0x00, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x00	; (.)
                 ;Char_169		.db	0x00, 0x6C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x00	; (.)
                 ;Char_170		.db	0x00, 0x00, 0xE6, 0x6C, 0x78, 0x6C, 0xE6, 0x00	; (.)
                 ;Char_171		.db	0x00, 0x00, 0x1E, 0x36, 0x66, 0x66, 0x66, 0x00	; (.)
                 ;Char_172		.db	0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0x00	; (.)
                 ;Char_173		.db	0x00, 0x00, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x00	; (.)
                 ;Char_174		.db	0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_175		.db	0x00, 0x00, 0x7E, 0x66, 0x66, 0x66, 0x66, 0x00	; (.)
                 ;Char_176		.db	0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88	; (.)
                 ;Char_177		.db	0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA	; (.)
                 ;Char_178		.db	0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD	; (.)
                 ;Char_179		.db	0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18	; (.)
                 ;Char_180		.db	0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_181		.db	0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_182		.db	0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36	; (.)
                 ;Char_183		.db	0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36	; (.)
                 ;Char_184		.db	0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_185		.db	0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36	; (.)
                 ;Char_186		.db	0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36	; (.)
                 ;Char_187		.db	0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36	; (.)
                 ;Char_188		.db	0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00	; (.)
                 ;Char_189		.db	0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00	; (.)
                 ;Char_190		.db	0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00	; (.)
                 ;Char_191		.db	0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18	; (.)
                 ;Char_192		.db	0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00	; (.)
                 ;Char_193		.db	0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_194		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_195		.db	0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_196		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_197		.db	0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_198		.db	0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_199		.db	0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36	; (.)
                 ;Char_200		.db	0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00	; (.)
                 ;Char_201		.db	0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36	; (.)
                 ;Char_202		.db	0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_203		.db	0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36	; (.)
                 ;Char_204		.db	0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36	; (.)
                 ;Char_205		.db	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_206		.db	0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36	; (.)
                 ;Char_207		.db	0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_208		.db	0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00	; (.)
                 ;Char_209		.db	0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_210		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36	; (.)
                 ;Char_211		.db	0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00	; (.)
                 ;Char_212		.db	0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00	; (.)
                 ;Char_213		.db	0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_214		.db	0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36	; (.)
                 ;Char_215		.db	0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36	; (.)
                 ;Char_216		.db	0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18	; (.)
                 ;Char_217		.db	0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00	; (.)
                 ;Char_218		.db	0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18	; (.)
                 ;Char_219		.db	0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF	; (.)
                 ;Char_220		.db	0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF	; (.)
                 ;Char_221		.db	0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0	; (.)
                 ;Char_222		.db	0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F	; (.)
                 ;Char_223		.db	0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;Char_224		.db	0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0	; (.)
                 ;Char_225		.db	0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_226		.db	0x00, 0x00, 0x7E, 0x5A, 0x18, 0x18, 0x3C, 0x00	; (.)
                 ;Char_227		.db	0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC	; (.)
                 ;Char_228		.db	0x18, 0x18, 0x3C, 0x5A, 0x5A, 0x3C, 0x18, 0x18	; (.)
                 ;Char_229		.db	0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00	; (.)
                 ;Char_230		.db	0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xFE, 0x06	; (.)
                 ;Char_231		.db	0x00, 0x00, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x00	; (.)
                 ;Char_232		.db	0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x00	; (.)
                 ;Char_233		.db	0x00, 0x00, 0xD6, 0xD6, 0xD6, 0xD6, 0xFE, 0x06	; (.)
                 ;Char_234		.db	0x00, 0x00, 0xF8, 0xB0, 0x3C, 0x36, 0x7C, 0x00	; (.)
                 ;Char_235		.db	0x00, 0x00, 0xC6, 0xC6, 0xF6, 0xDE, 0xF6, 0x00	; (.)
                 ;Char_236		.db	0x00, 0x00, 0xFC, 0x30, 0x3C, 0x36, 0x7C, 0x00	; (.)
                 ;Char_237		.db	0x00, 0x00, 0x7C, 0xC6, 0x1E, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_238		.db	0x00, 0x00, 0xCE, 0xDB, 0xFB, 0xDB, 0xCE, 0x00	; (.)
                 ;Char_239		.db	0x00, 0x00, 0x7E, 0xCC, 0x7C, 0x6C, 0xCE, 0x00	; (.)
                 ;Char_240		.db	0x6C, 0x00, 0xFE, 0x62, 0x78, 0x62, 0xFE, 0x00	; (.)
                 ;Char_241		.db	0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00	; (.)
                 ;Char_242		.db	0x7C, 0xC6, 0xD0, 0xF0, 0xD0, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_243		.db	0x00, 0x00, 0x7C, 0xC6, 0xF0, 0xC6, 0x7C, 0x00	; (.)
                 ;Char_244		.db	0x66, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00	; (.)
                 ;Char_245		.db	0x6C, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00	; (.)
                 ;Char_246		.db	0xC6, 0x6C, 0xD6, 0xC6, 0x7E, 0x06, 0xFC, 0x00	; (.)
                 ;Char_247		.db	0xC6, 0x6C, 0x10, 0xC6, 0xC6, 0x7E, 0x06, 0xFC	; (.)
                 ;Char_248		.db	0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;Char_249		.db	0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00	; (.)
                 ;Char_250		.db	0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00	; (.)
                 ;Char_251		.db	0x03, 0x03, 0x06, 0x06, 0xC6, 0x6C, 0x3C, 0x18	; (.)
                 ;Char_252		.db	0xCF, 0xED, 0xFF, 0xDC, 0xCF, 0xCC, 0xCC, 0x00	; (.)
                 ;Char_253		.db	0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0x00	; (.)
                 ;Char_254		.db	0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00	; (.)
                 ;Char_255		.db	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00	; (.)
                 
                 month_len:
0006fa 2932
0006fb 3132
0006fc 3132
0006fd 3232
0006fe 3231
0006ff 3231      	.db 0x32,0x29,0x32,0x31,0x32,0x31,0x32,0x32,0x31,0x32,0x31,0x32
                 
                 ; Символьные константы
                 month_names:
                 ;	.db "Jan",0x00
                 ;	.db "Feb",0x00
                 ;	.db "Mar",0x00
                 ;	.db "Apr",0x00
                 ;	.db "May",0x00
                 ;	.db "Jun",0x00
                 ;	.db "Jul",0x00
                 ;	.db "Aug",0x00
                 ;	.db "Sep",0x00
                 ;	.db "Oct",0x00
                 ;	.db "Nov",0x00
                 ;	.db "Dec",0x00
                 
000700 cddf
000701 00c2      	.db "ЯНВ",0x00
000702 c5d4
000703 00c2      	.db "ФЕВ",0x00
000704 c0cc
000705 00d0      	.db "МАР",0x00
000706 cfc0
000707 00d0      	.db "АПР",0x00
000708 c0cc
000709 00c9      	.db "МАЙ",0x00
00070a dec8
00070b 00cd      	.db "ИЮН",0x00
00070c dec8
00070d 00cb      	.db "ИЮЛ",0x00
00070e c2c0
00070f 00c3      	.db "АВГ",0x00
000710 c5d1
000711 00cd      	.db "СЕН",0x00
000712 cace
000713 00d2      	.db "ОКТ",0x00
000714 cecd
000715 00df      	.db "НОЯ",0x00
000716 c5c4
000717 00ca      	.db "ДЕК",0x00
                 
                 week_day_names:
                 ;mon:	.db "Monday",0x00
                 ;tue:	.db "Tuesday",0x00
                 ;wed:	.db "Wednesday",0x00
                 ;thu:	.db "Thursday",0x00
                 ;fri:	.db "Friday",0x00
                 ;sat:	.db "Saturday",0x00
                 ;sun:	.db "Sunday",0x00
                 
000718 cecf
000719 c5cd
00071a c5c4
00071b dccb
00071c c8cd
00071d 00ca      mon:	.db "ПОНЕДЕЛЬНИК",0x00
00071e d2c2
00071f d0ce
000720 c8cd
000721 00ca      tue:	.db "ВТОРНИК",0x00
000722 d0d1
000723 c4c5
000724 00c0      wed:	.db "СРЕДА",0x00
000725 c5d7
000726 c2d2
000727 d0c5
000728 00c3      thu:	.db "ЧЕТВЕРГ",0x00
000729 dfcf
00072a cdd2
00072b d6c8
00072c 00c0      fri:	.db "ПЯТНИЦА",0x00
00072d d3d1
00072e c1c1
00072f d2ce
000730 00c0      sat:	.db "СУББОТА",0x00
000731 cec2
000732 cad1
000733 c5d0
000734 c5d1
000735 c8cd
000736 00c5      sun:	.db "ВОСКРЕСЕНИЕ",0x00
                 
                 week_day_table:
000737 0e30
000738 0e3c
000739 0e44
00073a 0e4a
00073b 0e52
00073c 0e5a
00073d 0e62      	.dw mon<<1, tue<<1, wed<<1, thu<<1, fri<<1, sat<<1, sun<<1
                 
                 week_day_center_coo:
00073e 1606
00073f 161e
000740 1616
000741 0006      	.db 6, 22, 30, 22, 22, 22, 6, 0x00
                 
                 corr_names:
000742 c0d7
000743 3ad1
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(907): warning: .cseg .db misalignment - padding zero byte
000744 0000      hr:	.db "ЧАС:",0x00
000745 c8cc
000746 d3cd
000747 c0d2
000748 003a      mn:	.db "МИНУТА:",0x00
000749 c5d1
00074a d3ca
00074b c4cd
00074c 3ac0
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(909): warning: .cseg .db misalignment - padding zero byte
00074d 0000      sc:	.db "СЕКУНДА:",0x00
00074e c8d7
00074f cbd1
000750 3ace
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(910): warning: .cseg .db misalignment - padding zero byte
000751 0000      dy:	.db "ЧИСЛО:",0x00
000752 c5c4
000753 dccd
000754 003a      dow:	.db "ДЕНЬ:",0x00
000755 c5cc
000756 dfd1
000757 3ad6
F:\Work\Hardware\HAND_CLOCK\firmware\clock.asm(912): warning: .cseg .db misalignment - padding zero byte
000758 0000      mo:	.db "МЕСЯЦ:",0x00
000759 cec3
00075a 00c4      yr:	.db "ГОД",0x00
                 
                 corr_nam_table:
00075b 0e84
00075c 0e8a
00075d 0e92
00075e 0e9c
00075f 0ea4
000760 0eaa
000761 0eb2      	.dw hr<<1,mn<<1,sc<<1,dy<<1,dow<<1,mo<<1,yr<<1
                 
                 corr_table:
000762 0103
000763 0102
000764 0101
000765 0104
000766 0108
000767 0105
000768 0106      	.dw hour, minute, second, day, day_of_week, month, year
                 
                 corr_max_value:
000769 0024
00076a 0060
00076b 0060
00076c 0000
00076d 0007
00076e 0012
00076f 9999      	.dw 0x24, 0x60, 0x60, 0x00, 0x07, 0x12, 0x9999
                 
                 ;-------- Конец cseg
                 
                 .dseg ; Сегмент данных ОЗУ
                 .org 0x100
                 ; Дата-время (BCD)
000100 00        	dsecond: .db 0x00
000101 00        	second: .db 0x00
000102 00        	minute: .db 0x00
000103 00        	hour: .db 0x00
000104 00        	day: .db 0x00
000105 00        	month: .db 0x00
000106 00 00     	year: .dw 0x00
000108 00        	day_of_week: .db 0x00
                 
000109 00        	tim_ovf_val: .db 0x00	; Длительность 5мс интервала (более точная корректировка)
                 
                 	; цифровая настройка хода (очень точная корректировка)
00010a 00 00
00010c 00 00     	corr_period: .dd 0x00000000	; период, по прошествии которого осуществится корректировка (десятые доли секунды)
00010e 00 00
000110 00 00     	corr_per_cnt: .dd 0x00000000
000112 00 00     	corr_value: .dw 0x0000		; корректирующее значение (BCD) lsb - десятые доли секунд, msb - секунды, старший бит lsb - знак коррекции (+/-)
                 
000114 00        	sec_duration: .db 0x00	; Длительность секунды (грубая корректировка)
000115 00        	sec_cnt: .db 0x00
                 
                 ;-------- Конец dseg
                 
                 .eseg ; Сегмент eeprom
                 
000000 14        sec_dur_eep: .db 0x14
                 
                 ;-------- Конец eseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega48PA register use summary:
r0 :   0 r1 :   0 r2 :  21 r3 :  17 r4 :  28 r5 :  28 r6 :  10 r7 :   7 
r8 :  11 r9 :   3 r10:   4 r11:   0 r12:   4 r13:  13 r14:   4 r15:   0 
r16: 424 r17:  84 r18:   6 r19:  17 r20:  34 r21:   9 r22:   1 r23:  18 
r24:  24 r25:   1 r26:   1 r27:   1 r28:   1 r29:   1 r30:  59 r31:  54 
x  :   0 y  :   0 z  :  53 
Registers used: 29 out of 35 (82.9%)

ATmega48PA instruction use summary:
.lds  :   0 .sts  :   0 adc   :   7 add   :  19 adiw  :   3 and   :   5 
andi  :  13 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :  11 brge  :   0 brhc  :   0 
brhs  :   1 brid  :   0 brie  :   0 brlo  :   7 brlt  :   0 brmi  :   0 
brne  :  37 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 cbi   :  35 cbr   :   0 clc   :   0 
clh   :   0 cli   :   2 cln   :   0 clr   :  43 cls   :   0 clt   :   0 
clv   :   0 clz   :   0 com   :   2 cp    :   5 cpc   :   0 cpi   :  37 
cpse  :   0 dec   :  16 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   7 inc   :   7 ld    :  20 ldd   :   0 
ldi   : 200 lds   :   5 lpm   :  16 lsl   :  14 lsr   :   9 mov   :  64 
movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :  64 
or    :   3 ori   :   9 out   :  18 pop   :  93 push  :  92 rcall : 174 
ret   :  25 reti  :   2 rjmp  :  74 rol   :   6 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :  38 sbic  :   0 sbis  :   4 sbiw  :   2 sbr   :   0 
sbrc  :  15 sbrs  :   9 sec   :   0 seh   :   0 sei   :   2 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   1 
spm   :   0 st    :  23 std   :   0 sts   :   9 sub   :   0 subi  :  11 
swap  :   1 tst   :   3 wdr   :   1 
Instructions used: 51 out of 111 (45.9%)

ATmega48PA memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ee0   2548   1260   3808    4096  93.0%
[.dseg] 0x000100 0x000116      0     22     22     512   4.3%
[.eseg] 0x000000 0x000001      0      1      1     256   0.4%

Assembly complete, 0 errors, 4 warnings
